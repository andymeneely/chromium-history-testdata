{"files":{"chrome/browser/component_updater/component_updater_interceptor.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":96,"num_removed":37,"messages":[{"author":"erikwright","author_email":"erikwright@chromium.org","text":"It might be appropriate to DCHECK that there is only ever one registered instance of Delegate at a time.","draft":false,"lineno":19,"date":"2012-12-06 15:26:28.199930","left":false},{"author":"pauljensen","author_email":"pauljensen@chromium.org","text":"On 2012/12/06 15:26:28, erikwright wrote:\n> It might be appropriate to DCHECK that there is only ever one registered\n> instance of Delegate at a time.\nDone.  I did this by having URLRequestFilter DCHECK if multiple handlers are added for a single URL/hostname.","draft":false,"lineno":19,"date":"2012-12-07 18:47:42.581860","left":false}],"id":17054,"is_binary":false},"net/url_request/protocol_intercept_job_factory.h":{"status":"A +","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":21,"num_removed":13,"messages":[],"id":17076,"is_binary":false},"content/test/net/url_request_abort_on_end_job.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":0,"messages":[],"id":17072,"is_binary":false},"chrome/browser/profiles/off_the_record_profile_io_data.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":12,"num_removed":13,"messages":[],"id":17065,"is_binary":false},"chrome/browser/net/http_intercept_job_factory.cc":{"status":"D","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":0,"num_removed":82,"messages":[],"id":17045,"is_binary":false},"android_webview/native/cookie_manager.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":1,"num_removed":2,"messages":[],"id":17052,"is_binary":false},"chrome/browser/extensions/autoupdate_interceptor.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":73,"num_removed":46,"messages":[{"author":"erikwright","author_email":"erikwright@chromium.org","text":"It might be worth it to take this opportunity to de-duplicate this class and the component_updater one.\n\nI have a feeling you'll be back here later, so by de-duplicating now you might save some work.","draft":false,"lineno":12,"date":"2012-12-06 15:26:28.200220","left":false},{"author":"pauljensen","author_email":"pauljensen@chromium.org","text":"On 2012/12/06 15:26:28, erikwright wrote:\n> It might be worth it to take this opportunity to de-duplicate this class and the\n> component_updater one.\n> \n> I have a feeling you'll be back here later, so by de-duplicating now you might\n> save some work.\n\nDone.","draft":false,"lineno":12,"date":"2012-12-07 18:47:42.582060","left":false}],"id":17058,"is_binary":false},"chrome/browser/extensions/api/management/management_browsertest.cc":{"status":"M","num_chunks":6,"no_base_file":false,"property_changes":"","num_added":29,"num_removed":34,"messages":[],"id":17057,"is_binary":false},"android_webview/native/net_init_native_callback.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":4,"messages":[],"id":17053,"is_binary":false},"net/url_request/url_request_test_util.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":9,"messages":[],"id":17081,"is_binary":false},"chrome/browser/net/connect_interceptor.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":10,"num_removed":12,"messages":[],"id":17062,"is_binary":false},"chrome/browser/extensions/autoupdate_interceptor.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":19,"messages":[],"id":17059,"is_binary":false},"net/url_request/protocol_intercept_job_factory.cc":{"status":"A +","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":23,"num_removed":27,"messages":[],"id":17075,"is_binary":false},"chrome/browser/component_updater/component_updater_interceptor.h":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":21,"messages":[],"id":17055,"is_binary":false},"chrome/browser/printing/print_dialog_cloud_interative_uitest.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":17,"num_removed":5,"messages":[],"id":17064,"is_binary":false},"android_webview/browser/net/aw_url_request_context_getter.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":3,"messages":[],"id":17047,"is_binary":false},"chrome/browser/policy/device_management_service_browsertest.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":72,"num_removed":49,"messages":[],"id":17063,"is_binary":false},"android_webview/native/cookie_manager.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":1,"num_removed":3,"messages":[],"id":17051,"is_binary":false},"chrome/browser/net/connect_interceptor.cc":{"status":"M","num_chunks":4,"no_base_file":false,"property_changes":"","num_added":13,"num_removed":13,"messages":[],"id":17061,"is_binary":false},"chrome/browser/extensions/user_script_listener_unittest.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":13,"num_removed":6,"messages":[],"id":17060,"is_binary":false},"chrome/browser/profiles/profile_impl_io_data.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":6,"messages":[],"id":17067,"is_binary":false},"chrome/browser/component_updater/test/component_updater_service_unittest.cc":{"status":"M","num_chunks":10,"no_base_file":false,"property_changes":"","num_added":24,"num_removed":27,"messages":[],"id":17056,"is_binary":false},"android_webview/native/android_protocol_handler.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":2,"messages":[],"id":17050,"is_binary":false},"net/url_request/url_request_unittest.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":10,"num_removed":5,"messages":[{"author":"erikwright","author_email":"erikwright@chromium.org","text":"Is there a reason why this should be a ProtocolInterceptJobFactory wrapping an empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n\nCouldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler then?\n\nOr couldn't we do one of:\n\n1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped factory, or\n2) create a new URLRequestJobFactory implementation that only holds a single ProtocolHandler and NOTREACHED()'s all mutators?","draft":false,"lineno":473,"date":"2012-12-06 15:26:28.200790","left":false},{"author":"pauljensen","author_email":"pauljensen@chromium.org","text":"On 2012/12/06 15:26:28, erikwright wrote:\n> Is there a reason why this should be a ProtocolInterceptJobFactory wrapping an\n> empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> \n> Couldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler\n> then?\nTestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP requests or non-HTTP requests will be handled by the default static URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to maintain this exact behavior.  After looking at users of TestJobInterceptor, it looks like the tests don't actually need to rely on the default static URLRequest::ProtocolFactory's, so I guess the answer is I could just call URLRequestJobFactoryImpl::SetProtocolHandler().\n> \n> Or couldn't we do one of:\n> \n> 1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped\n> factory, or\n> 2) create a new URLRequestJobFactory implementation that only holds a single\n> ProtocolHandler and NOTREACHED()'s all mutators?\nWhy the concern about mutators?  I thought these were going away imminently.","draft":false,"lineno":473,"date":"2012-12-07 18:47:42.582610","left":false},{"author":"erikwright","author_email":"erikwright@chromium.org","text":"On 2012/12/07 18:47:42, pauljensen wrote:\n> On 2012/12/06 15:26:28, erikwright wrote:\n> > Is there a reason why this should be a ProtocolInterceptJobFactory wrapping an\n> > empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> > \n> > Couldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler\n> > then?\n> TestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP\n> requests or non-HTTP requests will be handled by the default static\n> URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to maintain\n> this exact behavior.  After looking at users of TestJobInterceptor, it looks\n> like the tests don't actually need to rely on the default static\n> URLRequest::ProtocolFactory's, so I guess the answer is I could just call\n> URLRequestJobFactoryImpl::SetProtocolHandler().\n\nOK, I see.\n\n> > Or couldn't we do one of:\n> > \n> > 1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped\n> > factory, or\n> > 2) create a new URLRequestJobFactory implementation that only holds a single\n> > ProtocolHandler and NOTREACHED()'s all mutators?\n> Why the concern about mutators?  I thought these were going away imminently.\n\nIt's just that I noticed that you had converted the mutators in the ProtocolInterceptJobFactory from NOTREACHED to forwarding, which leads me to wonder who's relying on them (as they will presumably present a problem when we do attempt to remove them).\n\nIf it doesn't break anyone, I'd leave the NOTREACHED, but ultimately I'm also OK to worry about that separately.","draft":false,"lineno":473,"date":"2012-12-07 20:12:05.561150","left":false},{"author":"pauljensen","author_email":"pauljensen@chromium.org","text":"On 2012/12/07 20:12:05, erikwright wrote:\n> On 2012/12/07 18:47:42, pauljensen wrote:\n> > On 2012/12/06 15:26:28, erikwright wrote:\n> > > Is there a reason why this should be a ProtocolInterceptJobFactory wrapping\n> an\n> > > empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> > > \n> > > Couldn't it just be an URLRequestJobFactoryImpl with a single\n> ProtocolHandler\n> > > then?\n> > TestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP\n> > requests or non-HTTP requests will be handled by the default static\n> > URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to\n> maintain\n> > this exact behavior.  After looking at users of TestJobInterceptor, it looks\n> > like the tests don't actually need to rely on the default static\n> > URLRequest::ProtocolFactory's, so I guess the answer is I could just call\n> > URLRequestJobFactoryImpl::SetProtocolHandler().\n> \n> OK, I see.\n> \n> > > Or couldn't we do one of:\n> > > \n> > > 1) make the mutators in ProtocolInterceptJobFactory not forward to the\n> wrapped\n> > > factory, or\n> > > 2) create a new URLRequestJobFactory implementation that only holds a single\n> > > ProtocolHandler and NOTREACHED()'s all mutators?\n> > Why the concern about mutators?  I thought these were going away imminently.\n> \n> It's just that I noticed that you had converted the mutators in the\n> ProtocolInterceptJobFactory from NOTREACHED to forwarding, which leads me to\n> wonder who's relying on them (as they will presumably present a problem when we\n> do attempt to remove them).\n> \n> If it doesn't break anyone, I'd leave the NOTREACHED, but ultimately I'm also OK\n> to worry about that separately.\nFor now they must pass things like SetProtocolHandler() onto |job_factory_| until crrev.com/11308362 lands.\n","draft":false,"lineno":473,"date":"2012-12-09 23:14:12.680770","left":false}],"id":17082,"is_binary":false},"net/net.gyp":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":0,"messages":[],"id":17073,"is_binary":false},"chrome/chrome_browser.gypi":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":0,"num_removed":2,"messages":[],"id":17070,"is_binary":false},"content/test/net/url_request_abort_on_end_job.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":0,"messages":[{"author":"erikwright","author_email":"erikwright@chromium.org","text":"This could be a free function in anonymous namespace to avoid polluting the class declaration.\n\nUnless it also makes sense to make Factory a private function, in which case this would need to stay a member.\n\nUltimately, I would make this and Factory free functions in anon namespace and make the constructor public, assuming that with this change there are no remaining direct uses of the Factory.","draft":false,"lineno":35,"date":"2012-12-06 15:26:28.200510","left":false},{"author":"pauljensen","author_email":"pauljensen@chromium.org","text":"On 2012/12/06 15:26:28, erikwright wrote:\n> This could be a free function in anonymous namespace to avoid polluting the\n> class declaration.\n> \n> Unless it also makes sense to make Factory a private function, in which case\n> this would need to stay a member.\n> \n> Ultimately, I would make this and Factory free functions in anon namespace and\n> make the constructor public, assuming that with this change there are no\n> remaining direct uses of the Factory.\n\nDone.","draft":false,"lineno":35,"date":"2012-12-07 18:47:42.582310","left":false}],"id":17071,"is_binary":false},"chrome/browser/profiles/profile_io_data.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":2,"messages":[],"id":17068,"is_binary":false},"net/url_request/url_request_filter.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":29,"num_removed":2,"messages":[],"id":17078,"is_binary":false},"chrome/browser/profiles/profile_impl_io_data.cc":{"status":"M","num_chunks":4,"no_base_file":false,"property_changes":"","num_added":32,"num_removed":26,"messages":[],"id":17066,"is_binary":false},"android_webview/browser/net/init_native_callback.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":5,"num_removed":2,"messages":[],"id":17048,"is_binary":false},"net/url_request/url_request_test_util.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":16,"messages":[],"id":17080,"is_binary":false},"net/url_request/url_request_filter.h":{"status":"M","num_chunks":4,"no_base_file":false,"property_changes":"","num_added":12,"num_removed":1,"messages":[],"id":17079,"is_binary":false},"android_webview/native/android_protocol_handler.cc":{"status":"M","num_chunks":6,"no_base_file":false,"property_changes":"","num_added":22,"num_removed":28,"messages":[],"id":17049,"is_binary":false},"net/proxy/proxy_script_fetcher_impl_unittest.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":16,"messages":[],"id":17074,"is_binary":false},"net/url_request/url_request.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":0,"num_removed":4,"messages":[],"id":17077,"is_binary":false},"chrome/browser/net/http_intercept_job_factory.h":{"status":"D","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":0,"num_removed":56,"messages":[],"id":17046,"is_binary":false},"chrome/browser/profiles/profile_io_data.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":2,"messages":[],"id":17069,"is_binary":false}},"owner_email":"pauljensen@chromium.org","owner":"pauljensen","message":"some cleanup","try_job_results":[],"created":"2012-11-30 21:01:15.228130","url":null,"num_comments":10,"modified":"2012-12-09 23:14:12.740000","patchset":22109,"issue":11293252}