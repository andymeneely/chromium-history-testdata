{"description":"unchecked_malloc() for Skia on OSX.\n\nOn tcmalloc-based versions of Chromium, skia resets the global new\nhandler to prevent the oom-killer from kicking in.  Traditionally the\nOSX developers have been agin this, because it's not thread-safe, and\nwe have questions about whether it's even the right thing to do.  This\nchange should be thread-safe because g_old_malloc is only set on the\nmain thread at startup.\n\nAs far as whether it's the right thing to do, I'm tired and want to\nquit hearing about it.\n\nAdditionally, remove a bit of leftover pre-10.6 code.\n\nBUG=103980,73751,117949\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=157646","cc":["chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"reviewers":["avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com"],"messages":[{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"","disapproval":false,"date":"2012-09-13 19:29:31.888570","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"The design works so far, but it doesn't handle cases like crbug.com/42342 where we'd need to expose this as try_malloc in WebKit.\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util.h\nFile base/process_util.h (right):\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util.h#newcode866\nbase/process_util.h:866: BASE_EXPORT void* oom_safe_malloc(size_t size);\nI don't like the name \"oom safe\". While it's safe from the oom killer, it's a very _unsafe_ call overall. I'd lean towards \"unsafe_malloc\" or the like.\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util_mac.mm\nFile base/process_util_mac.mm (left):\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util_mac.mm#oldcode848\nbase/process_util_mac.mm:848: return NULL;\nThanks for removing this.","disapproval":false,"date":"2012-09-13 19:45:54.578110","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/13 19:45:54, Avi wrote:\n> The design works so far, but it doesn't handle cases like crbug.com/42342 where\n> we'd need to expose this as try_malloc in WebKit.\n\nI've managed to get this far without ever hearing about that, but the image-bitmap version seems to come up every three months or so, so I'm willing to just punt on 42342 :-).\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util.h\nFile base/process_util.h (right):\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util.h#newcode866\nbase/process_util.h:866: BASE_EXPORT void* oom_safe_malloc(size_t size);\nOn 2012/09/13 19:45:54, Avi wrote:\n> I don't like the name \"oom safe\". While it's safe from the oom killer, it's a\n> very _unsafe_ call overall. I'd lean towards \"unsafe_malloc\" or the like.\n\nWell, it's not _unsafe_, per se.  Just against general policy.  unchecked_malloc()?  original_malloc() or system_malloc() seem kind implementation-driven, but since this is explicitly a case about avoiding a bit of our implementation, seems fair.\n\nI suppose it would also be worth putting in a scary comment, like \"If you use this without running it by a few of the OSX developers, your code will be reverted.\"\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util_mac.mm\nFile base/process_util_mac.mm (left):\n\nhttps://codereview.chromium.org/10908245/diff/1/base/process_util_mac.mm#oldcode848\nbase/process_util_mac.mm:848: return NULL;\nOn 2012/09/13 19:45:54, Avi wrote:\n> Thanks for removing this.\n\nOops, added about this to the CL description.","disapproval":false,"date":"2012-09-13 20:04:00.376720","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"The WebKit name for this is TryMalloc, though I'm not a fan of that. And this _is_ unsafe, or at least more unsafe than the oom malloc.\n\nDo we want to keep watch over the codebase? We could add it as a private function on a class and require users to explicitly list themselves as a friend to use it. That way we'd only need to keep an eye on one place.\n\nYeah, I know. Eeew.","disapproval":false,"date":"2012-09-13 20:21:17.961740","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/9001/base/process_util_unittest.cc\nFile base/process_util_unittest.cc (right):\n\nhttps://codereview.chromium.org/10908245/diff/9001/base/process_util_unittest.cc#newcode1122\nbase/process_util_unittest.cc:1122: if (zone)\nDo we need these if calls? The default purgeable zone will exist post 10.6.","disapproval":false,"date":"2012-09-13 20:21:24.998200","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/13 20:21:17, Avi wrote:\n> The WebKit name for this is TryMalloc, though I'm not a fan of that. And this\n> _is_ unsafe, or at least more unsafe than the oom malloc.\n\nI don't really like TryMalloc, either.  unsafe_malloc() feels mis-leading - the malloc itself is not unsafe, it's what you do with the results that is unsafe.  An argument can perhaps be made that any caller who can do the right thing necessarily can handle the naming mis-match, but, still.\n\n> Do we want to keep watch over the codebase? We could add it as a private\n> function on a class and require users to explicitly list themselves as a friend\n> to use it. That way we'd only need to keep an eye on one place.\n> \n> Yeah, I know. Eeew.\n\nAiigh!\n\nI'll poke at it to see how evil it looks.  But I'm inclined to think that if we're to the point where we really need to do that, rather than try to address social problems with technological solutions it would be saner to just quit the project and go work on something else.  Since this is inherently non-portable, nobody is likely to use it accidentally, and if they use it intentionally, so they'll either have a compelling argument, or will work around your barriers (for instance by calling sk_malloc_flags).\n\nhttps://codereview.chromium.org/10908245/diff/9001/base/process_util_unittest.cc\nFile base/process_util_unittest.cc (right):\n\nhttps://codereview.chromium.org/10908245/diff/9001/base/process_util_unittest.cc#newcode1122\nbase/process_util_unittest.cc:1122: if (zone)\nOn 2012/09/13 20:21:25, Avi wrote:\n> Do we need these if calls? The default purgeable zone will exist post 10.6.\n\nTough crowd!\n\nhttps://codereview.chromium.org/10908245/diff/9001/base/process_util_unittest.cc#newcode1161\nbase/process_util_unittest.cc:1161: // runtime because it may not be present in the SDK used for compilation.\nLooks like I can fix this, too.","disapproval":false,"date":"2012-09-13 21:15:47.426200","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Scott, I won't LG this with the word \"safe\" in the name of the function. Everything else looks nice, but we need a different name. As bad as try_malloc is, it's better than oom_safe_malloc.","disapproval":false,"date":"2012-09-13 21:30:48.870730","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/13 21:15:47, shess wrote:\n> On 2012/09/13 20:21:17, Avi wrote:\n> > Do we want to keep watch over the codebase? We could add it as a private\n> > function on a class and require users to explicitly list themselves as a friend\n> > to use it. That way we'd only need to keep an eye on one place.\n> > \n> > Yeah, I know. Eeew.\n> \n> Aiigh!\n> \n> I'll poke at it to see how evil it looks.\n\nWow.  I have been entirely unable to make sk_malloc_flags() a friend function.  The only way I could manage this was to declare a hider class which was friends with a provider class over in SkMemory_new_handler.cpp.  I don't think it was a namespacing issue, because I didn't do anything special with the gateway class in terms of namespacing (well, except it couldn't be anon, of course).\n\nI think that would sum up to a class in process_util friending a class in base/mac somewhere which in turn friended a global class in skia-land.  I'm not feeling enthusiastic about all that, really.","disapproval":false,"date":"2012-09-13 22:00:30.360640","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"OK, so that's not worth it. Never mind then about that.","disapproval":false,"date":"2012-09-13 22:02:51.808120","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/13 21:30:48, Avi wrote:\n> Scott, I won't LG this with the word \"safe\" in the name of the function.\n> Everything else looks nice, but we need a different name. As bad as try_malloc\n> is, it's better than oom_safe_malloc.\n\nYeah, I'm fine with no lg.  try_malloc() feels funky, but maybe I can come around to it.\n- unsafe_malloc()\n- unchecked_malloc()\n- try_malloc()\n- system_malloc()\n- malloc_no_throw()\n- malloc_no_oom_killer()\n\nskia_malloc_no_throw() doesn't look half bad in terms of fitting with the context (!(flags & SK_MALLOC_THROW)), and in terms of preventing opportunistic users.  Admittedly, the entire concept of screwing around with throwing in a C function is abnormal, but that's where they're at over there.\n\nLater we can add webkit_try_malloc(), implemented identically.","disapproval":false,"date":"2012-09-13 22:06:55.724930","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/13 22:06:55, shess wrote:\n> - unsafe_malloc()\n> - unchecked_malloc()\n\nI kinda like \"unchecked_malloc\", and if you're not thrilled with \"unsafe\" I can dig this.\n\n> - try_malloc()\n> - system_malloc()\n> - malloc_no_throw()\n\nThrow? In C?\n\n> - malloc_no_oom_killer()\n\ntoo_many_words","disapproval":false,"date":"2012-09-13 22:09:17.158910","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Looping in mark@ for OWNERS, and another shot at the bike shed.\n[man, the autocomplete for \"mark\" sucks.]\n\nOn 2012/09/13 22:09:17, Avi wrote:\n> On 2012/09/13 22:06:55, shess wrote:\n> > - unsafe_malloc()\n> > - unchecked_malloc()\n> \n> I kinda like \"unchecked_malloc\", and if you're not thrilled with \"unsafe\" I can\n> dig this.\n\nIma take that and run wit it!\n\n> > - try_malloc()\n> > - system_malloc()\n> > - malloc_no_throw()\n> \n> Throw? In C?\n\nYeah, like I said, in skia-land it makes sense, even though it obvious does not make sense.\n\n> > - malloc_no_oom_killer()\n> \n> too_many_words\n\ni_am_smarter_than_all_of_you_malloc()","disapproval":false,"date":"2012-09-13 22:28:23.932090","approval":false},{"sender":"avi@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"I'm happy. LGTM","disapproval":false,"date":"2012-09-13 23:14:55.400450","approval":true},{"sender":"rsesek@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"LGTM\n\nhttps://codereview.chromium.org/10908245/diff/14001/base/process_util.h\nFile base/process_util.h (right):\n\nhttps://codereview.chromium.org/10908245/diff/14001/base/process_util.h#newcode865\nbase/process_util.h:865: BASE_EXPORT void* unchecked_malloc(size_t size);\nI only wonder if this should be named UncheckedMalloc.","disapproval":false,"date":"2012-09-13 23:18:15.621120","approval":true},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"ping","disapproval":false,"date":"2012-09-17 18:09:15.125230","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/14001/base/process_util.h\nFile base/process_util.h (right):\n\nhttps://codereview.chromium.org/10908245/diff/14001/base/process_util.h#newcode865\nbase/process_util.h:865: BASE_EXPORT void* unchecked_malloc(size_t size);\nUncheckedMalloc.\n\nOr UnsafeUncheckedMalloc.\n\nhttps://codereview.chromium.org/10908245/diff/14001/base/process_util_mac.mm\nFile base/process_util_mac.mm (left):\n\nhttps://codereview.chromium.org/10908245/diff/14001/base/process_util_mac.mm#oldcode839\nbase/process_util_mac.mm:839: malloc_zone_t* GetPurgeableZone() {\nGood cleanup.","disapproval":false,"date":"2012-09-17 18:28:11.224630","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Oooooohhhhhkay.  I figured WTF, I should actually, you know, test to see if it works.  In practice, rather than in theory.\n\nCrMallocErrorBreak() crashes, and when I change the LOG(ERROR) to PLOG(ERROR), I get errno 9, EBADF \"Bad file descriptor.\"  Full output is like:\n\nChromium Helper(58127,0xa0c69540) malloc: *** mmap(size=2120433664) failed (error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\n[58127:-1597598400:0917/130240:ERROR:process_util_mac.mm(580)] Terminating process due to a potential for future heap corruption: Bad file descriptor\n\nThe 12 is the ENOMEM expected.  AFAICT, the EBADF is from where malloc.c in _malloc_vprintf() calls _simple_asl_log(), which will call write(-1, junk, junk_len).\n\nKinda hating malloc_error_break() right now.  I'm kind of wondering if I'm missing something key, here, because AFAICT this means CrMallocErrorBreak() won't work at all.  It's a debug build, would that be different?  Any ideas of whether this can even be addressed?","disapproval":false,"date":"2012-09-17 20:30:27.442480","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Converted to UncheckedMalloc().\n\nAdding EBADF check allows things to work, though it makes me ill.  By \"work\", I mean that the image in http://crbug.com/103980 ends up as a giant white image (when you click on it), rather than crash, which matches Windows.  The failure to allocate is logged on console.\n\nOn 2012/09/17 20:30:27, shess wrote:\n> Oooooohhhhhkay.  I figured WTF, I should actually, you know, test to see if it\n> works.  In practice, rather than in theory.\n> \n> CrMallocErrorBreak() crashes, and when I change the LOG(ERROR) to PLOG(ERROR), I\n> get errno 9, EBADF \"Bad file descriptor.\"  Full output is like:\n> \n> Chromium Helper(58127,0xa0c69540) malloc: *** mmap(size=2120433664) failed\n> (error code=12)\n> *** error: can't allocate region\n> *** set a breakpoint in malloc_error_break to debug\n> [58127:-1597598400:0917/130240:ERROR:process_util_mac.mm(580)] Terminating\n> process due to a potential for future heap corruption: Bad file descriptor\n> \n> The 12 is the ENOMEM expected.  AFAICT, the EBADF is from where malloc.c in\n> _malloc_vprintf() calls _simple_asl_log(), which will call write(-1, junk,\n> junk_len).\n> \n> Kinda hating malloc_error_break() right now.  I'm kind of wondering if I'm\n> missing something key, here, because AFAICT this means CrMallocErrorBreak()\n> won't work at all.  It's a debug build, would that be different?  Any ideas of\n> whether this can even be addressed?","disapproval":false,"date":"2012-09-17 23:49:56.772910","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm\nFile base/process_util_mac.mm (right):\n\nhttps://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm#newcode572\nbase/process_util_mac.mm:572: if (errno == ENOMEM || errno == EBADF)\nI don’t think this is cool. Can you be more surgical?","disapproval":false,"date":"2012-09-18 00:18:22.299780","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm\nFile base/process_util_mac.mm (right):\n\nhttps://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm#newcode572\nbase/process_util_mac.mm:572: if (errno == ENOMEM || errno == EBADF)\nOn 2012/09/18 00:18:22, Mark Mentovai wrote:\n> I don’t think this is cool. Can you be more surgical?\n\nI don't really think it's cool, either, but ... I also have no idea what the alternative is.  Tomorrow I'll review the malloc code to see if there are any other likely errno-setting operations which can lead here, but that's obviously a failure waiting to happen.  Presumably there wouldn't be a ton of file-descriptor accesses in the malloc library, outside of logging and debugging code.\n\nWe could hook szone_error() to pre-empt the problem.  That's terrifying in its own way, but it would have the side benefit of allowing us to suppress the logging currently done on NULL pointer return.  [I'm away from my Libc checkout right now, so that logging may only happen on debug.]\n\nI'm waiting for a rsesek response, though.  This started out as \"Oh, yeah, we could just <x>\", but it's quickly building momentum...","disapproval":false,"date":"2012-09-18 01:55:26.339040","approval":false},{"sender":"rsesek@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/18 01:55:26, shess wrote:\n> https://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm\n> File base/process_util_mac.mm (right):\n> \n> https://codereview.chromium.org/10908245/diff/11002/base/process_util_mac.mm#newcode572\n> base/process_util_mac.mm:572: if (errno == ENOMEM || errno == EBADF)\n> On 2012/09/18 00:18:22, Mark Mentovai wrote:\n> > I don’t think this is cool. Can you be more surgical?\n> \n> I don't really think it's cool, either, but ... I also have no idea what the\n> alternative is.  Tomorrow I'll review the malloc code to see if there are any\n> other likely errno-setting operations which can lead here, but that's obviously\n> a failure waiting to happen.  Presumably there wouldn't be a ton of\n> file-descriptor accesses in the malloc library, outside of logging and debugging\n> code.\n> \n> We could hook szone_error() to pre-empt the problem.  That's terrifying in its\n> own way, but it would have the side benefit of allowing us to suppress the\n> logging currently done on NULL pointer return.  [I'm away from my Libc checkout\n> right now, so that logging may only happen on debug.]\n> \n> I'm waiting for a rsesek response, though.  This started out as \"Oh, yeah, we\n> could just <x>\", but it's quickly building momentum...\n\nWhat specifically are you wanting me to respond to?\n\nI looked at hooking szone_error() but that's a bit tricky since it's varargs and has no va_list version. We could also use our own TLS slot instead of errno for controlling when to fatalize CrMallocErrorBreak, which we talked about before. That may suck for performance, though.","disapproval":false,"date":"2012-09-18 21:14:38.593440","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/18 21:14:38, rsesek wrote:\n> On 2012/09/18 01:55:26, shess wrote:\n> > I'm waiting for a rsesek response, though.  This started out as \"Oh, yeah, we\n> > could just <x>\", but it's quickly building momentum...\n> \n> What specifically are you wanting me to respond to?\n\nI am ... befuddled.  In the context of ProcessUtilTest.MacMallocFailureDoesNotTerminate, errno is ENOMEM.  But in the context of this CL, loading the giant image from issue 103980 into Chromium, it sees EBADF instead of ENOMEM (with \"error code=12\" logged as noted above, which means it was ENOMEM at that point in the malloc code).\n\nAHAHA!  It's syslog stuff in Libc's _simple.c.  It is sent to a unix-domain socket /var/run/syslog, which isn't accessible in renderers.  For base_unittests, there's no problem.  --no-sandbox fixes it right up for Chromium.\n\nLibc-763.13 (10.7.4) uses a Mach port retrieved via bootstrap port for this logging, so that'll probably be different.","disapproval":false,"date":"2012-09-18 23:31:16.216410","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"I think it's _probably_ reasonable to allow renderers to log to syslog.  I think someone could DoS the system via the stderr logging to the console-logging facility.  But maybe it's more scary than that?","disapproval":false,"date":"2012-09-18 23:33:25.224060","approval":false},{"sender":"jeremy@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"nit: agin->against in CL description.\n\nhttps://codereview.chromium.org/10908245/diff/17002/DEPS\nFile DEPS (right):\n\nhttps://codereview.chromium.org/10908245/diff/17002/DEPS#newcode90\nDEPS:90: (Var(\"googlecode_url\") % \"google-safe-browsing\") + \"/trunk/testing@111\",\n?\n\nhttps://codereview.chromium.org/10908245/diff/17002/content/common/common.sb\nFile content/common/common.sb (right):\n\nhttps://codereview.chromium.org/10908245/diff/17002/content/common/common.sb#newcode41\ncontent/common/common.sb:41: (remote unix-socket (path-literal \"/private/var/run/syslog\")))  ; 10.6\nIs there a problem not adding this and letting the log messages fall on the floor?\nJust trying to understand if it's absolutely necessary to poke a hole in the sandbox for this...","disapproval":false,"date":"2012-09-19 04:19:39.008820","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 04:19:39, jeremy wrote:\n> nit: agin->against in CL description.\n\n\"agin\" is a perfectly cromulent word.\n\n> https://codereview.chromium.org/10908245/diff/17002/DEPS\n> File DEPS (right):\n> \n> https://codereview.chromium.org/10908245/diff/17002/DEPS#newcode90\n> DEPS:90: (Var(\"googlecode_url\") % \"google-safe-browsing\") +\n> \"/trunk/testing@111\",\n> ?\n\nSorry, multi-tasking.  Someone thought my sb change had broke sb, I was proving otherwise.\n\n> https://codereview.chromium.org/10908245/diff/17002/content/common/common.sb\n> File content/common/common.sb (right):\n> \n> https://codereview.chromium.org/10908245/diff/17002/content/common/common.sb#newcode41\n> content/common/common.sb:41: (remote unix-socket (path-literal\n> \"/private/var/run/syslog\")))  ; 10.6\n> Is there a problem not adding this and letting the log messages fall on the\n> floor?\n> Just trying to understand if it's absolutely necessary to poke a hole in the\n> sandbox for this...\n\nJustin suggests that we shouldn't allow renderers to write to syslog.  I'll go debate that with him tomorrow.\n\nThe gist of this CL is allowing malloc() to return NULL in a special case.  In the course of returning NULL, the malloc library attempts to log to syslog.  When it fails, errno changes from ENOMEM to EBADF, and our failure handler has to detect that case in order to allow it through.  Obviously, EBADF is a very weird thing to look for in a malloc library!  Fortunately for other apps, the actual malloc() implementation checks for NULL return from the lower-level code and resets errno to ENOMEM.\n\nSo, we could:\n - allow syslog in the renderer.\n - check EBADF\n - wire up an alternative strategy for the error handler.\n - give up.\n\nWe took a pass on the alternative strategy long ago, because it would slow things down.  But it may be reasonable to slow down this special case call to malloc().","disapproval":false,"date":"2012-09-19 04:45:49.385570","approval":false},{"sender":"playmobil@google.com","recipients":["reply@chromiumcodereview-hr.appspotmail.com"],"text":"On Wed, Sep 19, 2012 at 7:45 AM, <shess@chromium.org> wrote:\r\n\r\n> On 2012/09/19 04:19:39, jeremy wrote:\r\n>\r\n>> nit: agin->against in CL description.\r\n>>\r\n>\r\n> \"agin\" is a perfectly cromulent word.\r\n\r\n:)\r\n\r\nhttps://codereview.chromium.**org/10908245/diff/17002/**\r\n>> content/common/common.sb<https://codereview.chromium.org/10908245/diff/17002/content/common/common.sb>\r\n>> File content/common/common.sb (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.chromium.**org/10908245/diff/17002/**\r\n> content/common/common.sb#**newcode41<https://codereview.chromium.org/10908245/diff/17002/content/common/common.sb#newcode41>\r\n>\r\n>> content/common/common.sb:41: (remote unix-socket (path-literal\r\n>> \"/private/var/run/syslog\")))  ; 10.6\r\n>> Is there a problem not adding this and letting the log messages fall on\r\n>> the\r\n>> floor?\r\n>> Just trying to understand if it's absolutely necessary to poke a hole in\r\n>> the\r\n>> sandbox for this...\r\n>>\r\n>\r\n> Justin suggests that we shouldn't allow renderers to write to syslog.\r\n>  I'll go\r\n> debate that with him tomorrow.\r\n>\r\n> The gist of this CL is allowing malloc() to return NULL in a special case.\r\n>  In\r\n> the course of returning NULL, the malloc library attempts to log to syslog.\r\n> When it fails, errno changes from ENOMEM to EBADF, and our failure handler\r\n> has\r\n> to detect that case in order to allow it through.  Obviously, EBADF is a\r\n> very\r\n> weird thing to look for in a malloc library!  Fortunately for other apps,\r\n> the\r\n> actual malloc() implementation checks for NULL return from the lower-level\r\n> code\r\n> and resets errno to ENOMEM.\r\n>\r\n> So, we could:\r\n>  - allow syslog in the renderer.\r\n>  - check EBADF\r\n>  - wire up an alternative strategy for the error handler.\r\n>  - give up.\r\n>\r\n> We took a pass on the alternative strategy long ago, because it would slow\r\n> things down.  But it may be reasonable to slow down this special case call\r\n> to\r\n> malloc().\r\n>\r\n> https://codereview.chromium.**org/10908245/<https://codereview.chromium.org/10908245/>\r\n>\r\n\r\nIs checking EBADF an acceptable solution? I'd personally prefer to keep the\r\nsandbox definition as small as possible if it's ok.\r\nOtherwise if you and Justin think that poking a hole in the sandbox for\r\nthis is the way to go then LGTM :)\r\n","disapproval":false,"date":"2012-09-19 04:55:55.701840","approval":true},{"sender":"rsesek@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 04:45:49, shess wrote:\n> So, we could:\n>  - allow syslog in the renderer.\n\n-1 I'd prefer to not poke a hole in the sandbox.\n\n>  - check EBADF\n\n+0 Not really sure we can reason about all the failure cases this will/won't hit.\n\n>  - wire up an alternative strategy for the error handler.\n\n±1 We have two of those, AFAIK:\n- Use TLS and set a flag that will only be checked if errno!=ENOMEM. That probably won't hit performance too bad, especially because we will likely crash the browser after that. But for large allocations, it will slow things down even more :/.\n- Do a quick stackwalk to see if we're coming up through UncheckedMalloc. That may not be to bad, considering that'll only be like 3-5 frames away.\n\n>  - give up.\n\n+0.25","disapproval":false,"date":"2012-09-19 16:56:04.420200","approval":false},{"sender":"mark@chromium.org","recipients":["reply@chromiumcodereview-hr.appspotmail.com"],"text":"> - Do a quick stackwalk to see if we're coming up through UncheckedMalloc.\r\nThat\r\n> may not be to bad, considering that'll only be like 3-5 frames away.\r\n\r\nThis shouldn’t be in your ±1 section, or any other section ≥ 0.\r\n","disapproval":false,"date":"2012-09-19 16:59:39.085040","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 16:56:04, rsesek wrote:\n> On 2012/09/19 04:45:49, shess wrote:\n> > So, we could:\n> >  - allow syslog in the renderer.\n> \n> -1 I'd prefer to not poke a hole in the sandbox.\n\nI think I'm against this, too.  About the only thing I can think of along those lines is to have the sandboxing code warm up asl_socket, and use nlist to test for -1 and reset it to /dev/null.  But that's super AWESOME.\n\n> >  - check EBADF\n> \n> +0 Not really sure we can reason about all the failure cases this will/won't\n> hit.\n\nI'm actually not disliking this as much today.  We're in the corrupt-metadata handler, after all.  There is no SLA for this, we shouldn't even be here.  All we know is that something poor has happened, but there could have been any number of operations executed between the point where the corruption happened and where it was detected, so it's not a matter of preventing anything bad from happening, it's a matter of how quickly we react.  Checking against EBADF might mask some potential crash cases, but most likely we'll just get called again real soon now.\n\nWe could add a tailored crash path for EBADF to test things in the wild.  Hmm, or we could make death_ptr be NULL+errno and get that for free.  Anyhow, I think we'd see every CrMallocErrorBreak on 10.7 in the sandbox with errno EBADF.\n\n> >  - wire up an alternative strategy for the error handler.\n> \n> ±1 We have two of those, AFAIK:\n> - Use TLS and set a flag that will only be checked if errno!=ENOMEM. That\n> probably won't hit performance too bad, especially because we will likely crash\n> the browser after that. But for large allocations, it will slow things down even\n> more :/.\n\nLarge allocations imply large operations.  So something like setting the TLS only for sizes over 1M we add negligible cost.  For smaller sizes, all of the arguments about \"It just moves the OOM crash forward 50ms\" apply.\n\nEven with TLS, though then the condition looks like:\n\n  if (errno == ENOMEM || (errno == EBADF && IsSetTLS())\n    return;\n\nbecause I doubt we'd want to allow other than EBADF through at that point.\n\n> - Do a quick stackwalk to see if we're coming up through UncheckedMalloc. That\n> may not be to bad, considering that'll only be like 3-5 frames away.\n\nWe should do a STACKWALK using a REGEX.  That would be AWESOME.","disapproval":false,"date":"2012-09-19 18:09:12.515630","approval":false},{"sender":"rsesek@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 18:09:12, shess wrote:\n> On 2012/09/19 16:56:04, rsesek wrote:\n> > On 2012/09/19 04:45:49, shess wrote:\n> > > So, we could:\n> > >  - allow syslog in the renderer.\n> > \n> > -1 I'd prefer to not poke a hole in the sandbox.\n> \n> I think I'm against this, too.  About the only thing I can think of along those\n> lines is to have the sandboxing code warm up asl_socket, and use nlist to test\n> for -1 and reset it to /dev/null.  But that's super AWESOME.\n\nWe actually just talked about doing something like this at lunch :-). But -1.\n\n> \n> > >  - check EBADF\n> > \n> > +0 Not really sure we can reason about all the failure cases this will/won't\n> > hit.\n> \n> I'm actually not disliking this as much today.  We're in the corrupt-metadata\n> handler, after all.  There is no SLA for this, we shouldn't even be here.  All\n> we know is that something poor has happened, but there could have been any\n> number of operations executed between the point where the corruption happened\n> and where it was detected, so it's not a matter of preventing anything bad from\n> happening, it's a matter of how quickly we react.  Checking against EBADF might\n> mask some potential crash cases, but most likely we'll just get called again\n> real soon now.\n> \n> We could add a tailored crash path for EBADF to test things in the wild.  Hmm,\n> or we could make death_ptr be NULL+errno and get that for free.  Anyhow, I think\n> we'd see every CrMallocErrorBreak on 10.7 in the sandbox with errno EBADF.\n\n+0.5 If we do this, also do the death_ptr+errno because that's cute. I'm sure in this state we'd crash again real soon, but it may not point directly at the smoking gun because we deferred the crash until the next time. CrMallocErrorBreak has been pretty good at pointing at the thing that was wrongly freed/managed. If we deferred, though, we could get these crashes for just some random thing because the heap would now be corrupt.\n\n> > >  - wire up an alternative strategy for the error handler.\n> > \n> > ±1 We have two of those, AFAIK:\n> > - Use TLS and set a flag that will only be checked if errno!=ENOMEM. That\n> > probably won't hit performance too bad, especially because we will likely\n> crash\n> > the browser after that. But for large allocations, it will slow things down\n> even\n> > more :/.\n> \n> Large allocations imply large operations.  So something like setting the TLS\n> only for sizes over 1M we add negligible cost.  For smaller sizes, all of the\n> arguments about \"It just moves the OOM crash forward 50ms\" apply.\n> \n> Even with TLS, though then the condition looks like:\n> \n>   if (errno == ENOMEM || (errno == EBADF && IsSetTLS())\n>     return;\n> \n> because I doubt we'd want to allow other than EBADF through at that point.\n\nI think this is the most technically correct solution. So +1 to this.\n\n> > - Do a quick stackwalk to see if we're coming up through UncheckedMalloc. That\n> > may not be to bad, considering that'll only be like 3-5 frames away.\n> \n> We should do a STACKWALK using a REGEX.  That would be AWESOME.\n\n+∞ if you can do it with some extra dynamic memory allocations.","disapproval":false,"date":"2012-09-19 18:20:10.454710","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 18:20:10, rsesek wrote:\n> On 2012/09/19 18:09:12, shess wrote:\n> > On 2012/09/19 16:56:04, rsesek wrote:\n> > > On 2012/09/19 04:45:49, shess wrote:\n> > > > So, we could:\n> > > >  - allow syslog in the renderer.\n> > > \n> > > -1 I'd prefer to not poke a hole in the sandbox.\n> > \n> > I think I'm against this, too.  About the only thing I can think of along\n> those\n> > lines is to have the sandboxing code warm up asl_socket, and use nlist to test\n> > for -1 and reset it to /dev/null.  But that's super AWESOME.\n> \n> We actually just talked about doing something like this at lunch :-). But -1.\n\nI just thought of another solution: mach_override() _simple_asl_log() .  It works, so I posted the change.  AFAICT, the only downside is losing the logging to syslog, but stderr still shows up on Console.app (I cannot recall anyone ever suggesting to look in any syslog logs for Chrome info).  Performance-wise I expect this would actually provide a nominal speedup.","disapproval":false,"date":"2012-09-19 19:30:03.119510","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Oh no, no, I don’t think so, no, not at all.","disapproval":false,"date":"2012-09-19 19:31:45.016600","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"On 2012/09/19 19:31:45, Mark Mentovai wrote:\n> Oh no, no, I don’t think so, no, not at all.\n\ndammit!","disapproval":false,"date":"2012-09-19 19:35:42.887660","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"OK!  TLS version.\n\nArgument for not gating the TLS on size is that tcmalloc platforms have an explicit lock protecting the malloc() and surrounding set_new_handler() calls, so obviously someone decided that that was an appropriate amount of overhead.  But I can go there if desired.","disapproval":false,"date":"2012-09-19 20:04:34.482230","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm\nFile base/process_util_mac.mm (right):\n\nhttps://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm#newcode605\nbase/process_util_mac.mm:605: death_ptr += errno;\nOh, so now you trust errno to not be corrupt?","disapproval":false,"date":"2012-09-19 20:12:33.029720","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm\nFile base/process_util_mac.mm (right):\n\nhttps://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm#newcode605\nbase/process_util_mac.mm:605: death_ptr += errno;\nOn 2012/09/19 20:12:33, Mark Mentovai wrote:\n> Oh, so now you trust errno to not be corrupt?\n\nDone.  Though at some point we kind of have to assume that it's just corrupt all the way down...","disapproval":false,"date":"2012-09-19 20:27:50.909320","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"https://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm\nFile base/process_util_mac.mm (right):\n\nhttps://codereview.chromium.org/10908245/diff/26001/base/process_util_mac.mm#newcode605\nbase/process_util_mac.mm:605: death_ptr += errno;\nshess wrote:\n> On 2012/09/19 20:12:33, Mark Mentovai wrote:\n> > Oh, so now you trust errno to not be corrupt?\n> \n> Done.  Though at some point we kind of have to assume that it's just corrupt all\n> the way down...\n\nYeah, but we absolutely need to crash when we hit this code. If we return from this, we’re totally lame.","disapproval":false,"date":"2012-09-19 20:34:06.684770","approval":false},{"sender":"mark@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"I consider this satisfactory. You can treat that as an LGTM if you like, or you can consider the feedback from four or more other reviewers.","disapproval":false,"date":"2012-09-19 20:42:26.138540","approval":true},{"sender":"rsesek@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"LGTM++\n\nThis is awesome.","disapproval":false,"date":"2012-09-19 20:46:54.272100","approval":true},{"sender":"commit-bot@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/shess@chromium.org/10908245/16004","disapproval":false,"date":"2012-09-19 20:56:31.695610","approval":false},{"sender":"shess@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"What endorsements!  Moving forward.  Last patch was comment-only, I realized that I had removed the syslog/EBADF commentary, which is perhaps essential to future readers.","disapproval":false,"date":"2012-09-19 20:57:02.374270","approval":false},{"sender":"jeremy@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"No sandbox changes so LGTM too, thanks!","disapproval":false,"date":"2012-09-19 21:21:54.865630","approval":true},{"sender":"commit-bot@chromium.org","recipients":["shess@chromium.org","avi@chromium.org","rsesek@chromium.org","mark@chromium.org","jeremy@chromium.org","playmobil@google.com","chromium-reviews@chromium.org","erikwright+watch@chromium.org"],"text":"Change committed as 157646","disapproval":false,"date":"2012-09-19 23:13:43.877350","approval":false}],"owner_email":"shess@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"shess","subject":"unchecked_malloc() for Skia on OSX.","created":"2012-09-13 19:29:00.587860","patchsets":[1,9001,12001,14001,11002,17002,19006,17006,26001,21011,16004],"modified":"2012-09-19 23:13:43.990260","closed":true,"commit":false,"issue":10908245}