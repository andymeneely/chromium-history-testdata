{"description":"Add URLFetcher::SaveResponseToFileAtPath\n\nBUG=chromium-os:26971\nTEST=content_unittests --gtest_filter=\"URLFetcher*\"\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=125937","cc":["chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"reviewers":["willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org"],"messages":[{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"willchan: Could you review this CL as the primary reviewer?\n\nskerner: Could you review this CL as the original author of SaveResponseToTemporaryFile?","disapproval":false,"date":"2012-03-05 14:05:59.141356","approval":false},{"sender":"cbentzel@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Should this be using DownloadManager::DownloadURL (or ultimately ResourceDispatcherHost::BeginDownload) instead?","disapproval":false,"date":"2012-03-05 14:59:29.065245","approval":false},{"sender":"cbentzel@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Not the URLFetcher itself - but the ultimate users of SaveResponseToFile.\n\nOn Mon, Mar 5, 2012 at 9:59 AM, <cbentzel@chromium.org> wrote:\n\n> Should this be using DownloadManager::DownloadURL (or ultimately\n> ResourceDispatcherHost::**BeginDownload) instead?\n>\n>\n> http://codereview.chromium.**org/9585009/<http://codereview.chromium.org/9585009/>\n>\n","disapproval":false,"date":"2012-03-05 15:01:17.818052","approval":false},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"+kuan","disapproval":false,"date":"2012-03-05 16:21:01.532283","approval":false},{"sender":"zelidrag@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Chris, the \"customer\" for this change is our gdata library layer. The\napproach that you proposed is not going to work well since the context\nfor content download operation is very different here (part of File API\nimplementation for remote file systems). Also, the calls made through this\nlayer use OAuth2-based authentications schema that's scoped for this web\nservice - token driven, no cookie jar, has build in token refresh logic...\n\n\n\nOn Mon, Mar 5, 2012 at 7:01 AM, Chris Bentzel <cbentzel@chromium.org> wrote:\n\n> Not the URLFetcher itself - but the ultimate users of SaveResponseToFile.\n>\n>\n> On Mon, Mar 5, 2012 at 9:59 AM, <cbentzel@chromium.org> wrote:\n>\n>> Should this be using DownloadManager::DownloadURL (or ultimately\n>> ResourceDispatcherHost::**BeginDownload) instead?\n>>\n>>\n>> http://codereview.chromium.**org/9585009/<http://codereview.chromium.org/9585009/>\n>>\n>\n>\n","disapproval":false,"date":"2012-03-05 17:44:46.981976","approval":false},{"sender":"cbentzel@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Great - thanks for the response.\n\nOn Mon, Mar 5, 2012 at 12:44 PM, Zelidrag Hornung <zelidrag@chromium.org>wrote:\n\n> Chris, the \"customer\" for this change is our gdata library layer. The\n> approach that you proposed is not going to work well since the context\n> for content download operation is very different here (part of File API\n> implementation for remote file systems). Also, the calls made through this\n> layer use OAuth2-based authentications schema that's scoped for this web\n> service - token driven, no cookie jar, has build in token refresh logic...\n>\n>\n>\n> On Mon, Mar 5, 2012 at 7:01 AM, Chris Bentzel <cbentzel@chromium.org>wrote:\n>\n>> Not the URLFetcher itself - but the ultimate users of SaveResponseToFile.\n>>\n>>\n>> On Mon, Mar 5, 2012 at 9:59 AM, <cbentzel@chromium.org> wrote:\n>>\n>>> Should this be using DownloadManager::DownloadURL (or ultimately\n>>> ResourceDispatcherHost::**BeginDownload) instead?\n>>>\n>>>\n>>> http://codereview.chromium.**org/9585009/<http://codereview.chromium.org/9585009/>\n>>>\n>>\n>>\n>\n","disapproval":false,"date":"2012-03-05 18:02:00.377213","approval":false},{"sender":"skerner@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"cbentzel and willchan are more qualified than I am to decide if this should be part of URLFetcher.  I assumed that it belongs here in my review, but I want to hear from them about the right place for this functionality.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode625\ncontent/common/net/url_fetcher_impl.cc:625: if (!response_destination_file_path_.empty())\nLooks like the signal that you want a specific file (and not a temp file) is the emptiness of response_destination_file_path_ .  This if block is clear today, but I worry that as we make the code more complex, this will no longer be easy to understand.\n\nCould you make response_destination_'s type one of { STRING, TEMP_FILE, PERMANENT_FILE}?  This would make the differences between temp and permanent paths easy to see.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode1068\ncontent/common/net/url_fetcher_impl.cc:1068: void URLFetcherImpl::SaveResponseToFile(\nThe name of this method should distinguish it from saving to a temp path.  How about SaveResponseToFileAtPath(const FilePath& ...) ?\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode1072\ncontent/common/net/url_fetcher_impl.cc:1072: core_->response_destination_ = FILE;\nHere is another example where adding a new enum value would enhance clarity.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h\nFile content/public/common/url_fetcher.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h#newcode173\ncontent/public/common/url_fetcher.h:173: // |file_message_loop_proxy| will be used for all file operations.\nAdd something like: \n// To save to a temporary path, use SaveResponseToTemporaryFile().\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h#newcode240\ncontent/public/common/url_fetcher.h:240: virtual bool GetResponseAsFilePath(bool take_ownership,\nOne tricky aspect of fetching a file is deleting it in error cases.  The current logic is designed for the typical user of a temp file.  We should think about how it ought to work for writing to a path.\n\n\nFor temp files, the file is owned by the URLFetcher (and will be deleted on error) until the following method is called:\n\nGetResponseAsFilePath(..., true);\n\nAt that point, the URLFetcher does not own the file, and will not write to it or delete it.\n\nIf this method is not called, the temp file gets removed when the URLFetcher is destructed.\n\n\nThe simplest thing you could do is to use the same semantics for files downloaded to a path, but you need to point this out because it might be surprising that the file gets deleted when the URLFetcher is destroyed.  A comment above the prototype of SaveResponseToFile(), pointing out that  a user must take ownership to avoid the removal of the file.  A comment on the delegate base class  URLFetcherDelegate would also be a good thing.","disapproval":false,"date":"2012-03-06 00:23:05.846229","approval":false},{"sender":"kuan@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h\nFile content/common/net/url_fetcher_impl.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h#newcode60\ncontent/common/net/url_fetcher_impl.h:60: scoped_refptr<base::MessageLoopProxy> file_message_loop_proxy) OVERRIDE;\ncan u add stop_caching boolean as a parameter?\notherwise, we'll need to add one more method to the interface just to stop caching.","disapproval":false,"date":"2012-03-06 02:01:31.722952","approval":false},{"sender":"willchan@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode357\ncontent/common/net/url_fetcher_impl.cc:357: base::PLATFORM_FILE_CREATE_ALWAYS | base::PLATFORM_FILE_WRITE,\nJust doublechecking...is this what we want? We always create the file even if it already exists? Sounds potentially dangerous.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h\nFile content/common/net/url_fetcher_impl.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h#newcode60\ncontent/common/net/url_fetcher_impl.h:60: scoped_refptr<base::MessageLoopProxy> file_message_loop_proxy) OVERRIDE;\nOn 2012/03/06 02:01:33, kuan wrote:\n> can u add stop_caching boolean as a parameter?\n> otherwise, we'll need to add one more method to the interface just to stop\n> caching.\n\nWhat caching are you talking about? Browser caching? There's already a SetLoadFlags() interface, and there is a net::LoadFlag to control caching.","disapproval":false,"date":"2012-03-06 02:33:03.920218","approval":false},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode357\ncontent/common/net/url_fetcher_impl.cc:357: base::PLATFORM_FILE_CREATE_ALWAYS | base::PLATFORM_FILE_WRITE,\nOn 2012/03/06 02:33:04, willchan wrote:\n> Just doublechecking...is this what we want? We always create the file even if it\n> already exists? Sounds potentially dangerous.\n\nI think this is OK because zip::ZipReader is doing the same thing.\nBut if this is not an encouraged thing to do in code under content/, I would like to\n 1. Always make error when the file already exists, instead of always overwriting it, or\n 2. Add |file_flags| argument to SaveResponseToFile to allow user code to determine the behavior.\nWhat do you think?\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode625\ncontent/common/net/url_fetcher_impl.cc:625: if (!response_destination_file_path_.empty())\nOn 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> Looks like the signal that you want a specific file (and not a temp file) is the\n> emptiness of response_destination_file_path_ .  This if block is clear today,\n> but I worry that as we make the code more complex, this will no longer be easy\n> to understand.\n> \n> Could you make response_destination_'s type one of { STRING, TEMP_FILE,\n> PERMANENT_FILE}?  This would make the differences between temp and permanent\n> paths easy to see.\n\nSounds good, done.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode1068\ncontent/common/net/url_fetcher_impl.cc:1068: void URLFetcherImpl::SaveResponseToFile(\nOn 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> The name of this method should distinguish it from saving to a temp path.  How\n> about SaveResponseToFileAtPath(const FilePath& ...) ?\n\nSounds good, done.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode1072\ncontent/common/net/url_fetcher_impl.cc:1072: core_->response_destination_ = FILE;\nOn 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> Here is another example where adding a new enum value would enhance clarity.\n\nDone.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h\nFile content/public/common/url_fetcher.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h#newcode173\ncontent/public/common/url_fetcher.h:173: // |file_message_loop_proxy| will be used for all file operations.\nOn 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> Add something like: \n> // To save to a temporary path, use SaveResponseToTemporaryFile().\n\nDone.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h#newcode240\ncontent/public/common/url_fetcher.h:240: virtual bool GetResponseAsFilePath(bool take_ownership,\nOn 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> One tricky aspect of fetching a file is deleting it in error cases.  The current\n> logic is designed for the typical user of a temp file.  We should think about\n> how it ought to work for writing to a path.\n> \n> \n> For temp files, the file is owned by the URLFetcher (and will be deleted on\n> error) until the following method is called:\n> \n> GetResponseAsFilePath(..., true);\n> \n> At that point, the URLFetcher does not own the file, and will not write to it or\n> delete it.\n> \n> If this method is not called, the temp file gets removed when the URLFetcher is\n> destructed.\n> \n> \n> The simplest thing you could do is to use the same semantics for files\n> downloaded to a path, but you need to point this out because it might be\n> surprising that the file gets deleted when the URLFetcher is destroyed.  A\n> comment above the prototype of SaveResponseToFile(), pointing out that  a user\n> must take ownership to avoid the removal of the file.  A comment on the delegate\n> base class  URLFetcherDelegate would also be a good thing.\n\nGood point, added comments for SaveResponseToFileAtPath and SaveResponseToTemporaryFile.\n\nBTW, it looks like all of GetResponseAsFilePath's users are passing true as |take_ownership| now. (http://code.google.com/p/chromium/source/search?q=GetResponseAsFilePath)\nCan we remove this argument?\nI think it's good to remove this argument and switch to a simpler way where the file is removed only when a file error occurs.\nHow about doing this in a following patch?","disapproval":false,"date":"2012-03-06 10:16:01.798218","approval":false},{"sender":"kuan@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"On 2012/03/06 02:33:03, willchan wrote:\n> http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc\n> File content/common/net/url_fetcher_impl.cc (right):\n> \n> http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.cc#newcode357\n> content/common/net/url_fetcher_impl.cc:357: base::PLATFORM_FILE_CREATE_ALWAYS |\n> base::PLATFORM_FILE_WRITE,\n> Just doublechecking...is this what we want? We always create the file even if it\n> already exists? Sounds potentially dangerous.\n> \n> http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h\n> File content/common/net/url_fetcher_impl.h (right):\n> \n> http://codereview.chromium.org/9585009/diff/6009/content/common/net/url_fetcher_impl.h#newcode60\n> content/common/net/url_fetcher_impl.h:60: scoped_refptr<base::MessageLoopProxy>\n> file_message_loop_proxy) OVERRIDE;\n> On 2012/03/06 02:01:33, kuan wrote:\n> > can u add stop_caching boolean as a parameter?\n> > otherwise, we'll need to add one more method to the interface just to stop\n> > caching.\n> \n> What caching are you talking about? Browser caching? There's already a\n> SetLoadFlags() interface, and there is a net::LoadFlag to control caching.\n\nyes, i'm referring to browser caching.  will the flag be LOAD_DISABLE_CACHE?  pardon my ignorance - i was looking at download manager code which uses StopCaching, so i thought that's the only way to not have 2 copies of the same contents in cache and in specified file path.","disapproval":false,"date":"2012-03-06 14:55:19.687435","approval":false},{"sender":"skerner@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Two nits, otherwise it looks good.  Because this code has had some gnarly bugs, I want to give another reviewer a chance to chime in before approving.\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h\nFile content/public/common/url_fetcher.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/6009/content/public/common/url_fetcher.h#newcode240\ncontent/public/common/url_fetcher.h:240: virtual bool GetResponseAsFilePath(bool take_ownership,\nOn 2012/03/06 10:16:01, hashimoto wrote:\n> On 2012/03/06 00:23:06, Sam Kerner (Chrome) wrote:\n> > One tricky aspect of fetching a file is deleting it in error cases.  The\n> current\n> > logic is designed for the typical user of a temp file.  We should think about\n> > how it ought to work for writing to a path.\n> > \n> > \n> > For temp files, the file is owned by the URLFetcher (and will be deleted on\n> > error) until the following method is called:\n> > \n> > GetResponseAsFilePath(..., true);\n> > \n> > At that point, the URLFetcher does not own the file, and will not write to it\n> or\n> > delete it.\n> > \n> > If this method is not called, the temp file gets removed when the URLFetcher\n> is\n> > destructed.\n> > \n> > \n> > The simplest thing you could do is to use the same semantics for files\n> > downloaded to a path, but you need to point this out because it might be\n> > surprising that the file gets deleted when the URLFetcher is destroyed.  A\n> > comment above the prototype of SaveResponseToFile(), pointing out that  a user\n> > must take ownership to avoid the removal of the file.  A comment on the\n> delegate\n> > base class  URLFetcherDelegate would also be a good thing.\n> \n> Good point, added comments for SaveResponseToFileAtPath and\n> SaveResponseToTemporaryFile.\n> \n> BTW, it looks like all of GetResponseAsFilePath's users are passing true as\n> |take_ownership| now.\n> (http://code.google.com/p/chromium/source/search?q=GetResponseAsFilePath)\n> Can we remove this argument?\n> I think it's good to remove this argument and switch to a simpler way where the\n> file is removed only when a file error occurs.\n> How about doing this in a following patch?\n\nSounds good to me.  When I created his method, the extensions updater code needed to call it without taking ownership.  I see the code has been cleaned up and no longer does this.\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/common/net/url_fetcher_impl.cc#newcode401\ncontent/common/net/url_fetcher_impl.cc:401: const bool created = true;\nShould be kCreated.   http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Constant_Names\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/public/common/url_fetcher.h\nFile content/public/common/url_fetcher.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/public/common/url_fetcher.h#newcode176\ncontent/public/common/url_fetcher.h:176: // take the ownership.\nPlease say how you take ownership:  \"take ownership by calling GetResponseAsFilePath().\"","disapproval":false,"date":"2012-03-06 19:44:31.148628","approval":false},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"http://codereview.chromium.org/9585009/diff/15001/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/common/net/url_fetcher_impl.cc#newcode401\ncontent/common/net/url_fetcher_impl.cc:401: const bool created = true;\nOn 2012/03/06 19:44:31, Sam Kerner (Chrome) wrote:\n> Should be kCreated.  \n> http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Constant_Names\n\nDone.\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/public/common/url_fetcher.h\nFile content/public/common/url_fetcher.h (right):\n\nhttp://codereview.chromium.org/9585009/diff/15001/content/public/common/url_fetcher.h#newcode176\ncontent/public/common/url_fetcher.h:176: // take the ownership.\nOn 2012/03/06 19:44:31, Sam Kerner (Chrome) wrote:\n> Please say how you take ownership:  \"take ownership by calling\n> GetResponseAsFilePath().\"\n\nDone.","disapproval":false,"date":"2012-03-07 04:39:21.452275","approval":false},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"wtc,\ncould you review this change as a content/public owner?","disapproval":false,"date":"2012-03-07 08:45:12.375066","approval":false},{"sender":"satorux@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"wtc isn't in  content/public/OWNERS. let me add jam.","disapproval":false,"date":"2012-03-07 18:13:08.961156","approval":false},{"sender":"satorux@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","jam@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"adding jam for content/public changes.","disapproval":false,"date":"2012-03-07 18:13:44.528664","approval":false},{"sender":"jam@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"On 2012/03/07 18:13:44, satorux1 wrote:\n> adding jam for content/public changes.\n\nI'll defer to wtc or willchan on the content changes, since they're the URLFetcherImpl owners (see content/common/net/OWNERS). once they're fine you have my lgtm","disapproval":false,"date":"2012-03-07 20:13:34.989833","approval":true},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"On 2012/03/07 20:13:34, John Abd-El-Malek wrote:\n> On 2012/03/07 18:13:44, satorux1 wrote:\n> > adding jam for content/public changes.\n> \n> I'll defer to wtc or willchan on the content changes, since they're the\n> URLFetcherImpl owners (see content/common/net/OWNERS). once they're fine you\n> have my lgtm\n\nwillchan,\nCould you take a look for this change?","disapproval":false,"date":"2012-03-08 10:47:55.220936","approval":false},{"sender":"willchan@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","cbentzel@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Only have a few nits.\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc#newcode368\ncontent/common/net/url_fetcher_impl.cc:368: bool created) {\nIs this just ignored? It's sorta weird that DidCreateTempFile() is calling DidCreateFile() with kCreated = true, when created is just ignored.\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc#newcode1079\ncontent/common/net/url_fetcher_impl.cc:1079: core_->file_message_loop_proxy_ = file_message_loop_proxy;\nPlease DCHECK that this executes on the delegate message loop. Same with the SaveResponseToTemporaryFile(). It'd be great to DCHECK() that Start() hasn't been called yet too, but I don't see a good way to do that.\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc\nFile content/common/net/url_fetcher_impl_unittest.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc#newcode951\ncontent/common/net/url_fetcher_impl_unittest.cc:951: const char data[] = \"abcdefghijklmnopqrstuvwxyz\";\nkData and static?\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc#newcode952\ncontent/common/net/url_fetcher_impl_unittest.cc:952: const int data_size = sizeof(data);\narraysize","disapproval":false,"date":"2012-03-08 16:38:38.795562","approval":false},{"sender":"hashimoto@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"http://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc\nFile content/common/net/url_fetcher_impl.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc#newcode368\ncontent/common/net/url_fetcher_impl.cc:368: bool created) {\nOn 2012/03/08 16:38:39, willchan wrote:\n> Is this just ignored? It's sorta weird that DidCreateTempFile() is calling\n> DidCreateFile() with kCreated = true, when created is just ignored.\n\nAdded DidCreateFileInternal\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl.cc#newcode1079\ncontent/common/net/url_fetcher_impl.cc:1079: core_->file_message_loop_proxy_ = file_message_loop_proxy;\nOn 2012/03/08 16:38:39, willchan wrote:\n> Please DCHECK that this executes on the delegate message loop. Same with the\n> SaveResponseToTemporaryFile().\nDone.\n\n>  It'd be great to DCHECK() that Start() hasn't\n> been called yet too, but I don't see a good way to do that.\nCan we do this in another change?\nMaybe we should have a bool member in |core_| to remember if Start() was already called?\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc\nFile content/common/net/url_fetcher_impl_unittest.cc (right):\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc#newcode951\ncontent/common/net/url_fetcher_impl_unittest.cc:951: const char data[] = \"abcdefghijklmnopqrstuvwxyz\";\nOn 2012/03/08 16:38:39, willchan wrote:\n> kData and static?\n\nDone.\n\nhttp://codereview.chromium.org/9585009/diff/19005/content/common/net/url_fetcher_impl_unittest.cc#newcode952\ncontent/common/net/url_fetcher_impl_unittest.cc:952: const int data_size = sizeof(data);\nOn 2012/03/08 16:38:39, willchan wrote:\n> arraysize\n\nDone.","disapproval":false,"date":"2012-03-09 03:22:52.275761","approval":false},{"sender":"satorux@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Will, could you take another look? This patch is blocking some gdata related tasks.\n\nIf needed, I can address remaining issues on behalf of hashimoto so we can check this in today.","disapproval":false,"date":"2012-03-09 18:29:21.031948","approval":false},{"sender":"willchan@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Apologies, will take a look now. Was out all yesterday in meetings.\n\nOn Fri, Mar 9, 2012 at 10:29 AM, <satorux@chromium.org> wrote:\n\n> Will, could you take another look? This patch is blocking some gdata\n> related\n> tasks.\n>\n> If needed, I can address remaining issues on behalf of hashimoto so we can\n> check\n> this in today.\n>\n> http://codereview.chromium.**org/9585009/<http://codereview.chromium.org/9585009/>\n>\n","disapproval":false,"date":"2012-03-09 18:30:28.907702","approval":false},{"sender":"willchan@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"lgtm","disapproval":false,"date":"2012-03-09 18:31:21.973342","approval":true},{"sender":"commit-bot@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/hashimoto@chromium.org/9585009/31001","disapproval":false,"date":"2012-03-09 18:44:07.196909","approval":false},{"sender":"commit-bot@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Try job failure for 9585009-31001 (retry) on android for steps \"Compile, build\".\nIt's a second try, previously, steps \"Compile, build\" failed.\nhttp://build.chromium.org/p/tryserver.chromium/buildstatus?builder=android&number=2576","disapproval":false,"date":"2012-03-09 19:33:03.155518","approval":false},{"sender":"commit-bot@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/hashimoto@chromium.org/9585009/31001","disapproval":false,"date":"2012-03-09 20:31:19.203706","approval":false},{"sender":"commit-bot@chromium.org","recipients":["hashimoto@chromium.org","willchan@chromium.org","skerner@chromium.org","kuan@chromium.org","wtc@chromium.org","jam@chromium.org","satorux@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","cbentzel+watch@chromium.org","zelidrag@chromium.org","kinaba@chromium.org"],"text":"Change committed as 125937","disapproval":false,"date":"2012-03-09 23:25:45.781294","approval":false}],"owner_email":"hashimoto@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"hashimoto","subject":"Add URLFetcher::SaveResponseToFileAtPath","created":"2012-03-02 12:09:57.381555","patchsets":[7002,6009,15001,19005,31001],"modified":"2012-03-09 23:25:46.059057","closed":true,"commit":false,"issue":9585009}