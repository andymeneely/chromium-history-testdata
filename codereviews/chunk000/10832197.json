{"description":"Add a lot of Pipeline tests to cover stopping/error handling while in a variety of states.\n\nWhile the use of gmock's InSequence is unfortunate (read: brittle tests), it does help capture the call sequences for various pipeline operations. You may notice in the original incarnation of these tests in http://codereview.chromium.org/10828045/ didn't need InSequence. I'm aiming to remove InSequence after I'm done rewriting the guts of Pipeline.\n\nBUG=110228\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=150816","cc":["chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"reviewers":["fischman@chromium.org"],"messages":[{"sender":"scherkus@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"As mentioned in http://codereview.chromium.org/10826196/\n\nThese are originally from http://codereview.chromium.org/10828045/ -- I expect the gmock expectations to change as I start collapsing states and eliminating unnecessary sequences (i.e., pause+flush on shutdown, waiting for seeks to complete before shutdown)","disapproval":false,"date":"2012-08-08 03:47:00.489210","approval":false},{"sender":"fischman@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"Basically LGTM but it'd be nice to de-dup the tests as much as possible.  ATM there's a lot of boilerplate which makes it harder than necessary to see what's being tested.\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode22\nmedia/base/pipeline_unittest.cc:22: using ::testing::InSequence;\nTODO(scherkus): drop InSequence from this file.\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode52\nmedia/base/pipeline_unittest.cc:52: ACTION(RunPipelineStatusCB1) {\nFWIW, this is a dup of RunPipelineStatusCB in mock_filters.h.\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode296\nmedia/base/pipeline_unittest.cc:296: void SetupShutdownTest() {\nI can't tell from this impl, nor from the name, what this function has to do with shutdown.\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode503\nmedia/base/pipeline_unittest.cc:503: TEST_F(PipelineTest, Stop_DuringPause) {\nStop_During{Pause,Flush,Seek} look like they can be seriously de-duped.\n\nhttps://chromiumcodereview.appspot.com/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode605\nmedia/base/pipeline_unittest.cc:605: // TODO(scherkus): Don't pause+flush on shutdown, see http://crbug.com/110228\nCan you pull out this stanza into a helper ExpectPauseFlushStopDance()?","disapproval":false,"date":"2012-08-08 17:21:08.857690","approval":true},{"sender":"scherkus@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"PTAL -- this time w/ helpers\n\nfeel free to nit on naming and such\n\nhttp://codereview.chromium.org/10832197/diff/3001/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode52\nmedia/base/pipeline_unittest.cc:52: ACTION(RunPipelineStatusCB1) {\nOn 2012/08/08 17:21:08, Ami Fischman wrote:\n> FWIW, this is a dup of RunPipelineStatusCB in mock_filters.h.\n\nyou're living in the past, man!!! see http://crrev.com/147619\n\nhttp://codereview.chromium.org/10832197/diff/3001/media/base/pipeline_unittest.cc#newcode296\nmedia/base/pipeline_unittest.cc:296: void SetupShutdownTest() {\nOn 2012/08/08 17:21:08, Ami Fischman wrote:\n> I can't tell from this impl, nor from the name, what this function has to do\n> with shutdown.\n\nDone.","disapproval":false,"date":"2012-08-08 22:14:29.650290","approval":false},{"sender":"fischman@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"http://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode53\nmedia/base/pipeline_unittest.cc:53: ACTION(RunPipelineStatusCB1) {\ns/1//\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode313\nmedia/base/pipeline_unittest.cc:313: enum StopOnSeekState {\nI read your TODO above, but AFAICT these are only used to signal when you want the Stop to be triggered.  So in fact they can be unified into\nenum SeekDancePhase { kPause, kFlush, kSeek };\nand then the methods below turn into\nvoid TestStopOrErrorDuringSeekDance(SeekDancePhase, StopOrError);\nwith an\nenum StopOrError { kStop, kError };\n\nOnce you do that, then it's unclear to me why not just fully parameterize the tests; this test helper then just takes the state of the pipeline (playing/not) and the phase in which to trigger stop, and goes to town.\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode319\nmedia/base/pipeline_unittest.cc:319: enum ErrorOnSeekState {\nDitto.\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode346\nmedia/base/pipeline_unittest.cc:346: RunPipelineStatusCB1WithStatus(PIPELINE_OK)));\nIsn't this just RunPipelineStatusCB1()?","disapproval":false,"date":"2012-08-08 23:43:55.814560","approval":false},{"sender":"scherkus@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"isn't reviewing all this code fun!??!?!? :)\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode53\nmedia/base/pipeline_unittest.cc:53: ACTION(RunPipelineStatusCB1) {\nOn 2012/08/08 23:43:55, Ami Fischman wrote:\n> s/1//\n\nI swore we had other versions around but I guess I deleted them all\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode313\nmedia/base/pipeline_unittest.cc:313: enum StopOnSeekState {\nOn 2012/08/08 23:43:55, Ami Fischman wrote:\n> I read your TODO above, but AFAICT these are only used to signal when you want\n> the Stop to be triggered.  So in fact they can be unified into\n> enum SeekDancePhase { kPause, kFlush, kSeek };\n> and then the methods below turn into\n> void TestStopOrErrorDuringSeekDance(SeekDancePhase, StopOrError);\n> with an\n> enum StopOrError { kStop, kError };\n> \n> Once you do that, then it's unclear to me why not just fully parameterize the\n> tests; this test helper then just takes the state of the pipeline (playing/not)\n> and the phase in which to trigger stop, and goes to town.\n\nTook a stab but I strongly dislike how gtest parameterized tests look on the console so I manually instantiated them myself\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode346\nmedia/base/pipeline_unittest.cc:346: RunPipelineStatusCB1WithStatus(PIPELINE_OK)));\nOn 2012/08/08 23:43:55, Ami Fischman wrote:\n> Isn't this just RunPipelineStatusCB1()?\n\nDone.","disapproval":false,"date":"2012-08-09 01:18:19.191760","approval":false},{"sender":"fischman@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"LGTM\nI <3 this test.\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/6001/media/base/pipeline_unittest.cc#newcode313\nmedia/base/pipeline_unittest.cc:313: enum StopOnSeekState {\nOn 2012/08/09 01:18:19, scherkus wrote:\n> On 2012/08/08 23:43:55, Ami Fischman wrote:\n> > I read your TODO above, but AFAICT these are only used to signal when you want\n> > the Stop to be triggered.  So in fact they can be unified into\n> > enum SeekDancePhase { kPause, kFlush, kSeek };\n> > and then the methods below turn into\n> > void TestStopOrErrorDuringSeekDance(SeekDancePhase, StopOrError);\n> > with an\n> > enum StopOrError { kStop, kError };\n> > \n> > Once you do that, then it's unclear to me why not just fully parameterize the\n> > tests; this test helper then just takes the state of the pipeline\n> (playing/not)\n> > and the phase in which to trigger stop, and goes to town.\n> \n> Took a stab but I strongly dislike how gtest parameterized tests look on the\n> console so I manually instantiated them myself\n\nYeah, I didn't mean TEST_P necessarily.\n\nhttp://codereview.chromium.org/10832197/diff/1006/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/1006/media/base/pipeline_unittest.cc#newcode1027\nmedia/base/pipeline_unittest.cc:1027: // TODO(scherkus): Why separate stop/error enums and helper functions? We do\nrewrite comment.","disapproval":false,"date":"2012-08-09 04:41:43.536630","approval":true},{"sender":"scherkus@chromium.org","recipients":["scherkus@chromium.org","fischman@chromium.org","chromium-reviews@chromium.org","feature-media-reviews@chromium.org"],"text":"http://codereview.chromium.org/10832197/diff/1006/media/base/pipeline_unittest.cc\nFile media/base/pipeline_unittest.cc (right):\n\nhttp://codereview.chromium.org/10832197/diff/1006/media/base/pipeline_unittest.cc#newcode1027\nmedia/base/pipeline_unittest.cc:1027: // TODO(scherkus): Why separate stop/error enums and helper functions? We do\nOn 2012/08/09 04:41:43, Ami Fischman wrote:\n> rewrite comment.\n\nDone.","disapproval":false,"date":"2012-08-09 16:52:39.460430","approval":false}],"owner_email":"scherkus@chromium.org","private":false,"base_url":"svn://chrome-svn/chrome/trunk/src","owner":"scherkus","subject":"Add a lot of Pipeline tests to cover stopping/error handling while in a variety of states.","created":"2012-08-08 03:41:34.309430","patchsets":[1,1005,3001,6001,5003,11001,5004,1006,12],"modified":"2012-08-09 16:53:02.566450","closed":true,"commit":false,"issue":10832197}