{"description":"Redo r113722 - Add Pass(), which implements move semantics, to scoped_ptr, scoped_array....\n\nAdd Pass(), which implements move semantics, to scoped_ptr, scoped_array, and scoped_ptr_malloc.\n\nThis modification to the scopers implements the \"moveable but not copyable\" semantics that were introduced in C++11's unique_ptr<>.\n\nWith this, is now possible to use scopers as an argument type or a return type.  This signifies, in the type system, transfer of ownership into a function or out of a function respectively.  Calling, or returning such a function MUST use the temporary resultin\n\nThis distinction makes it possible to avoid the implicit ownership transfer issues of auto_ptr, but still allow us to have compiler enforced ownership transfer.\n\nAlso adds a Passed() helper that allows using a scoper with Bind().\n\nBUG=96118\nTEST=new unittests\n\nOriginal review URL: http://codereview.chromium.org/8774032\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=113922","cc":["chromium-reviews@chromium.org","phajdan.jr@chromium.org","brettw-cc@chromium.org"],"reviewers":["aa@chromium.org","willchan@chromium.org"],"messages":[{"sender":"ajwong@chromium.org","recipients":["ajwong@chromium.org","aa@chromium.org","willchan@chromium.org","chromium-reviews@chromium.org","phajdan.jr@chromium.org","brettw-cc@chromium.org"],"text":"Aaron, the fancy C++ trip in scoped_ptr broke the Manifest object in extension_manifest_unittest.cc.\n\nThere's a simple workaround.  Can you take a look at just that file?","disapproval":false,"date":"2011-12-10 00:43:18.000450","approval":false},{"sender":"willchan@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Lgtm\n\nSent from my iNexus.\nOn Dec 9, 2011 4:43 PM, <ajwong@chromium.org> wrote:\n\n> Reviewers: Aaron Boodman, willchan,\n>\n> Message:\n> Aaron, the fancy C++ trip in scoped_ptr broke the Manifest object in\n> extension_manifest_unittest.**cc.\n>\n> There's a simple workaround.  Can you take a look at just that file?\n>\n> Description:\n> Redo r113722 - Add Pass(), which implements move semantics, to scoped_ptr,\n> scoped_array....\n>\n> Add Pass(), which implements move semantics, to scoped_ptr, scoped_array,\n> and\n> scoped_ptr_malloc.\n>\n> This modification to the scopers implements the \"moveable but not copyable\"\n> semantics that were introduced in C++11's unique_ptr<>.\n>\n> With this, is now possible to use scopers as an argument type or a return\n> type.\n> This signifies, in the type system, transfer of ownership into a function\n> or out\n> of a function respectively.  Calling, or returning such a function MUST\n> use the\n> temporary resultin\n>\n> This distinction makes it possible to avoid the implicit ownership transfer\n> issues of auto_ptr, but still allow us to have compiler enforced ownership\n> transfer.\n>\n> Also adds a Passed() helper that allows using a scoper with Bind().\n>\n> BUG=96118\n> TEST=new unittests\n>\n> Original review URL: http://codereview.chromium.**org/8774032<http://codereview.chromium.org/8774032>\n>\n>\n> Please review this at http://codereview.chromium.**org/8897005/<http://codereview.chromium.org/8897005/>\n>\n> SVN Base: svn://svn.chromium.org/chrome/**trunk/src<http://svn.chromium.org/chrome/trunk/src>\n>\n> Affected files:\n>  M base/bind_helpers.h\n>  M base/bind_internal.h\n>  M base/bind_internal.h.pump\n>  M base/bind_unittest.cc\n>  M base/callback.h\n>  M base/callback.h.pump\n>  M base/callback_internal.h\n>  M base/memory/scoped_ptr.h\n>  M base/memory/scoped_ptr_**unittest.cc\n>  M chrome/common/extensions/**extension_manifests_unittest.**cc\n>\n>\n>\n","disapproval":false,"date":"2011-12-10 00:55:14.432040","approval":true},{"sender":"aa@chromium.org","recipients":["ajwong@chromium.org","aa@chromium.org","willchan@chromium.org","chromium-reviews@chromium.org","phajdan.jr@chromium.org","brettw-cc@chromium.org"],"text":"LGTM\n\nCan you recommend another way to write extension_manifests_unittest.cc so that this hack would not be required?\n\nWhat if we pass a ptr instead of const ref.","disapproval":false,"date":"2011-12-10 01:48:44.375117","approval":true},{"sender":"ajwong@chromium.org","recipients":["ajwong@chromium.org","aa@chromium.org","willchan@chromium.org","chromium-reviews@chromium.org","phajdan.jr@chromium.org","brettw-cc@chromium.org"],"text":"On 2011/12/10 01:48:44, Aaron Boodman wrote:\n> LGTM\n\nThanks!\n\n> Can you recommend another way to write extension_manifests_unittest.cc so that\n> this hack would not be required?\n> \n> What if we pass a ptr instead of const ref.\n\nThere aren't a lot of great solutions if you want to preserve the syntax of LoadAndExpect(Manifest(x)).  You can't use a ptr or a non-const ref because neither of those can be used with a temporary.\n\nYou could push the overload downwards into  LoadExtension(), LoadAndExpect*() and then make it LoadAndExpect(x).\n\nThat might be the best solution.","disapproval":false,"date":"2011-12-10 01:53:46.004518","approval":false}],"owner_email":"ajwong@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"awong","subject":"Redo r113722 - Add Pass(), which implements move semantics, to scoped_ptr, scoped_array....","created":"2011-12-09 18:50:04.387456","patchsets":[1,2001],"modified":"2011-12-10 01:56:12.681914","closed":true,"commit":false,"issue":8897005}