{"description":"Convert trivial URLRequest::Interceptors and URLRequestJobFactory::Interceptor into URLRequestJobFactory::ProtocolHandlers.\r\n\r\nBUG=161524\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=174174","cc":["chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org","mkosiba@chromium.org","boliu@chromium.org"],"reviewers":["erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org"],"messages":[{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Erik, before I go and start converting all the simple Interceptors, can you take a high-level look at this first conversion?","disapproval":false,"date":"2012-11-13 17:21:50.328600","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I just realized this isn't thread safe.  URLRequestJobManager::RegisterRequestInterceptor() (and in my code URLRequestFilter::AddHostnameProtocolHandler() ) has locking as its called from the UI thread.  I'll need to address this.","disapproval":false,"date":"2012-11-13 17:27:07.882930","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I think I addressed the threading issues.\nVery sadly the original code was not thread safe...URLRequestJobManager::IsAllowedThread() is disabled and has been since 2008 (http://b/issue?id=1338969) and there is only locking on half of the uses of URLRequestJobManager::interceptors_.","disapproval":false,"date":"2012-11-13 19:12:18.442180","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"To accommodate rewriting other Interceptors I'm starting to think URLRequestFilter should just have a list of ProtocolHandlers rather than mapping them only for certain URLs or hosts.","disapproval":false,"date":"2012-11-13 22:11:58.336550","approval":false},{"sender":"erikwright@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"On 2012/11/13 22:11:58, pauljensen wrote:\n> To accommodate rewriting other Interceptors I'm starting to think\n> URLRequestFilter should just have a list of ProtocolHandlers rather than mapping\n> them only for certain URLs or hosts.\n\nThat seems fine to me. And they would just create a job or not, depending on whether the url matches.\n\nPresumably we would provide some utility classes to make it easy to intercept specific URLs.\n\nAlso presumably, we can support the current API by creating the URL-specific ProtocolHandler when we receive a legacy factory function.\n\nIt's also important that we provide a way to turn on the URLRequestFilter without going through the static registration methods on URLRequestJobManager. (i.e., putting a placeholder JobFactory on all contexts that is a no-op unless some interceptors are registered on URLRequestFilter).","disapproval":false,"date":"2012-11-14 19:33:23.529710","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"erik, PTAL.","disapproval":false,"date":"2012-11-20 17:17:36.251900","approval":false},{"sender":"erikwright@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Sorry, Paul, was swamped today and yesterday.\n\nWill get to this before you are back on Monday. Happy Thanksgiving!","disapproval":false,"date":"2012-11-21 22:03:36.363000","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"On 2012/11/21 22:03:36, erikwright wrote:\n> Sorry, Paul, was swamped today and yesterday.\n> \n> Will get to this before you are back on Monday. Happy Thanksgiving!\n\nI'm back :)\n\nTwo thoughts that popped into my head after some turkey:\n1. ProtocolInterceptJobFactory::IsHandledProtocol and ProtocolInterceptJobFactory::IsHandledURL should probably just call the job_factory_ equivalents rather than trying to handle scheme_.  This better matches how the replaced Interceptors worked.\n2. URLRequestFilter should probably own the ProtocolHandlers it manages, and should delete them when they are unregistered.  This might avoid the ASAN failure (which I'll look into more today).","disapproval":false,"date":"2012-11-26 13:56:38.413990","approval":false},{"sender":"erikwright@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"First comments. I haven't looked at all the individual conversions yet.\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/protocol_intercept_job_factory.cc\nFile net/url_request/protocol_intercept_job_factory.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/protocol_intercept_job_factory.cc#newcode16\nnet/url_request/protocol_intercept_job_factory.cc:16: const char* kHttpScheme = \"http\";\nThese are no longer used here, right?\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/protocol_intercept_job_factory.cc#newcode32\nnet/url_request/protocol_intercept_job_factory.cc:32: return job_factory_->SetProtocolHandler(scheme, protocol_handler);\nI'm not thrilled about this, although I understand why.\n\nSee this other CL where these methods are removed:\n\nhttps://codereview.chromium.org/11227017/\n\nI've added you to the thread where we discuss the other change that is blocking that CL.\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_filter.h\nFile net/url_request/url_request_filter.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_filter.h#newcode39\nnet/url_request/url_request_filter.h:39: base::Callback<URLRequest::ProtocolFactory> > HostnameHandlerMap;\ninclude callback.h\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nI assume this wrapped factory exists because someone later adds protocol handlers?\n\nAnd that this would be a blocker for removing the mutation methods?\n\nWhere are they added and can we avoid that? (i.e., by getting a populated jobfactory before creating the interceptjobfactory?)","disapproval":false,"date":"2012-11-27 05:54:05.593190","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Erik, PTAL.\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/protocol_intercept_job_factory.cc\nFile net/url_request/protocol_intercept_job_factory.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/protocol_intercept_job_factory.cc#newcode16\nnet/url_request/protocol_intercept_job_factory.cc:16: const char* kHttpScheme = \"http\";\nOn 2012/11/27 05:54:05, erikwright wrote:\n> These are no longer used here, right?\n\nDone.\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_filter.h\nFile net/url_request/url_request_filter.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_filter.h#newcode39\nnet/url_request/url_request_filter.h:39: base::Callback<URLRequest::ProtocolFactory> > HostnameHandlerMap;\nOn 2012/11/27 05:54:05, erikwright wrote:\n> include callback.h\n\nDone.\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/15072/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nOn 2012/11/27 05:54:05, erikwright wrote:\n> I assume this wrapped factory exists because someone later adds protocol\n> handlers?\n> \n> And that this would be a blocker for removing the mutation methods?\n> \n> Where are they added and can we avoid that? (i.e., by getting a populated\n> jobfactory before creating the interceptjobfactory?)\n\nNobody adds protocol handlers later and job_factory_ is a URLRequestJobFactory (i.e. not a URLRequestJobFactoryImpl) so this shouldn't hold up http://crrev.com/11227017","disapproval":false,"date":"2012-11-30 21:02:34.017290","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Erik, ping.","disapproval":false,"date":"2012-12-06 14:18:07.888070","approval":false},{"sender":"erikwright@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"All looking pretty good. Still confused about one bit.\n\nWe can chat by IM or VC a bit later if necessary.\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/component_updater/component_updater_interceptor.cc\nFile chrome/browser/component_updater/component_updater_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/component_updater/component_updater_interceptor.cc#newcode19\nchrome/browser/component_updater/component_updater_interceptor.cc:19: Delegate() : hit_count_(0) {}\nIt might be appropriate to DCHECK that there is only ever one registered instance of Delegate at a time.\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/extensions/autoupdate_interceptor.cc\nFile chrome/browser/extensions/autoupdate_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/extensions/autoupdate_interceptor.cc#newcode12\nchrome/browser/extensions/autoupdate_interceptor.cc:12: #include \"net/url_request/url_request_filter.h\"\nIt might be worth it to take this opportunity to de-duplicate this class and the component_updater one.\n\nI have a feeling you'll be back here later, so by de-duplicating now you might save some work.\n\nhttps://codereview.chromium.org/11293252/diff/22109/content/test/net/url_request_abort_on_end_job.cc\nFile content/test/net/url_request_abort_on_end_job.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/content/test/net/url_request_abort_on_end_job.cc#newcode35\ncontent/test/net/url_request_abort_on_end_job.cc:35: void URLRequestAbortOnEndJob::AddUrlHandlerOnIOThread() {\nThis could be a free function in anonymous namespace to avoid polluting the class declaration.\n\nUnless it also makes sense to make Factory a private function, in which case this would need to stay a member.\n\nUltimately, I would make this and Factory free functions in anon namespace and make the constructor public, assuming that with this change there are no remaining direct uses of the Factory.\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nIs there a reason why this should be a ProtocolInterceptJobFactory wrapping an empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n\nCouldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler then?\n\nOr couldn't we do one of:\n\n1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped factory, or\n2) create a new URLRequestJobFactory implementation that only holds a single ProtocolHandler and NOTREACHED()'s all mutators?","disapproval":false,"date":"2012-12-06 15:26:28.047410","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Erik, PTAL.\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/component_updater/component_updater_interceptor.cc\nFile chrome/browser/component_updater/component_updater_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/component_updater/component_updater_interceptor.cc#newcode19\nchrome/browser/component_updater/component_updater_interceptor.cc:19: Delegate() : hit_count_(0) {}\nOn 2012/12/06 15:26:28, erikwright wrote:\n> It might be appropriate to DCHECK that there is only ever one registered\n> instance of Delegate at a time.\nDone.  I did this by having URLRequestFilter DCHECK if multiple handlers are added for a single URL/hostname.\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/extensions/autoupdate_interceptor.cc\nFile chrome/browser/extensions/autoupdate_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/chrome/browser/extensions/autoupdate_interceptor.cc#newcode12\nchrome/browser/extensions/autoupdate_interceptor.cc:12: #include \"net/url_request/url_request_filter.h\"\nOn 2012/12/06 15:26:28, erikwright wrote:\n> It might be worth it to take this opportunity to de-duplicate this class and the\n> component_updater one.\n> \n> I have a feeling you'll be back here later, so by de-duplicating now you might\n> save some work.\n\nDone.\n\nhttps://codereview.chromium.org/11293252/diff/22109/content/test/net/url_request_abort_on_end_job.cc\nFile content/test/net/url_request_abort_on_end_job.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/content/test/net/url_request_abort_on_end_job.cc#newcode35\ncontent/test/net/url_request_abort_on_end_job.cc:35: void URLRequestAbortOnEndJob::AddUrlHandlerOnIOThread() {\nOn 2012/12/06 15:26:28, erikwright wrote:\n> This could be a free function in anonymous namespace to avoid polluting the\n> class declaration.\n> \n> Unless it also makes sense to make Factory a private function, in which case\n> this would need to stay a member.\n> \n> Ultimately, I would make this and Factory free functions in anon namespace and\n> make the constructor public, assuming that with this change there are no\n> remaining direct uses of the Factory.\n\nDone.\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nOn 2012/12/06 15:26:28, erikwright wrote:\n> Is there a reason why this should be a ProtocolInterceptJobFactory wrapping an\n> empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> \n> Couldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler\n> then?\nTestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP requests or non-HTTP requests will be handled by the default static URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to maintain this exact behavior.  After looking at users of TestJobInterceptor, it looks like the tests don't actually need to rely on the default static URLRequest::ProtocolFactory's, so I guess the answer is I could just call URLRequestJobFactoryImpl::SetProtocolHandler().\n> \n> Or couldn't we do one of:\n> \n> 1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped\n> factory, or\n> 2) create a new URLRequestJobFactory implementation that only holds a single\n> ProtocolHandler and NOTREACHED()'s all mutators?\nWhy the concern about mutators?  I thought these were going away imminently.","disapproval":false,"date":"2012-12-07 18:47:42.417200","approval":false},{"sender":"erikwright@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"LG.\n\nClearly you will be needing some other reviewers. willchan will care about the high-level though I suspect he will leave the details to Matt. I'd suggest going through them before bothering Android, Content, etc. OWNERS.\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nOn 2012/12/07 18:47:42, pauljensen wrote:\n> On 2012/12/06 15:26:28, erikwright wrote:\n> > Is there a reason why this should be a ProtocolInterceptJobFactory wrapping an\n> > empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> > \n> > Couldn't it just be an URLRequestJobFactoryImpl with a single ProtocolHandler\n> > then?\n> TestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP\n> requests or non-HTTP requests will be handled by the default static\n> URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to maintain\n> this exact behavior.  After looking at users of TestJobInterceptor, it looks\n> like the tests don't actually need to rely on the default static\n> URLRequest::ProtocolFactory's, so I guess the answer is I could just call\n> URLRequestJobFactoryImpl::SetProtocolHandler().\n\nOK, I see.\n\n> > Or couldn't we do one of:\n> > \n> > 1) make the mutators in ProtocolInterceptJobFactory not forward to the wrapped\n> > factory, or\n> > 2) create a new URLRequestJobFactory implementation that only holds a single\n> > ProtocolHandler and NOTREACHED()'s all mutators?\n> Why the concern about mutators?  I thought these were going away imminently.\n\nIt's just that I noticed that you had converted the mutators in the ProtocolInterceptJobFactory from NOTREACHED to forwarding, which leads me to wonder who's relying on them (as they will presumably present a problem when we do attempt to remove them).\n\nIf it doesn't break anyone, I'd leave the NOTREACHED, but ultimately I'm also OK to worry about that separately.\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/content_tests.gypi\nFile content/content_tests.gypi (right):\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/content_tests.gypi#newcode119\ncontent/content_tests.gypi:119: 'test/net/url_request_prepackaged_interceptor.cc',\nI wonder if this belongs in content/ or in chrome/test/base since it's only used by chrome/ tests. But I'm happy to not move it for now and ask the opinion of other reviewers.\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h\nFile content/test/net/url_request_prepackaged_interceptor.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h#newcode16\ncontent/test/net/url_request_prepackaged_interceptor.h:16: // This url request interceptor lets us respond to localhost http request urls\nurl -> URL, http -> HTTP, urls -> URLs\n\nThe preferred form would be something like:\n\n\"Intercepts HTTP requests and gives pre-defined responses to specified URLs.\"\n\nMention somewhere that the configured responses are active for the lifetime of this class.\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h#newcode28\ncontent/test/net/url_request_prepackaged_interceptor.h:28: void SetQuerylessResponse(const std::string& url,\nAdd comment. Consider Renaming to SetResponseIgnoreQuery\n\nhttps://codereview.chromium.org/11293252/diff/44001/net/url_request/protocol_intercept_job_factory.h\nFile net/url_request/protocol_intercept_job_factory.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/44001/net/url_request/protocol_intercept_job_factory.h#newcode55\nnet/url_request/protocol_intercept_job_factory.h:55: const char* scheme_;\nI'm not sure what the convention for this kind of thing is, but it seems risky to accept and store a const char*. If someone calls you like this, it's trouble:\n\nstd::string scheme = ...;\n... new ProtocolInterceptJobFactory(..., scheme.c_str(), ...);\n\nProbably best to store a std::string, and possibly to accept one (or accept a StringPiece, which can be implicitly constructed from a string or a const char*).","disapproval":false,"date":"2012-12-07 20:12:05.438120","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I addressed Erik's comments.  Matt and Will, PTAL.  Will, if you just want to do a high-level review that's fine.\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc\nFile net/url_request/url_request_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/22109/net/url_request/url_request_unittest.cc#newcode473\nnet/url_request/url_request_unittest.cc:473: job_factory_.reset(new URLRequestJobFactoryImpl);\nOn 2012/12/07 20:12:05, erikwright wrote:\n> On 2012/12/07 18:47:42, pauljensen wrote:\n> > On 2012/12/06 15:26:28, erikwright wrote:\n> > > Is there a reason why this should be a ProtocolInterceptJobFactory wrapping\n> an\n> > > empty URLRequestJobFactoryImpl if no-one ever accesses the mutators?\n> > > \n> > > Couldn't it just be an URLRequestJobFactoryImpl with a single\n> ProtocolHandler\n> > > then?\n> > TestJobInterceptor only intercepts the first HTTP request, any subsequent HTTP\n> > requests or non-HTTP requests will be handled by the default static\n> > URLRequest::ProtocolFactory's in URLRequestJobManager.  I was trying to\n> maintain\n> > this exact behavior.  After looking at users of TestJobInterceptor, it looks\n> > like the tests don't actually need to rely on the default static\n> > URLRequest::ProtocolFactory's, so I guess the answer is I could just call\n> > URLRequestJobFactoryImpl::SetProtocolHandler().\n> \n> OK, I see.\n> \n> > > Or couldn't we do one of:\n> > > \n> > > 1) make the mutators in ProtocolInterceptJobFactory not forward to the\n> wrapped\n> > > factory, or\n> > > 2) create a new URLRequestJobFactory implementation that only holds a single\n> > > ProtocolHandler and NOTREACHED()'s all mutators?\n> > Why the concern about mutators?  I thought these were going away imminently.\n> \n> It's just that I noticed that you had converted the mutators in the\n> ProtocolInterceptJobFactory from NOTREACHED to forwarding, which leads me to\n> wonder who's relying on them (as they will presumably present a problem when we\n> do attempt to remove them).\n> \n> If it doesn't break anyone, I'd leave the NOTREACHED, but ultimately I'm also OK\n> to worry about that separately.\nFor now they must pass things like SetProtocolHandler() onto |job_factory_| until crrev.com/11308362 lands.\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h\nFile content/test/net/url_request_prepackaged_interceptor.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h#newcode16\ncontent/test/net/url_request_prepackaged_interceptor.h:16: // This url request interceptor lets us respond to localhost http request urls\nOn 2012/12/07 20:12:05, erikwright wrote:\n> url -> URL, http -> HTTP, urls -> URLs\n> \n> The preferred form would be something like:\n> \n> \"Intercepts HTTP requests and gives pre-defined responses to specified URLs.\"\n> \n> Mention somewhere that the configured responses are active for the lifetime of\n> this class.\nI didn't change this (it's from autoupdate_interceptor.h and component_update_interceptor.h).  I've implemented your suggestions.\n\nhttps://codereview.chromium.org/11293252/diff/44001/content/test/net/url_request_prepackaged_interceptor.h#newcode28\ncontent/test/net/url_request_prepackaged_interceptor.h:28: void SetQuerylessResponse(const std::string& url,\nOn 2012/12/07 20:12:05, erikwright wrote:\n> Add comment. Consider Renaming to SetResponseIgnoreQuery\n\nDone.\n\nhttps://codereview.chromium.org/11293252/diff/44001/net/url_request/protocol_intercept_job_factory.h\nFile net/url_request/protocol_intercept_job_factory.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/44001/net/url_request/protocol_intercept_job_factory.h#newcode55\nnet/url_request/protocol_intercept_job_factory.h:55: const char* scheme_;\nOn 2012/12/07 20:12:05, erikwright wrote:\n> I'm not sure what the convention for this kind of thing is, but it seems risky\n> to accept and store a const char*. If someone calls you like this, it's trouble:\n> \n> std::string scheme = ...;\n> ... new ProtocolInterceptJobFactory(..., scheme.c_str(), ...);\n> \n> Probably best to store a std::string, and possibly to accept one (or accept a\n> StringPiece, which can be implicitly constructed from a string or a const\n> char*).\n|scheme_| isn't really necessary...I'll remove it all together.","disapproval":false,"date":"2012-12-09 23:14:12.480100","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/android_webview/native/android_protocol_handler.cc\nFile android_webview/native/android_protocol_handler.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/android_protocol_handler.cc#newcode231\nandroid_webview/native/android_protocol_handler.cc:231: scoped_ptr<net::URLRequestJobFactory> RegisterAndroidProtocolsOnIOThread(\nSince we're creating a new factory, I think this function name is a bit of a misnomer.\n\n\"CreateAndroidRequestJobFactoryOnIOThread\"?  Or maybe just \"CreateAndroidRequestJobFactory\"?\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/android_protocol_handler.cc#newcode232\nandroid_webview/native/android_protocol_handler.cc:232: net::URLRequestContext* context,\nWhile we're here, looks like we don't need |context|.\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/cookie_manager.h\nFile android_webview/native/cookie_manager.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/cookie_manager.h#newcode21\nandroid_webview/native/cookie_manager.h:21: }  // namespace android_webview;\nWhile you're here, please remove the semi-colon.\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/net_init_native_callback.cc\nFile android_webview/native/net_init_native_callback.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/net_init_native_callback.cc#newcode13\nandroid_webview/native/net_init_native_callback.cc:13: scoped_ptr<net::URLRequestJobFactory> OnNetworkStackInitialized(\nI think having an \"OnBlah\" function return a value is pretty confusing and unexpected.  It's not at all clear from the name just what it's actually returning.\n\nMaybe CreateAndroidJobFactoryAndInitializeContext?  I'm open to better ideas.\n\nhttps://codereview.chromium.org/11293252/diff/46001/android_webview/native/net_init_native_callback.cc#newcode21\nandroid_webview/native/net_init_native_callback.cc:21: }\nnit:  While you're here, this should have a \"// namespace android_webview\"\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h\nFile chrome/browser/component_updater/component_updater_interceptor.h (left):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h#oldcode3\nchrome/browser/component_updater/component_updater_interceptor.h:3: // found in the LICENSE file.\nHmm...This file is labelled \"M\" rather than \"D\".\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode36\ncontent/test/net/url_request_prepackaged_interceptor.cc:36: bool ignore_query) {\nBrowserThread::CurrentlyOn(BrowserThread::IO)?\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode62\ncontent/test/net/url_request_prepackaged_interceptor.cc:62: EXPECT_TRUE(BrowserThread::CurrentlyOn(BrowserThread::IO));\nMay actually want to use CHECK here.  If we're on the wrong thread, things have gone badly wrong in the test framework.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode65\ncontent/test/net/url_request_prepackaged_interceptor.cc:65: return NULL;\nnit:  Fix indent.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode70\ncontent/test/net/url_request_prepackaged_interceptor.cc:70: base::ThreadRestrictions::ScopedAllowIO allow_io;\nSuggest moving this to just before ReadFileToString, as that seems to be the only place it's needed.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode92\ncontent/test/net/url_request_prepackaged_interceptor.cc:92: EXPECT_TRUE(file_util::ReadFileToString(response, &contents));\nCan we just use a \"URLRequestMockHTTPJob\" here?\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode124\ncontent/test/net/url_request_prepackaged_interceptor.cc:124: const FilePath& path) {\nSuggest a DCHECK_EQ on url.hostname\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.h\nFile content/test/net/url_request_prepackaged_interceptor.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.h#newcode33\ncontent/test/net/url_request_prepackaged_interceptor.h:33: const FilePath& path);\nnit:  Could use a single line here and above.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.h#newcode41\ncontent/test/net/url_request_prepackaged_interceptor.h:41: Delegate* delegate_;\nThink it's worth mentioning that after creation, this lives on the IO thread, and a task to delete it is posted on destruction of |this|.\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/proxy/proxy_script_fetcher_impl_unittest.cc\nFile net/proxy/proxy_script_fetcher_impl_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/proxy/proxy_script_fetcher_impl_unittest.cc#newcode84\nnet/proxy/proxy_script_fetcher_impl_unittest.cc:84: url_request_job_factory_.Pass(),\noptional:  This certainly works, but I think storing the temporary in url_request_job_factory_ makes the code a little harder to follow.\n\nWhy not just use\n\"scoped_ptr<URLRequestJobFactory>(new URLRequestJobFactoryImpl)\" here?  If you prefer your code, that's fine.\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/protocol_intercept_job_factory.h\nFile net/url_request/protocol_intercept_job_factory.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/protocol_intercept_job_factory.h#newcode28\nnet/url_request/protocol_intercept_job_factory.h:28: ProtocolHandler* protocol_handler);\nSince we're taking ownership of protocol_handler just like job_factory, shouldn't they both be scoped_ptrs?\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/url_request_filter_unittest.cc\nFile net/url_request/url_request_filter_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/url_request_filter_unittest.cc#newcode36\nnet/url_request/url_request_filter_unittest.cc:36: }\nFor the sake of completeness, suggest either turning one of these into a ProtocolHandler, or adding a ProtocolHandler.\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/url_request_test_util.h\nFile net/url_request/url_request_test_util.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/net/url_request/url_request_test_util.h#newcode303\nnet/url_request/url_request_test_util.h:303: // A simple Interceptor that returns a pre-built URLRequestJob only once.\nInterceptor -> ProtocolHandler.","disapproval":false,"date":"2012-12-11 17:22:38.401120","approval":false},{"sender":"willchan@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nNo, this ConnectInterceptor is all wrong :) When cleaning it up we should Do It Right (TM) :P\n\nIf you look at this function, you'll see it *always* returns NULL. The purpose of this interceptor is to *observe*, not to create jobs. In other words, it's abusing the interceptor interface. Rather than reworking it into a URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/profiles/profile_impl_io_data.cc\nFile chrome/browser/profiles/profile_impl_io_data.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/profiles/profile_impl_io_data.cc#newcode561\nchrome/browser/profiles/profile_impl_io_data.cc:561: // that we can later provide our own handles for storage related protocols.\ns/handles/handlers/\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/profiles/profile_impl_io_data.cc#newcode568\nchrome/browser/profiles/profile_impl_io_data.cc:568: top_job_factory = SetUpJobFactory(base_job_factory.Pass(),\nNow that you're returning it, perhas we should rename to CreateJobFactory()\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/profiles/profile_impl_io_data.cc#newcode675\nchrome/browser/profiles/profile_impl_io_data.cc:675: SetUpJobFactoryDefaults(job_factory.Pass(),\nDitto here. Maybe this should be CreateDefaultJobFactory()","disapproval":false,"date":"2012-12-11 19:14:37.937330","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h\nFile chrome/browser/component_updater/component_updater_interceptor.h (left):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h#oldcode3\nchrome/browser/component_updater/component_updater_interceptor.h:3: // found in the LICENSE file.\nOn 2012/12/11 17:22:38, Matt Menke wrote:\n> Hmm...This file is labelled \"M\" rather than \"D\".\n\nClarification:  In the list of changed files, it's marked as modified rather than deleted.","disapproval":false,"date":"2012-12-11 19:18:25.635920","approval":false},{"sender":"willchan@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/extensions/autoupdate_interceptor.h\nFile chrome/browser/extensions/autoupdate_interceptor.h (left):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/extensions/autoupdate_interceptor.h#oldcode1\nchrome/browser/extensions/autoupdate_interceptor.h:1: // Copyright (c) 2011 The Chromium Authors. All rights reserved.\nWhy is this not marked [D]eleted?\n\nhttps://codereview.chromium.org/11293252/diff/46001/webkit/tools/test_shell/test_shell.cc\nFile webkit/tools/test_shell/test_shell.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/webkit/tools/test_shell/test_shell.cc#newcode172\nwebkit/tools/test_shell/test_shell.cc:172: net::URLRequestFilter* filter = net::URLRequestFilter::GetInstance();\nWhoa! What's this global here? I've never seen this in all my years on the team. Let's kill this (I'm not saying you have to do this in this CL, just remarking this so our team can keep it in mind).","disapproval":false,"date":"2012-12-11 19:23:34.512060","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I addressed mmenke's first round of comments.\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h\nFile chrome/browser/component_updater/component_updater_interceptor.h (left):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/component_updater/component_updater_interceptor.h#oldcode3\nchrome/browser/component_updater/component_updater_interceptor.h:3: // found in the LICENSE file.\nOn 2012/12/11 17:22:38, Matt Menke wrote:\n> Hmm...This file is labelled \"M\" rather than \"D\".\nYa I've noticed this.  \"git cl patch 11293252\" deletes the file...so I'm not sure what's up.  I can't \"git rm\" the file because the file isn't there.\n\nhttps://codereview.chromium.org/11293252/diff/46001/webkit/tools/test_shell/test_shell.cc\nFile webkit/tools/test_shell/test_shell.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/webkit/tools/test_shell/test_shell.cc#newcode172\nwebkit/tools/test_shell/test_shell.cc:172: net::URLRequestFilter* filter = net::URLRequestFilter::GetInstance();\nOn 2012/12/11 19:23:34, willchan wrote:\n> Whoa! What's this global here? I've never seen this in all my years on the team.\n> Let's kill this (I'm not saying you have to do this in this CL, just remarking\n> this so our team can keep it in mind).\nYa, not only is it an icky global singleton but it also uses  the URLRequest::Deprecated::RegisterProtocolFactory() interface...  Erik and I had already planned on changing it to be a ProtocolHandler or something similar in the long-term of this refactoring project; a change which would likely necessitate it not being a global singleton.","disapproval":false,"date":"2012-12-11 21:22:55.105070","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nOn 2012/12/11 19:14:38, willchan wrote:\n> No, this ConnectInterceptor is all wrong :) When cleaning it up we should Do It\n> Right (TM) :P\n> \n> If you look at this function, you'll see it *always* returns NULL. The purpose\n> of this interceptor is to *observe*, not to create jobs. In other words, it's\n> abusing the interceptor interface. Rather than reworking it into a\n> URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\nRight now the ConnectionInterceptor is installed into the URLRequestJobFactoryImpl for the extension_context (and most other contexts) but the ChromeNetworkDelegate is not installed in the extension_context.\nThe ConnectionInterceptor is part of the whole predictor framework so I assume it's most important that it watches URLs going through the main_context but I don't know if this difference with the extension_context matters.  The comment by GetRequestContextForExtensions() says \"This is only used for a separate cookie store currently.\" making me think this isn't a big deal.  Do you guys think it should be okay to move ConnectionInterceptor into ChromeNetworkDelegate and not worry about this difference?  There are other alternatives.","disapproval":false,"date":"2012-12-11 22:28:14.420770","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Sorry, forgot to send this out yesterday.\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nOn 2012/12/11 22:28:14, pauljensen wrote:\n> On 2012/12/11 19:14:38, willchan wrote:\n> > No, this ConnectInterceptor is all wrong :) When cleaning it up we should Do\n> It\n> > Right (TM) :P\n> > \n> > If you look at this function, you'll see it *always* returns NULL. The purpose\n> > of this interceptor is to *observe*, not to create jobs. In other words, it's\n> > abusing the interceptor interface. Rather than reworking it into a\n> > URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\n> Right now the ConnectionInterceptor is installed into the\n> URLRequestJobFactoryImpl for the extension_context (and most other contexts) but\n> the ChromeNetworkDelegate is not installed in the extension_context.\n> The ConnectionInterceptor is part of the whole predictor framework so I assume\n> it's most important that it watches URLs going through the main_context but I\n> don't know if this difference with the extension_context matters.  The comment\n> by GetRequestContextForExtensions() says \"This is only used for a separate\n> cookie store currently.\" making me think this isn't a big deal.  Do you guys\n> think it should be okay to move ConnectionInterceptor into ChromeNetworkDelegate\n> and not worry about this difference?  There are other alternatives.\n\nI think that's fine for now, though should be done in another CL  (Which is what I assume you were thinking anyways, as you removed the files from this one).\n\nhttps://codereview.chromium.org/11293252/diff/55002/android_webview/native/android_protocol_handler.h\nFile android_webview/native/android_protocol_handler.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/android_webview/native/android_protocol_handler.h#newcode31\nandroid_webview/native/android_protocol_handler.h:31: bool RegisterAndroidProtocolHandler(JNIEnv* env);\nnit:  While you're here, mind adding a line break here?\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/extensions/user_script_listener_unittest.cc\nFile chrome/browser/extensions/user_script_listener_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/extensions/user_script_listener_unittest.cc#newcode138\nchrome/browser/extensions/user_script_listener_unittest.cc:138: net::URLRequest* request, net::NetworkDelegate* network_delegate) const {\nnit:  OVERRIDE\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/device_management_service_browsertest.cc\nFile chrome/browser/policy/device_management_service_browsertest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/device_management_service_browsertest.cc#newcode57\nchrome/browser/policy/device_management_service_browsertest.cc:57: }\nnit:  Blank line.\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/device_management_service_browsertest.cc#newcode67\nchrome/browser/policy/device_management_service_browsertest.cc:67: em::DeviceManagementRequest dm_request;\nThis seems to be left over from a refactoring.  Think we can safely delete it - it's not used, and has no side effects.\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/policy_browsertest.cc\nFile chrome/browser/policy/policy_browsertest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/policy_browsertest.cc#newcode138\nchrome/browser/policy/policy_browsertest.cc:138: \"http://bbbb.com/empty.html\",\nWhat's the reason for this?  Other tests also using these URLs?\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/printing/print_dialog_cloud_interative_uitest.cc\nFile chrome/browser/printing/print_dialog_cloud_interative_uitest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/printing/print_dialog_cloud_interative_uitest.cc#newcode223\nchrome/browser/printing/print_dialog_cloud_interative_uitest.cc:223: void Register() {\nThink that, out of a combination paranoia and desire for consistency, this should be static, too.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode25\ncontent/test/net/url_request_prepackaged_interceptor.cc:25: }\nnit:  Suggest a line break here.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode40\ncontent/test/net/url_request_prepackaged_interceptor.cc:40: base::ThreadRestrictions::ScopedAllowIO allow_io;\nnit:  Suggest doing this just before PathExists, to make it clearer that that's the only line that needs it.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode92\ncontent/test/net/url_request_prepackaged_interceptor.cc:92: typedef std::map<GURL, FilePath> ResponseMap;\nnit:  Private typedefs should go before private methods, per google style guide.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode118\ncontent/test/net/url_request_prepackaged_interceptor.cc:118: EXPECT_EQ(\"localhost\", gurl.host());\nThink doing this both here and in Delegate::SetResponse is overkill.  Fine with only doing it in either of the two locations.  Here is nice in that it's done inline, other location is nice in that it's nearer the actual use, and only has to be done once for both cases.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode118\ncontent/test/net/url_request_prepackaged_interceptor.cc:118: EXPECT_EQ(\"localhost\", gurl.host());\noptional:  May want to do a CHECK instead of an EXPECT.  CHECK is often used to indicate bugs in the test fixture, rather than in the code being tested.  In this case, it'll also prevent a potential hang.  Downside, of course, is that it will prevent other tests from running in unit tests.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.cc#newcode130\ncontent/test/net/url_request_prepackaged_interceptor.cc:130: EXPECT_EQ(\"localhost\", gurl.host());\nSame comment as above.\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.h\nFile content/test/net/url_request_prepackaged_interceptor.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/content/test/net/url_request_prepackaged_interceptor.h#newcode31\ncontent/test/net/url_request_prepackaged_interceptor.h:31: void SetResponseIgnoreQuery(const std::string& url, const FilePath& path);\nThink both these functions should be taking GURLs, rather than strings.  Same goes for the Delegate equivalent.\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/proxy/proxy_script_fetcher_impl_unittest.cc\nFile net/proxy/proxy_script_fetcher_impl_unittest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/proxy/proxy_script_fetcher_impl_unittest.cc#newcode51\nnet/proxy/proxy_script_fetcher_impl_unittest.cc:51: public URLRequestJobFactory::ProtocolHandler {\nShould we get rid of this, in favor of doing the check in BasicNetworkDelegate::OnBeforeURLRequest?\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc\nFile net/url_request/url_request_filter.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc#newcode27\nnet/url_request/url_request_filter.cc:27: URLRequestFilter::~URLRequestFilter() {}\nOnce we can safely do it, may want to CHECK that there aren't any handlers left.  Know the plan is to go away, but think it'd be a reasonable protection against regressions in the mean time.\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc#newcode61\nnet/url_request/url_request_filter.cc:61: DCHECK(hostname_handler_map_.count(make_pair(scheme, hostname)) == 0);\nDCHECK_EQ(0u, ...) is preferred\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc#newcode99\nnet/url_request/url_request_filter.cc:99: DCHECK(url_handler_map_.count(url.spec()) == 0);\nDCHECK_EQ(0u, ...) is preferred","disapproval":false,"date":"2012-12-13 16:12:04.280570","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nOn 2012/12/13 16:12:04, Matt Menke wrote:\n> On 2012/12/11 22:28:14, pauljensen wrote:\n> > On 2012/12/11 19:14:38, willchan wrote:\n> > > No, this ConnectInterceptor is all wrong :) When cleaning it up we should Do\n> > It\n> > > Right (TM) :P\n> > > \n> > > If you look at this function, you'll see it *always* returns NULL. The\n> purpose\n> > > of this interceptor is to *observe*, not to create jobs. In other words,\n> it's\n> > > abusing the interceptor interface. Rather than reworking it into a\n> > > URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\n> > Right now the ConnectionInterceptor is installed into the\n> > URLRequestJobFactoryImpl for the extension_context (and most other contexts)\n> but\n> > the ChromeNetworkDelegate is not installed in the extension_context.\n> > The ConnectionInterceptor is part of the whole predictor framework so I assume\n> > it's most important that it watches URLs going through the main_context but I\n> > don't know if this difference with the extension_context matters.  The comment\n> > by GetRequestContextForExtensions() says \"This is only used for a separate\n> > cookie store currently.\" making me think this isn't a big deal.  Do you guys\n> > think it should be okay to move ConnectionInterceptor into\n> ChromeNetworkDelegate\n> > and not worry about this difference?  There are other alternatives.\n> \n> I think that's fine for now, though should be done in another CL  (Which is what\n> I assume you were thinking anyways, as you removed the files from this one).\nSorry, I'm confused.\nWhat is fine for now? Moving ConnectionInterceptor to the ChromeNetworkDelegate in another CL and not worrying about the fact that it's not connected to the extension_context?\nWhat files did I remove from this one?","disapproval":false,"date":"2012-12-13 17:53:29.968270","approval":false},{"sender":"willchan@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nOn 2012/12/13 17:53:30, pauljensen wrote:\n> On 2012/12/13 16:12:04, Matt Menke wrote:\n> > On 2012/12/11 22:28:14, pauljensen wrote:\n> > > On 2012/12/11 19:14:38, willchan wrote:\n> > > > No, this ConnectInterceptor is all wrong :) When cleaning it up we should\n> Do\n> > > It\n> > > > Right (TM) :P\n> > > > \n> > > > If you look at this function, you'll see it *always* returns NULL. The\n> > purpose\n> > > > of this interceptor is to *observe*, not to create jobs. In other words,\n> > it's\n> > > > abusing the interceptor interface. Rather than reworking it into a\n> > > > URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\n> > > Right now the ConnectionInterceptor is installed into the\n> > > URLRequestJobFactoryImpl for the extension_context (and most other contexts)\n> > but\n> > > the ChromeNetworkDelegate is not installed in the extension_context.\n> > > The ConnectionInterceptor is part of the whole predictor framework so I\n> assume\n> > > it's most important that it watches URLs going through the main_context but\n> I\n> > > don't know if this difference with the extension_context matters.  The\n> comment\n> > > by GetRequestContextForExtensions() says \"This is only used for a separate\n> > > cookie store currently.\" making me think this isn't a big deal.  Do you guys\n> > > think it should be okay to move ConnectionInterceptor into\n> > ChromeNetworkDelegate\n> > > and not worry about this difference?  There are other alternatives.\n> > \n> > I think that's fine for now, though should be done in another CL  (Which is\n> what\n> > I assume you were thinking anyways, as you removed the files from this one).\n> Sorry, I'm confused.\n> What is fine for now? Moving ConnectionInterceptor to the ChromeNetworkDelegate\n> in another CL and not worrying about the fact that it's not connected to the\n> extension_context?\n> What files did I remove from this one?\n> \n\nSo, long-term we need to start refactoring ChromeNetworkDelegate. We've kinda overloaded it now. It's shared by the \"system\" URLRequestContext, the profiles' main & app URLRequestContexts, but not the extension one. What we want to do is probably use composition here to share behavior across different NetworkDelegate implementations.\n\nBut I didn't answer your question yet. AIUI, the extension context is purely for the chrome-extension:// to override the CookieStore. So it's not a big deal not to let ConnectionInterceptor hook it. Long-term, I imagine the CookieStore being part of the dependencies passed directly into a ProtocolHandler, so there won't be a need to create a whole new URLRequestContext just for extensions.\n\nMake sense? If people agree, can y'all file bugs? Don't need to sign up to tackle it yourselves unless you'd like to. I have some other folks who may be interested, but you're doing such a great job here I'd rather you continue to kick ass and take names :)\n\nI defer to the main reviewers about whether or not such work would make sense to be done in this CL or another.","disapproval":false,"date":"2012-12-13 17:59:53.880270","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/chrome/browser/net/connect_interceptor.cc#newcode42\nchrome/browser/net/connect_interceptor.cc:42: net::URLRequestJob* ConnectInterceptor::MaybeCreateJob(\nOn 2012/12/13 17:59:53, willchan wrote:\n> On 2012/12/13 17:53:30, pauljensen wrote:\n> > On 2012/12/13 16:12:04, Matt Menke wrote:\n> > > On 2012/12/11 22:28:14, pauljensen wrote:\n> > > > On 2012/12/11 19:14:38, willchan wrote:\n> > > > > No, this ConnectInterceptor is all wrong :) When cleaning it up we\n> should\n> > Do\n> > > > It\n> > > > > Right (TM) :P\n> > > > > \n> > > > > If you look at this function, you'll see it *always* returns NULL. The\n> > > purpose\n> > > > > of this interceptor is to *observe*, not to create jobs. In other words,\n> > > it's\n> > > > > abusing the interceptor interface. Rather than reworking it into a\n> > > > > URLRequestJobFactory, we should use the ChromeNetworkDelegate instead.\n> > > > Right now the ConnectionInterceptor is installed into the\n> > > > URLRequestJobFactoryImpl for the extension_context (and most other\n> contexts)\n> > > but\n> > > > the ChromeNetworkDelegate is not installed in the extension_context.\n> > > > The ConnectionInterceptor is part of the whole predictor framework so I\n> > assume\n> > > > it's most important that it watches URLs going through the main_context\n> but\n> > I\n> > > > don't know if this difference with the extension_context matters.  The\n> > comment\n> > > > by GetRequestContextForExtensions() says \"This is only used for a separate\n> > > > cookie store currently.\" making me think this isn't a big deal.  Do you\n> guys\n> > > > think it should be okay to move ConnectionInterceptor into\n> > > ChromeNetworkDelegate\n> > > > and not worry about this difference?  There are other alternatives.\n> > > \n> > > I think that's fine for now, though should be done in another CL  (Which is\n> > what\n> > > I assume you were thinking anyways, as you removed the files from this one).\n> > Sorry, I'm confused.\n> > What is fine for now? Moving ConnectionInterceptor to the\n> ChromeNetworkDelegate\n> > in another CL and not worrying about the fact that it's not connected to the\n> > extension_context?\n> > What files did I remove from this one?\n> > \n> \n> So, long-term we need to start refactoring ChromeNetworkDelegate. We've kinda\n> overloaded it now. It's shared by the \"system\" URLRequestContext, the profiles'\n> main & app URLRequestContexts, but not the extension one. What we want to do is\n> probably use composition here to share behavior across different NetworkDelegate\n> implementations.\n> \n> But I didn't answer your question yet. AIUI, the extension context is purely for\n> the chrome-extension:// to override the CookieStore. So it's not a big deal not\n> to let ConnectionInterceptor hook it. Long-term, I imagine the CookieStore being\n> part of the dependencies passed directly into a ProtocolHandler, so there won't\n> be a need to create a whole new URLRequestContext just for extensions.\n> \n> Make sense? If people agree, can y'all file bugs? Don't need to sign up to\n> tackle it yourselves unless you'd like to. I have some other folks who may be\n> interested, but you're doing such a great job here I'd rather you continue to\n> kick ass and take names :)\n> \n> I defer to the main reviewers about whether or not such work would make sense to\n> be done in this CL or another.\nIf I move ConnectionInterceptor into the ChromeNetworkDelegate in this CL I can yank out all my changes to pass around the URLRequestJobFactories through SetupJobFactory() and SetupJobFactoryDefaults().  Just sayin' :)  I'll also defer to the main reviewers to make the call.","disapproval":false,"date":"2012-12-13 18:21:54.138030","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"On 2012/12/13 18:21:54, pauljensen wrote:\n> If I move ConnectionInterceptor into the ChromeNetworkDelegate in this CL I can\n> yank out all my changes to pass around the URLRequestJobFactories through\n> SetupJobFactory() and SetupJobFactoryDefaults().  Just sayin' :)  I'll also\n> defer to the main reviewers to make the call.\n\nYes, I think you can remove all those changes from this CL.  Looks to me like there are 2 other interceptors that profiles add, so may still have to do it later, depending on their complexity, but no need to worry about it in this CL.","disapproval":false,"date":"2012-12-13 18:37:10.196460","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I've addressed all comments. PTAL.\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc\nFile net/url_request/url_request_filter.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc#newcode27\nnet/url_request/url_request_filter.cc:27: URLRequestFilter::~URLRequestFilter() {}\nOn 2012/12/13 16:12:04, Matt Menke wrote:\n> Once we can safely do it, may want to CHECK that there aren't any handlers left.\n>  Know the plan is to go away, but think it'd be a reasonable protection against\n> regressions in the mean time.\n~URLRequestFilter() is never hit :'(\nWe could throw lots of check's in there but they won't do any good until we stop making this a lazy singleton.  I say we punt on this until then.  Acceptable?","disapproval":false,"date":"2012-12-17 01:38:35.270850","approval":false},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"I couple responses to some past comments.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode92\ncontent/test/net/url_request_prepackaged_interceptor.cc:92: EXPECT_TRUE(file_util::ReadFileToString(response, &contents));\nOn 2012/12/11 17:22:38, Matt Menke wrote:\n> Can we just use a \"URLRequestMockHTTPJob\" here?\nI tried for a while to use URLRequestMockHTTPJob but this required adding lots of *.mock-http-headers files as the update logic requires HTTP 200 response codes.  I was fine with adding these files until it came to a new test that was just added that creates files in a uniquely named temporary directory.  Programmatically creating the .mock-http-headers for that test just seemed like too much circumvention logic.  So I did what AutoUpdateInterceptor used to do, and just made a tiny URLRequestJob class that inherited from URLRequestFileJob and added the 200 response code.  This way the file I/O is done nicely on the appropriate thread and we don't need the second ScopedAllowIO.\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/policy_browsertest.cc\nFile chrome/browser/policy/policy_browsertest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/chrome/browser/policy/policy_browsertest.cc#newcode138\nchrome/browser/policy/policy_browsertest.cc:138: \"http://bbbb.com/empty.html\",\nOn 2012/12/13 16:12:04, Matt Menke wrote:\n> What's the reason for this?  Other tests also using these URLs?\nThere were other tests using this but now it's unneeded so I removed this change.","disapproval":false,"date":"2012-12-17 16:26:49.736770","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"LGTM.  Just nits.\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode92\ncontent/test/net/url_request_prepackaged_interceptor.cc:92: EXPECT_TRUE(file_util::ReadFileToString(response, &contents));\nOn 2012/12/17 16:26:49, pauljensen wrote:\n> On 2012/12/11 17:22:38, Matt Menke wrote:\n> > Can we just use a \"URLRequestMockHTTPJob\" here?\n> I tried for a while to use URLRequestMockHTTPJob but this required adding lots\n> of *.mock-http-headers files as the update logic requires HTTP 200 response\n> codes.  I was fine with adding these files until it came to a new test that was\n> just added that creates files in a uniquely named temporary directory. \n> Programmatically creating the .mock-http-headers for that test just seemed like\n> too much circumvention logic.  So I did what AutoUpdateInterceptor used to do,\n> and just made a tiny URLRequestJob class that inherited from URLRequestFileJob\n> and added the 200 response code.  This way the file I/O is done nicely on the\n> appropriate thread and we don't need the second ScopedAllowIO.\n\nCould just fix URLRequestMockHTTPJob to use a nice set of default headers.\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc\nFile net/url_request/url_request_filter.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/55002/net/url_request/url_request_filter.cc#newcode27\nnet/url_request/url_request_filter.cc:27: URLRequestFilter::~URLRequestFilter() {}\nOn 2012/12/17 01:38:35, pauljensen wrote:\n> On 2012/12/13 16:12:04, Matt Menke wrote:\n> > Once we can safely do it, may want to CHECK that there aren't any handlers\n> left.\n> >  Know the plan is to go away, but think it'd be a reasonable protection\n> against\n> > regressions in the mean time.\n> ~URLRequestFilter() is never hit :'(\n> We could throw lots of check's in there but they won't do any good until we stop\n> making this a lazy singleton.  I say we punt on this until then.  Acceptable?\n\nSGTM.  I forgot that we leak singletons.\n\nhttps://codereview.chromium.org/11293252/diff/96001/android_webview/native/android_protocol_handler.cc\nFile android_webview/native/android_protocol_handler.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/android_webview/native/android_protocol_handler.cc#newcode74\nandroid_webview/native/android_protocol_handler.cc:74: virtual ~AssetFileProtocolInterceptor() OVERRIDE;\nnit:  Destructor should go before other methods.\n\nhttps://codereview.chromium.org/11293252/diff/96001/android_webview/native/android_protocol_handler.cc#newcode80\nandroid_webview/native/android_protocol_handler.cc:80: AssetFileProtocolInterceptor();\nnit:  Blank line between methods and data.\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/net/chrome_network_delegate.cc\nFile chrome/browser/net/chrome_network_delegate.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/net/chrome_network_delegate.cc#newcode404\nchrome/browser/net/chrome_network_delegate.cc:404: if (connect_interceptor_.get())\nnit:  .get() not needed.\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/net/connect_interceptor.cc\nFile chrome/browser/net/connect_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/net/connect_interceptor.cc#newcode32\nchrome/browser/net/connect_interceptor.cc:32: net::URLRequest* request) const {\nnit:  May be able to fit on one line.\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/policy/device_management_service_browsertest.cc\nFile chrome/browser/policy/device_management_service_browsertest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/policy/device_management_service_browsertest.cc#newcode36\nchrome/browser/policy/device_management_service_browsertest.cc:36: // Interceptor implementation that returns test data back to the service.\nComment is no longer correct.\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/printing/print_dialog_cloud_interative_uitest.cc\nFile chrome/browser/printing/print_dialog_cloud_interative_uitest.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/printing/print_dialog_cloud_interative_uitest.cc#newcode169\nchrome/browser/printing/print_dialog_cloud_interative_uitest.cc:169: virtual void SetUp() {\nnit:  While you're here, these two should be OVERRIDE\n\nhttps://codereview.chromium.org/11293252/diff/96001/chrome/browser/printing/print_dialog_cloud_interative_uitest.cc#newcode223\nchrome/browser/printing/print_dialog_cloud_interative_uitest.cc:223: static void Register(const std::string& scheme,\nThink these names are a little too vague.  Just RegisterTestHandlers / UnregisterTestHandlers would be fine, or maybe Add/Remove, to match the underlying function names.\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.cc#newcode1\ncontent/test/net/url_request_prepackaged_interceptor.cc:1: // Copyright (c) 2011 The Chromium Authors. All rights reserved.\nWrong year.\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.cc#newcode3\ncontent/test/net/url_request_prepackaged_interceptor.cc:3: // found in the LICENSE file.\nnit:  Add linebreak.\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.cc#newcode82\ncontent/test/net/url_request_prepackaged_interceptor.cc:82: DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\nSince this is test code only, this DCHECK and the one above should probably be CHECKs.\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.h\nFile content/test/net/url_request_prepackaged_interceptor.h (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/content/test/net/url_request_prepackaged_interceptor.h#newcode1\ncontent/test/net/url_request_prepackaged_interceptor.h:1: // Copyright (c) 2011 The Chromium Authors. All rights reserved.\nWrong year.\n\nhttps://codereview.chromium.org/11293252/diff/96001/net/url_request/protocol_intercept_job_factory.cc\nFile net/url_request/protocol_intercept_job_factory.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/96001/net/url_request/protocol_intercept_job_factory.cc#newcode1\nnet/url_request/protocol_intercept_job_factory.cc:1: // Copyright (c) 2011 The Chromium Authors. All rights reserved.\nHmm...Should this be 2012?  I have no idea.","disapproval":false,"date":"2012-12-18 20:32:14.794490","approval":true},{"sender":"pauljensen@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"Brett, please review the chrome/, content/ and webkit/ changes.\nJonathan, please review the android_webview/ changes.\nErik Wright and Matt Menke have thoroughly reviewed this CL as a whole.","disapproval":false,"date":"2012-12-19 16:20:20.542770","approval":false},{"sender":"mmenke@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org"],"text":"https://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc\nFile content/test/net/url_request_prepackaged_interceptor.cc (right):\n\nhttps://codereview.chromium.org/11293252/diff/46001/content/test/net/url_request_prepackaged_interceptor.cc#newcode92\ncontent/test/net/url_request_prepackaged_interceptor.cc:92: EXPECT_TRUE(file_util::ReadFileToString(response, &contents));\nOn 2012/12/18 20:32:15, Matt Menke wrote:\n> On 2012/12/17 16:26:49, pauljensen wrote:\n> > On 2012/12/11 17:22:38, Matt Menke wrote:\n> > > Can we just use a \"URLRequestMockHTTPJob\" here?\n> > I tried for a while to use URLRequestMockHTTPJob but this required adding lots\n> > of *.mock-http-headers files as the update logic requires HTTP 200 response\n> > codes.  I was fine with adding these files until it came to a new test that\n> was\n> > just added that creates files in a uniquely named temporary directory. \n> > Programmatically creating the .mock-http-headers for that test just seemed\n> like\n> > too much circumvention logic.  So I did what AutoUpdateInterceptor used to do,\n> > and just made a tiny URLRequestJob class that inherited from URLRequestFileJob\n> > and added the 200 response code.  This way the file I/O is done nicely on the\n> > appropriate thread and we don't need the second ScopedAllowIO.\n> \n> Could just fix URLRequestMockHTTPJob to use a nice set of default headers.\n\nBTW - no need to worry about that now.  Your solution is fine.  (Thought I removed the comment).","disapproval":false,"date":"2012-12-19 16:21:21.660970","approval":false},{"sender":"joth@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org","mkosiba@chromium.org","boliu@chromium.org"],"text":"LGTM","disapproval":false,"date":"2012-12-19 19:20:24.827140","approval":true},{"sender":"brettw@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org","mkosiba@chromium.org","boliu@chromium.org"],"text":"owners lgtm rubberstamp","disapproval":false,"date":"2012-12-19 22:10:08.131890","approval":true},{"sender":"commit-bot@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org","mkosiba@chromium.org","boliu@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/pauljensen@chromium.org/11293252/84007","disapproval":false,"date":"2012-12-19 22:39:53.051830","approval":false},{"sender":"commit-bot@chromium.org","recipients":["pauljensen@chromium.org","erikwright@chromium.org","willchan@chromium.org","mmenke@chromium.org","brettw@chromium.org","joth@chromium.org","chromium-reviews@chromium.org","aa@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","chromium-apps-reviews@chromium.org","mkosiba@chromium.org","boliu@chromium.org"],"text":"Presubmit check for 11293252-84007 failed and returned exit status 1.\n\n\nRunning presubmit commit checks ...\n\n** Presubmit Messages **\nYou might be calling functions intended only for testing from\nproduction code.  It is OK to ignore this warning if you know what\nyou are doing, as the heuristics used to detect the situation are\nnot perfect.  The commit queue will not block on this warning.\nEmail joi@chromium.org if you have questions.\n  android_webview/native/android_protocol_handler.cc:254\n    static void SetResourceContextForTesting(JNIEnv* env, jclass /*clazz*/,\n\n** Presubmit ERRORS **\nBanned functions were used.\n    content/test/net/url_request_prepackaged_interceptor.cc:61:\n      New code should not use ScopedAllowIO. Post a task to the blocking\n      pool or the FILE thread instead.\n\nPresubmit checks took 4.5s to calculate.","disapproval":false,"date":"2012-12-19 22:40:09.070260","approval":false}],"owner_email":"pauljensen@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"pauljensen","subject":"Change Interceptors into URLRequestJobFactory::ProtocolHandlers.","created":"2012-11-13 17:15:46.774630","patchsets":[7,7001,10001,13001,10002,17001,19001,21001,13002,24001,12047,22067,21002,16034,21005,15072,17044,19036,19037,16052,22109,33001,34046,39001,40046,44001,46001,55002,71003,76002,85001,96001,121002,84007,125002],"modified":"2012-12-20 17:04:45.613940","closed":true,"commit":false,"issue":11293252}