{"files":{"cc/trees/proxy.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":12,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"Hah \"layer renderer\" this is an old comment. Just \"renderer\", it's cleaner.","draft":false,"lineno":62,"date":"2013-04-23 18:22:40.431830","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"\"after the output surface is lost\"","draft":false,"lineno":63,"date":"2013-04-23 18:22:40.432140","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"\"OnCreateAttempted()\" needs to be updated","draft":false,"lineno":63,"date":"2013-04-23 18:22:40.432350","left":false}],"id":135019,"is_binary":false},"cc/trees/thread_proxy.cc":{"status":"M","num_chunks":11,"no_base_file":false,"property_changes":"","num_added":119,"num_removed":142,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"i'd like this to be an explicit variable the says if the renderer caps are valid (ie the context is lost/renderer isn't initialized yet) for the main thread to use. for the same reasons as stated in the single thread proxy. IOW when the surface is lost, this variable should become false.\n\nYou mentioned something james had said so maybe we're disagreeing about this? I'm not sure, can you elaborate?\n\nI just feel that dchecking \"we initialized the renderer once\" is far less useful than \"we have an initialized renderer and these are the caps for it\" because in the future, the caps may change when we re-init the renderer.\n\nThe lost context code never actually goes to the main thread however, where it could reset this variable. Since this is just a dcheck, maybe it would make sense to #ifndef NDEBUG make a hop to the impl thread and verify that scheduler->HasInitializedOutputSurface() is true? Then this variable can go away.","draft":false,"lineno":255,"date":"2013-04-23 18:22:40.434300","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"if (!___) return;\n\nSame comment here about this variable, it should be true when we have a valid context/surface/renderer on the impl thread that we can use. Not true forever once we've initialized a renderer once.\n\nIn this case it's just going to hop to the impl thread, so maybe this is not needed. The impl thread can just DoNoOp() on a lost context and nothing bad will happen. So I'd vote to just remove this check.","draft":false,"lineno":554,"date":"2013-04-23 18:22:40.434630","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"s/Context/OutputSurface/","draft":false,"lineno":845,"date":"2013-04-23 18:22:40.434930","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> i'd like this to be an explicit variable the says if the renderer caps are valid\n> (ie the context is lost/renderer isn't initialized yet) for the main thread to\n> use. for the same reasons as stated in the single thread proxy. IOW when the\n> surface is lost, this variable should become false.\n> \n> You mentioned something james had said so maybe we're disagreeing about this?\n> I'm not sure, can you elaborate?\n> \n> I just feel that dchecking \"we initialized the renderer once\" is far less useful\n> than \"we have an initialized renderer and these are the caps for it\" because in\n> the future, the caps may change when we re-init the renderer.\n> \n> The lost context code never actually goes to the main thread however, where it\n> could reset this variable. Since this is just a dcheck, maybe it would make\n> sense to #ifndef NDEBUG make a hop to the impl thread and verify that\n> scheduler->HasInitializedOutputSurface() is true? Then this variable can go\n> away.\n\nI spoke with james a bit about this, cuz I was not really sure I was a fan of the thread hop suggestion. He agreed that the thread hop, or signalling back to the main thread immediately on context loss, just for a dcheck are not really great.\n\nSo, let's have this variable that we're DCHECKing here be false to start with, true when we create a surface/renderer successfully, and false when we start the recreation process again (ie when CreateAndInitOutputSurface happens). It'll give us some coverage at least and can't be racy.","draft":false,"lineno":255,"date":"2013-04-23 18:34:00.491360","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"So now both single_thread_proxy and this effectively have a copy of LTH::output_surface_lost_. Going to add LTH::output_surface_lost() instead, just for DCHECKing in the proxies.\n\nThis more tightly couples LTH and the proxies, but I think it's worth it, thoughts?","draft":false,"lineno":255,"date":"2013-04-24 01:28:52.976800","left":false}],"id":135022,"is_binary":false},"cc/test/layer_tree_test.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":2,"messages":[],"id":135012,"is_binary":false},"cc/layers/tiled_layer_unittest.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":1,"num_removed":1,"messages":[],"id":135003,"is_binary":false},"cc/scheduler/scheduler_state_machine_unittest.cc":{"status":"M","num_chunks":39,"no_base_file":false,"property_changes":"","num_added":136,"num_removed":36,"messages":[],"id":135008,"is_binary":false},"cc/trees/layer_tree_host_unittest.cc":{"status":"M","num_chunks":10,"no_base_file":false,"property_changes":"","num_added":15,"num_removed":14,"messages":[],"id":135017,"is_binary":false},"cc/trees/layer_tree_host_client.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":1,"messages":[],"id":135016,"is_binary":false},"cc/trees/thread_proxy.h":{"status":"M","num_chunks":6,"no_base_file":false,"property_changes":"","num_added":16,"num_removed":23,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"drop the newline, make it clear this is part of the main thread block of functions","draft":false,"lineno":133,"date":"2013-04-23 18:22:40.435160","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"what is INIT_SUCCESSFUL_AND_COMPLETE?","draft":false,"lineno":134,"date":"2013-04-23 18:22:40.435440","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> what is INIT_SUCCESSFUL_AND_COMPLETE?\n\nShould be |success| is true.","draft":false,"lineno":134,"date":"2013-04-24 01:28:52.977050","left":false}],"id":135023,"is_binary":false},"cc/test/fake_proxy.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":8,"num_removed":5,"messages":[],"id":135010,"is_binary":false},"cc/scheduler/scheduler_state_machine.h":{"status":"M","num_chunks":5,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":5,"messages":[],"id":135007,"is_binary":false},"cc/trees/layer_tree_host.cc":{"status":"M","num_chunks":6,"no_base_file":false,"property_changes":"","num_added":70,"num_removed":78,"messages":[],"id":135014,"is_binary":false},"cc/trees/layer_tree_host.h":{"status":"M","num_chunks":4,"no_base_file":false,"property_changes":"","num_added":8,"num_removed":9,"messages":[],"id":135015,"is_binary":false},"cc/trees/layer_tree_host_unittest_context.cc":{"status":"M","num_chunks":15,"no_base_file":false,"property_changes":"","num_added":102,"num_removed":27,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"nit: times_to_expect_create_failed","draft":false,"lineno":61,"date":"2013-04-23 18:22:40.428150","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"nit: times_create_failed","draft":false,"lineno":62,"date":"2013-04-23 18:22:40.428530","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"Hm, can we just always EXPECT_TRUE here? I'm now fuzzy why this was expecting false when there's no damage. Was the old check failing?","draft":false,"lineno":157,"date":"2013-04-23 18:22:40.428900","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"ExpectCreateToFail()?","draft":false,"lineno":204,"date":"2013-04-23 18:22:40.429210","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"This will be clear when the function is renamed, I think you don't need the comment here.","draft":false,"lineno":244,"date":"2013-04-23 18:22:40.429560","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"no {} needed for these","draft":false,"lineno":248,"date":"2013-04-23 18:22:40.429890","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"You could init this in BeginTest() and avoid the constructor if you want (it adds so many lines of boilerplate - just the pattern I've started following), or leave it as is if you prefer.","draft":false,"lineno":649,"date":"2013-04-23 18:22:40.430230","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"How about setting the set_have_extension_io_surface etc in LTHContextTest::CreateOutputSurface() when it makes the TestWGC3D if some variable context_should_support_io_surface_ in the base class is true? Then have this class set that variable. This function could go away.","draft":false,"lineno":1010,"date":"2013-04-23 18:22:40.430580","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"Can you add a DidCommitAndDrawFrame() method in this test that will EXPECT_FALSE(true), ie fail the test, if it's called?","draft":false,"lineno":1135,"date":"2013-04-23 18:22:40.430900","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"Remove this function, set times_to_lose_on_create_ = 1000 in BeginTest() and you should have the same thing, I think, without having to tweak times_to_expect_failure_ in DidRecreateOS().","draft":false,"lineno":1149,"date":"2013-04-23 18:22:40.431100","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"You should get this for free, the times_to_fail_initialize_ path will set this expectation.","draft":false,"lineno":1185,"date":"2013-04-23 18:22:40.431330","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"This isn't really supposed to be public API for LTH. Can you do the same thing by calling CompositeAndReadback instead? (Won't need SetNeedsRedraw either)","draft":false,"lineno":1202,"date":"2013-04-23 18:22:40.431540","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> Hm, can we just always EXPECT_TRUE here? I'm now fuzzy why this was expecting\n> false when there's no damage. Was the old check failing?\n\nHaving unconditional EXPECT_TRUE(result) is ok.\n\nOld check was failing in LayerTreeHostContextTestRetryWorksWithForcedInit where there is an extra SetNeedsCommit for single_thread_proxy that ended up having no damage.","draft":false,"lineno":157,"date":"2013-04-24 01:28:52.975170","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> You could init this in BeginTest() and avoid the constructor if you want (it\n> adds so many lines of boilerplate - just the pattern I've started following), or\n> leave it as is if you prefer.\n\nNo boilerplate sounds better to me.","draft":false,"lineno":649,"date":"2013-04-24 01:28:52.975450","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> Remove this function, set times_to_lose_on_create_ = 1000 in BeginTest() and you\n> should have the same thing, I think, without having to tweak\n> times_to_expect_failure_ in DidRecreateOS().\n\ntimes_to_lose_on_create_ works.\n\nExpectCreateToFail checks committed_at_least_once_ before incrementing, which is wrong. Removing the check breaks LayerTreeHostContextTestOffscreenContextFails, so move the tweak there since failing to create first offscreen context is *not* an error. Remove tweak here.","draft":false,"lineno":1149,"date":"2013-04-24 01:28:52.975750","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> This isn't really supposed to be public API for LTH. Can you do the same thing\n> by calling CompositeAndReadback instead? (Won't need SetNeedsRedraw either)\n\nHad to include SkBitmap to call CompositeAndReadback. Please check my usage as it's my first time using skia classes.","draft":false,"lineno":1202,"date":"2013-04-24 01:28:52.976010","left":false}],"id":135018,"is_binary":false},"cc/trees/single_thread_proxy.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":8,"messages":[],"id":135021,"is_binary":false},"cc/test/fake_proxy.h":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":6,"num_removed":4,"messages":[],"id":135011,"is_binary":false},"cc/scheduler/scheduler.cc":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":7,"messages":[],"id":135004,"is_binary":false},"cc/scheduler/scheduler_state_machine.cc":{"status":"M","num_chunks":7,"no_base_file":false,"property_changes":"","num_added":22,"num_removed":13,"messages":[],"id":135006,"is_binary":false},"cc/layers/nine_patch_layer_unittest.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":1,"num_removed":1,"messages":[],"id":135001,"is_binary":false},"cc/layers/scrollbar_layer_unittest.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":2,"messages":[],"id":135002,"is_binary":false},"cc/scheduler/scheduler.h":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":6,"num_removed":3,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"Since this is impl, should these be mentioning the Renderer in their names?","draft":false,"lineno":94,"date":"2013-04-23 18:22:40.427850","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> Since this is impl, should these be mentioning the Renderer in their names?\n\nErr...do I have to? How about let's make the rule to only mention renderer in LTHI methods. There is GetRendererCap but that's kind of an exception...\n\nDidn't do anything for this.","draft":false,"lineno":94,"date":"2013-04-24 01:28:52.974880","left":false}],"id":135005,"is_binary":false},"cc/test/layer_tree_test.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":1,"num_removed":1,"messages":[],"id":135013,"is_binary":false},"cc/scheduler/scheduler_unittest.cc":{"status":"M","num_chunks":14,"no_base_file":false,"property_changes":"","num_added":43,"num_removed":15,"messages":[],"id":135009,"is_binary":false},"cc/trees/single_thread_proxy.cc":{"status":"M","num_chunks":7,"no_base_file":false,"property_changes":"","num_added":30,"num_removed":46,"messages":[{"author":"danakj","author_email":"danakj@chromium.org","text":"default this to true","draft":false,"lineno":28,"date":"2013-04-23 18:22:40.432620","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"This variable is problematic for the future, the same way as it was in LTH. It creating assumptions that \"once we initialize the renderer one way, things will stay that way for the future, across context loss etc. We want to move away from that world. I think we can remove this variable as well, and commented at its use sites.","draft":false,"lineno":30,"date":"2013-04-23 18:22:40.432880","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"Can you dcheck !output_surface_lost_ instead? We care more about \"we have valid caps right now\" than \"we got caps once so we're good forever now\"","draft":false,"lineno":156,"date":"2013-04-23 18:22:40.433100","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"Hmmmm.. is this true? We added an assert IsMainThread() here in the ThreadProxy. I think this is a lie, I can't see the callsite. Can you remove this note and add an assert here as well?","draft":false,"lineno":157,"date":"2013-04-23 18:22:40.433400","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"if (!output_surface_lost_) ?","draft":false,"lineno":351,"date":"2013-04-23 18:22:40.433710","left":false},{"author":"danakj","author_email":"danakj@chromium.org","text":"I'm not sure about this rename.. really we want to tell the host it was lost here. Maybe we can mimic the behaviour of the thread proxy better here? SetNeedsCommit() directly here instead of doing it in DidStartOSCreation(), and call DidStartOSCreation() from CreateAndInitOutputSurface instead?","draft":false,"lineno":440,"date":"2013-04-23 18:22:40.434010","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> This variable is problematic for the future, the same way as it was in LTH. It\n> creating assumptions that \"once we initialize the renderer one way, things will\n> stay that way for the future, across context loss etc. We want to move away from\n> that world. I think we can remove this variable as well, and commented at its\n> use sites.\n\nUsing copy in LTH. See my reply in thread_proxy.","draft":false,"lineno":30,"date":"2013-04-24 01:28:52.976270","left":false},{"author":"boliu","author_email":"boliu@chromium.org","text":"On 2013/04/23 18:22:40, danakj wrote:\n> I'm not sure about this rename.. really we want to tell the host it was lost\n> here. Maybe we can mimic the behaviour of the thread proxy better here?\n> SetNeedsCommit() directly here instead of doing it in DidStartOSCreation(), and\n> call DidStartOSCreation() from CreateAndInitOutputSurface instead?\n\nMoving this to CreateAndInitOutputSurface will break retry on failure logic since DidStartOSCreation resets the retry counter. At least this behavior is similar to ThreadProxy, that DidStartOSCreation is only called only on context lost *after* successful initialzation, not on each retry.\n\nI think renaming this back to DidLoseOutputSurface is probably the easier solution.","draft":false,"lineno":440,"date":"2013-04-24 01:28:52.976540","left":false}],"id":135020,"is_binary":false}},"owner_email":"boliu@chromium.org","owner":"boliu","message":"rebase","try_job_results":[{"parent_name":null,"tests":[],"slave":"slave375-c4","url":"http://build.chromium.org/p/tryserver.chromium/builders/linux_chromeos/builds/105914","timestamp":"2013-04-23 16:47:57.589248","builder":"linux_chromeos","clobber":false,"project":"Chromium Try Server","reason":"","result":"2","key":"ahdzfmNocm9taXVtY29kZXJldmlldy1ocnIyCxIFSXNzdWUYoND9BQwLEghQYXRjaFNldBiKjwgMCxIMVHJ5Sm9iUmVzdWx0GJG2CAw","requester":"boliu@chromium.org","buildnumber":"105914","revision":"195751"},{"parent_name":null,"tests":[],"slave":"slave343-c4","url":"http://build.chromium.org/p/tryserver.chromium/builders/linux_chromeos/builds/105906","timestamp":"2013-04-23 16:30:15.057821","builder":"linux_chromeos","clobber":false,"project":"Chromium Try Server","reason":"","result":"2","key":"ahdzfmNocm9taXVtY29kZXJldmlldy1ocnIyCxIFSXNzdWUYoND9BQwLEghQYXRjaFNldBiKjwgMCxIMVHJ5Sm9iUmVzdWx0GMGmCAw","requester":"boliu@chromium.org","buildnumber":"105906","revision":"195751"}],"created":"2013-04-23 15:21:55.160440","url":null,"num_comments":37,"modified":"2013-04-24 01:28:53.042450","patchset":133002,"issue":12544032}