{"description":"There was a pre-existing bug in the AppCacheUpdateJobTest where it was not\nclosing out classes created on the IO Thread on the IO Thread.  This didn't\ncause problems before by luck; but now it does.\n\nHave the cleanup run on a task on the IO Thread.\n\nTBR=michaeln\n\nBUG=none\nTEST=AppCacheUpdateJobTest.\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=41547","cc":["chromium-reviews@chromium.org","michaeln@chromium.org","darin-cc@chromium.org","phajdan.jr@chromium.org"],"reviewers":["michaeln@chromium.org"],"messages":[{"sender":"mbelshe@chromium.org","recipients":["mbelshe@chromium.org","michaeln@chromium.org","chromium-reviews@chromium.org","michaeln@chromium.org","darin-cc@chromium.org","phajdan.jr@chromium.org"],"text":"Hi, Michael,\n\nI had to check this in because it had broken when I landed some other stuff.  I hope the fix is ok.\n\nThanks for your help,\nMike","disapproval":false,"date":"2010-03-14 11:53:05.441123","approval":false},{"sender":"michaeln@chromium.org","recipients":["mbelshe@chromium.org","michaeln@chromium.org","chromium-reviews@chromium.org","michaeln@chromium.org","darin-cc@chromium.org","phajdan.jr@chromium.org"],"text":"LGTM (sorry i missed this TBR till now)\n\nI'll poke at the following...\n\nhttp://codereview.chromium.org/934002/diff/1/2\nFile webkit/appcache/appcache_update_job_unittest.cc (right):\n\nhttp://codereview.chromium.org/934002/diff/1/2#newcode355\nwebkit/appcache/appcache_update_job_unittest.cc:355: io_thread_shutdown_event_ = new base::WaitableEvent(false, false);\nOh... this reminds me that our posix impl of WaitableEvent isn't robust enough to be used as its being used here. The thread calling Signal() on the event can crash if this thread gets to delete event call prior to the signalling thread returning from the Signal() call.","disapproval":false,"date":"2010-03-18 00:27:30.679445","approval":true},{"sender":"mbelshe@google.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Wed, Mar 17, 2010 at 5:27 PM, <michaeln@chromium.org> wrote:\n\n> LGTM (sorry i missed this TBR till now)\n>\n\nThanks for taking a look!\n\n\n\n>\n> I'll poke at the following...\n>\n\n\n>\n>\n> http://codereview.chromium.org/934002/diff/1/2\n> File webkit/appcache/appcache_update_job_unittest.cc (right):\n>\n> http://codereview.chromium.org/934002/diff/1/2#newcode355\n> webkit/appcache/appcache_update_job_unittest.cc:355:\n>\n> io_thread_shutdown_event_ = new base::WaitableEvent(false, false);\n> Oh... this reminds me that our posix impl of WaitableEvent isn't robust\n> enough to be used as its being used here. The thread calling Signal() on\n> the event can crash if this thread gets to delete event call prior to\n> the signalling thread returning from the Signal() call.\n\n\nOK - is this a bug in our WaitableEvent class?  I think you're saying that\nthere is a race condition there, where the signal occurs, followed by an\nimmediate context switch, the waiting thread then deletes the object, and\nwhen returning to the signalling thread, it will now crash?\n\nDo you know if there is a bug on this?\n\nMike\n\n\n>\n>\n> http://codereview.chromium.org/934002\n>\n","disapproval":false,"date":"2010-03-18 05:27:22.319144","approval":false},{"sender":"michaeln@google.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Wed, Mar 17, 2010 at 10:27 PM, Mike Belshe <mbelshe@google.com> wrote:\n\n> On Wed, Mar 17, 2010 at 5:27 PM, <michaeln@chromium.org> wrote:\n>\n>> LGTM (sorry i missed this TBR till now)\n>>\n>\n> Thanks for taking a look!\n>\n>\n>\n>>\n>> I'll poke at the following...\n>>\n>\n>\n>>\n>>\n>> http://codereview.chromium.org/934002/diff/1/2\n>> File webkit/appcache/appcache_update_job_unittest.cc (right):\n>>\n>> http://codereview.chromium.org/934002/diff/1/2#newcode355\n>> webkit/appcache/appcache_update_job_unittest.cc:355:\n>>\n>> io_thread_shutdown_event_ = new base::WaitableEvent(false, false);\n>> Oh... this reminds me that our posix impl of WaitableEvent isn't robust\n>> enough to be used as its being used here. The thread calling Signal() on\n>> the event can crash if this thread gets to delete event call prior to\n>> the signalling thread returning from the Signal() call.\n>\n>\n> OK - is this a bug in our WaitableEvent class?  I think you're saying that\n> there is a race condition there, where the signal occurs, followed by an\n> immediate context switch, the waiting thread then deletes the object, and\n> when returning to the signalling thread, it will now crash?\n>\n\nYup, that's what I'm saying. I'm not sure if that actually happens or not,\nbut there was a crashing bug that we attributed to that (maybe incorrectly).\nWe worked around it with some additional logic, but if that sequence of\nevents can actually cause a crash... i thought it was very unfriendly\nbehavior for the WaitableEvent class.\n\n\n> Do you know if there is a bug on this?\n>\n\nThere is no bug open for this afaik (also i'm really not sure if that bug\nexists or not, it could be that the crash we were seeing was attributable to\nsomething else).\n\n\n> Mike\n>\n>\n>>\n>>\n>> http://codereview.chromium.org/934002\n>>\n>\n>\n","disapproval":false,"date":"2010-03-18 21:21:47.504218","approval":false}],"owner_email":"mbelshe@chromium.org","private":false,"base_url":"svn://chrome-svn/chrome/trunk/src/","owner":"Mike Belshe","subject":"There was a pre-existing bug in the AppCacheUpdateJobTest where it was not...","created":"2010-03-14 11:35:07.395014","patchsets":[1],"modified":"2011-07-01 18:30:07.093560","closed":true,"commit":false,"issue":934002}