{"files":{"net/third_party/nss/ssl/sslproto.h":{"status":"M    ","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":0,"messages":[{"author":"wtc","author_email":"wtc@chromium.org","text":"\nI hope it's fine to use the exact cipher suite names\n(which have _HMAC) from the RFC.\n\nBy the way, these are called \"protection profiles\" in the\nRFC.  Should we also use that term here?","draft":false,"lineno":242,"date":"2012-04-20 02:02:13.524549","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/20 02:02:13, wtc wrote:\n> \n> I hope it's fine to use the exact cipher suite names\n> (which have _HMAC) from the RFC.\n\nYes, that seems like an improvement.\n\n\n> By the way, these are called \"protection profiles\" in the\n> RFC.  Should we also use that term here?\n\nYes, we should.","draft":false,"lineno":242,"date":"2012-04-26 14:33:42.996940","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/26 14:33:42, ekr wrote:\n> On 2012/04/20 02:02:13, wtc wrote:\n> > By the way, these are called \"protection profiles\" in the\n> > RFC.  Should we also use that term here?\n> \n> Yes, we should.\n\nAny suggestion on how to abbreviate \"ProtectionProfile\"\nif it is too long?\n\nI actually like \"cipher suites\" better.  \"Protection profiles\"\nhave a different meaning in Common Criteria evaluations.","draft":false,"lineno":242,"date":"2012-04-27 17:32:55.975291","left":false}],"id":14004,"is_binary":false},"net/third_party/nss/ssl/ssl.h":{"status":"M    ","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":18,"num_removed":0,"messages":[],"id":14001,"is_binary":false},"net/third_party/nss/ssl/ssl3ext.c":{"status":"M    ","num_chunks":5,"no_base_file":false,"property_changes":"","num_added":194,"num_removed":1,"messages":[{"author":"wtc","author_email":"wtc@chromium.org","text":"\nThe RFC says:\n  If the client detects a nonzero-length MKI in the server's\n  response that is different than the one the client offered,\n  then the client MUST abort the handshake and SHOULD send an\n  invalid_parameter alert.\n\nDue to a limitation of the ssl3_HandleHelloExtensions\nfunction, this is not easy to do.  (See lines 1633-1636.)\nI described this problem before in\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=537356#c52\nand Nelson commented on it in\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=537356#c53.\n\nReturning SECFailure here won't abort the handshake.  It\nwill merely cause the use_srtp extension to be not\nnegotiated.\n\nI hope this deviation from the RFC's requirement is\nacceptable.","draft":false,"lineno":1995,"date":"2012-04-20 02:02:13.524404","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"As a matter of style, I tend to add parentheses wherever I don't immediately know the precedence rules. I believe that you are correct that this is a safe transformation, but I'm not sure I would make it. Matter of house style.","draft":false,"lineno":1897,"date":"2012-04-26 14:33:42.995895","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"Why are these signed? Doesn't the encoding require unsigned values?","draft":false,"lineno":1956,"date":"2012-04-26 14:33:42.996109","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/20 02:02:13, wtc wrote:\n> \n> The RFC says:\n>   If the client detects a nonzero-length MKI in the server's\n>   response that is different than the one the client offered,\n>   then the client MUST abort the handshake and SHOULD send an\n>   invalid_parameter alert.\n> \n> Due to a limitation of the ssl3_HandleHelloExtensions\n> function, this is not easy to do.  (See lines 1633-1636.)\n> I described this problem before in\n> https://bugzilla.mozilla.org/show_bug.cgi?id=537356#c52\n> and Nelson commented on it in\n> https://bugzilla.mozilla.org/show_bug.cgi?id=537356#c53.\n> \n> Returning SECFailure here won't abort the handshake.  It\n> will merely cause the use_srtp extension to be not\n> negotiated.\n> \n> I hope this deviation from the RFC's requirement is\n> acceptable.\n\nDid I misread your comment in c55 where it sounded like you\nwere going to change to be able to abort the handshake with\nSECFailure? I think it would be good to abort the handshake,\neven if we can't generate an error.\n","draft":false,"lineno":1995,"date":"2012-04-26 14:33:42.996314","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"I would change this comment to say\n/* Ignore the extension if we aren't doing DTLS or no DTLS-SRTP preferences have been set */","draft":false,"lineno":2008,"date":"2012-04-26 14:33:42.996527","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"This is arguably slightly less clear because it involves setting found to true multiple times. I don't feel strongly about it. You think clearer because no nested conditionals?","draft":false,"lineno":2038,"date":"2012-04-26 14:33:42.996728","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/26 14:33:42, ekr wrote:\n> As a matter of style, I tend to add parentheses wherever I don't immediately\n> know the precedence rules. I believe that you are correct that this is a safe\n> transformation, but I'm not sure I would make it. Matter of house style.\n\nI removed these parentheses because I found the other\nextender sender functions don't use them.  I seem to recall\ngcc prefers adding parentheses when there is && or ||.\nI can add these parentheses back like this:\n\n  if (append && (maxBytes >= 4 + ext_data_len)) {\n\nbut I think this would be excessive:\n\n  if (append && (maxBytes >= (4 + ext_data_len))) {\n","draft":false,"lineno":1897,"date":"2012-04-27 01:06:09.081882","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/26 14:33:42, ekr wrote:\n> Why are these signed? Doesn't the encoding require unsigned values?\n\nThese two variables are used to store the return value\nof ssl3_ConsumeHandshakeNumber, which is PRInt32.  This\nis why I changed them to PRInt32.\n\nBut I just discovered that these two variables are compared\nwith variables of unsigned types, which would cause MSVC\nwarnings.  So it seems that I should change these back to\nPRUint32?\n\n","draft":false,"lineno":1956,"date":"2012-04-27 01:06:09.082050","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/26 14:33:42, ekr wrote:\n>\n> Did I misread your comment in c55 where it sounded like you\n> were going to change to be able to abort the handshake with\n> SECFailure?\n\nYou read my comment in c55 correctly.  I did volunteer to\ndo that, and in c56 Nelson agreed with my plan.  But for\nsome reason I never got around to doing that :-(\n\n> I think it would be good to abort the handshake,\n> even if we can't generate an error.\n\nBy generating an error, you meant sending an invalid_parameter alert?\n\nIn any case, I should open a new NSS bug report for the\nwork I volunteered to do in c55.","draft":false,"lineno":1995,"date":"2012-04-27 01:06:09.082293","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/26 14:33:42, ekr wrote:\n> This is arguably slightly less clear because it involves setting found to true\n> multiple times. I don't feel strongly about it. You think clearer because no\n> nested conditionals?\n\nThis was my attempt to do\n    bestIndex = i;\nin only one place.\n\nI can change it back to your original code.  But after\nlooking into this, I think the best solution is to imitate\nhow ssl3_HandleClientHello picks a cipher suite:\n- Call ssl3_ConsumeHandshakeVariable to read the entire\n  list of cipher suites into a SECItem.\n- Use nested for loops, with the outer loop iterating over\n  ss->ssl3.dtlsSRTPCiphers[i], to pick a match in our\n  order of preference.","draft":false,"lineno":2038,"date":"2012-04-27 01:06:09.082522","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > As a matter of style, I tend to add parentheses wherever I don't immediately\n> > know the precedence rules. I believe that you are correct that this is a safe\n> > transformation, but I'm not sure I would make it. Matter of house style.\n> \n> I removed these parentheses because I found the other\n> extender sender functions don't use them.  I seem to recall\n> gcc prefers adding parentheses when there is && or ||.\n> I can add these parentheses back like this:\n> \n>   if (append && (maxBytes >= 4 + ext_data_len)) {\n> \n> but I think this would be excessive:\n> \n>   if (append && (maxBytes >= (4 + ext_data_len))) {\n\nIf it were me, I would do the first of these, but really, it's OK as long as you're sure it's OK. I looked at it and it seemed good, but I had to check the precedence table first.","draft":false,"lineno":1897,"date":"2012-04-27 03:36:34.252628","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > Why are these signed? Doesn't the encoding require unsigned values?\n> \n> These two variables are used to store the return value\n> of ssl3_ConsumeHandshakeNumber, which is PRInt32.  This\n> is why I changed them to PRInt32.\n> \n> But I just discovered that these two variables are compared\n> with variables of unsigned types, which would cause MSVC\n> warnings.  So it seems that I should change these back to\n> PRUint32?\n\nOuch, that's not a good state of affairs, esp. since SECFailure = -1.\n\nMaybe we should use PRInt32 and then cast to PRUint32. E.g.,\n\nPRInt32 x;\n\nx = ssl3_ConsumeHandshakeNumber()\n\nif (x == SECFailure)\n  return SECFailure;\n\nPRUint32 y = x & 0xffff;\n\nIt's kind of bad no matter what.\n\n\n\n","draft":false,"lineno":1956,"date":"2012-04-27 03:36:34.252879","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> >\n> > Did I misread your comment in c55 where it sounded like you\n> > were going to change to be able to abort the handshake with\n> > SECFailure?\n> \n> You read my comment in c55 correctly.  I did volunteer to\n> do that, and in c56 Nelson agreed with my plan.  But for\n> some reason I never got around to doing that :-(\n> \n> > I think it would be good to abort the handshake,\n> > even if we can't generate an error.\n> \n> By generating an error, you meant sending an invalid_parameter alert?\n> \n> In any case, I should open a new NSS bug report for the\n> work I volunteered to do in c55.\n\nI think failing with no alert would be satisfactory for now, plus a TODO if you get around to c55.\n\n\n","draft":false,"lineno":1995,"date":"2012-04-27 03:36:34.253114","left":false},{"author":"ekr","author_email":"ekr@rtfm.com","text":"On 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > This is arguably slightly less clear because it involves setting found to true\n> > multiple times. I don't feel strongly about it. You think clearer because no\n> > nested conditionals?\n> \n> This was my attempt to do\n>     bestIndex = i;\n> in only one place.\n> \n> I can change it back to your original code.  But after\n> looking into this, I think the best solution is to imitate\n> how ssl3_HandleClientHello picks a cipher suite:\n> - Call ssl3_ConsumeHandshakeVariable to read the entire\n>   list of cipher suites into a SECItem.\n> - Use nested for loops, with the outer loop iterating over\n>   ss->ssl3.dtlsSRTPCiphers[i], to pick a match in our\n>   order of preference.\n\nI'm not sure I'm knowledgeable enough about SECItem to do this easily. Do you want to try and have me take a look?","draft":false,"lineno":2038,"date":"2012-04-27 03:36:34.253349","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"\nOn 2012/04/27 03:36:34, ekr wrote:\n>\n> Ouch, that's not a good state of affairs, esp. since SECFailure = -1.\n> \n> Maybe we should use PRInt32 and then cast to PRUint32. E.g.,\n> \n> PRInt32 x;\n> \n> x = ssl3_ConsumeHandshakeNumber()\n> \n> if (x == SECFailure)\n>   return SECFailure;\n\nWe can also do\n  if (x < 0)\n    return SECFailure;\n\nThis will get rid of all the negative numbers.\n\n> PRUint32 y = x & 0xffff;\n\ny should be PRUint16, right?  Both cipherLenBytes and\ncipher are 16-bit quantities in the use_srtp extension.\nAh, I see, the 0xffff mask you used truncates it to 16 bits.\nStrictly speaking the masking is not necessary because\nwe ask ssl3_ConsumeHandshakeNumber to read two bytes.\n\n> It's kind of bad no matter what.\n\nYes.  I will look at this more closely next week and\npropose a solution.  I actually like your idea.","draft":false,"lineno":1956,"date":"2012-04-27 17:32:55.974749","left":false},{"author":"wtc","author_email":"wtc@chromium.org","text":"On 2012/04/27 03:36:34, ekr wrote:\n>\n> I'm not sure I'm knowledgeable enough about SECItem to do this easily. Do you\n> want to try and have me take a look?\n\nYes, I'll be happy to do that.  I can make all the changes\nthat I suggested and you agreed with, but I'll need you to\ntest my changes.\n\nPlease wait for a new patch set from me some time next week.","draft":false,"lineno":2038,"date":"2012-04-27 17:32:55.975046","left":false}],"id":14002,"is_binary":false},"net/third_party/nss/ssl/sslt.h":{"status":"M    ","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":2,"num_removed":1,"messages":[],"id":14006,"is_binary":false},"net/third_party/nss/ssl/sslsock.c":{"status":"M    ","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":71,"num_removed":0,"messages":[],"id":14005,"is_binary":false},"net/third_party/nss/ssl/sslimpl.h":{"status":"M    ","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":0,"messages":[],"id":14003,"is_binary":false}},"owner_email":"wtc@chromium.org","owner":"wtc","message":"First full review","try_job_results":[],"created":"2012-04-20 01:31:55.639076","url":null,"num_comments":19,"modified":"2012-04-27 17:32:56.330091","patchset":13001,"issue":9982019}