{"description":"Extensions cleanup: move the chromePrivate, extension, fileBrowserPrivate, and\npageCapture APIs out of schema_generated_bindings.js.\n\nAlso, since there would have been naming confusion otherwise, convert the\nfileBrowserHandler API stuff into the \"custom bindings\" infrastructure.\n\n\nBUG=80310\nTEST=browser_tests (mac, win, linux, linux_chromeos)\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=117864","cc":["chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"reviewers":["aa@chromium.org"],"messages":[{"sender":"kalman@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","aa@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"","disapproval":false,"date":"2012-01-16 07:38:27.916122","approval":false},{"sender":"kalman@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","aa@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"The leaves only 3 specific things* to pull out of schema_generated_bindings:\n - \"webstorePrivate\" stuff -- but there's a TODO to delete that soon, so seems like wasted effort to pull the file out.\n - \"devtools\" stuff -- but this puzzles me because part of it is in experimental (and has its own custom stuff already), and part of it isn't.  I'll look into this more.\n - \"test\" stuff -- but this should be thought about separately, perhaps we shouldn't even be setting up test unless it's a test?\n\n*(plus koz's stuff which he's about to submit)","disapproval":false,"date":"2012-01-16 07:50:17.716521","approval":false},{"sender":"aa@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","aa@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"LGTM, but idea for later simplification below...\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js\nFile chrome/renderer/resources/extensions/schema_generated_bindings.js (right):\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode251\nchrome/renderer/resources/extensions/schema_generated_bindings.js:251: APIFunctions.prototype.register = function(apiName, apiFunction) {\nIt seems that the interaction between this code and custom bindings could be simplified if this class was only a set of hooks. Like:\n\nfunction FunctionHooks() {\n  this._functions = {};\n}\n\nFunctionHooks.prototype.setHook = function(fullyQualifiedFunctionName, hookName, hook) {\n  if (!this._functions[fullyQualifiedFunctionName])\n    this._functions[fullyQualifiedFunctionName] = {};\n\n  this._functions[fullyQualifiedFunctionName][hookName] = hook;\n}\n\nFunctionHooks.prototype.getHook = function(fqfn, hookName, args) {\n  return this._functions[fqfn] && this._functions[fqfn][hookName];\n}\n\nGetChromeHidden().functionHooks = new FunctionHooks();\n\n// In generated bindings\nvar hook = GetChromeHidden().functionHooks.getHook(functionName, 'customCallback');\nif (hook)\n  hook.apply(null, ...);\n\n\n// In foo_custom_bindings.js\nGetChromeHidden().functionHooks.setHook('foo.doMonkey', 'customCallback', function(a, b, c) {\n  ...\n});\n\nWDYT?\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode306\nchrome/renderer/resources/extensions/schema_generated_bindings.js:306: chromeHidden.registerCustomHook = function(namespace, fn) {\nWhat about something like chromeHidden.onBindingsGenerated?\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode554\nchrome/renderer/resources/extensions/schema_generated_bindings.js:554: }).bind(apiFunction);\nIt's always been weird the way we pass extra parameters to the custom handlers through |this| here. Is it possible to make this just a normal function that gets things like functionDef and apiDef from its closure?\n\nI think this might mean that some extra things might need to get passed explicitly through the hook functions, but I think that would be much more clear.","disapproval":false,"date":"2012-01-16 09:12:44.284513","approval":true},{"sender":"aa@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"On 2012/01/16 09:12:44, Aaron Boodman wrote:\n> LGTM, but idea for later simplification below...\n> \n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js\n> File chrome/renderer/resources/extensions/schema_generated_bindings.js (right):\n> \n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode251\n> chrome/renderer/resources/extensions/schema_generated_bindings.js:251:\n> APIFunctions.prototype.register = function(apiName, apiFunction) {\n> It seems that the interaction between this code and custom bindings could be\n> simplified if this class was only a set of hooks. Like:\n> \n> function FunctionHooks() {\n>   this._functions = {};\n> }\n> \n> FunctionHooks.prototype.setHook = function(fullyQualifiedFunctionName, hookName,\n> hook) {\n>   if (!this._functions[fullyQualifiedFunctionName])\n>     this._functions[fullyQualifiedFunctionName] = {};\n> \n>   this._functions[fullyQualifiedFunctionName][hookName] = hook;\n> }\n> \n> FunctionHooks.prototype.getHook = function(fqfn, hookName, args) {\n>   return this._functions[fqfn] && this._functions[fqfn][hookName];\n> }\n> \n> GetChromeHidden().functionHooks = new FunctionHooks();\n> \n> // In generated bindings\n> var hook = GetChromeHidden().functionHooks.getHook(functionName,\n> 'customCallback');\n> if (hook)\n>   hook.apply(null, ...);\n> \n> \n> // In foo_custom_bindings.js\n> GetChromeHidden().functionHooks.setHook('foo.doMonkey', 'customCallback',\n> function(a, b, c) {\n>   ...\n> });\n> \n> WDYT?\n\nIn particular this would remove the need for the 'register' method, and the custom bindings files would not need to wait for a callback to register hooks - they could do it immediately.\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode306\n> chrome/renderer/resources/extensions/schema_generated_bindings.js:306:\n> chromeHidden.registerCustomHook = function(namespace, fn) {\n> What about something like chromeHidden.onBindingsGenerated?\n> \n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode554\n> chrome/renderer/resources/extensions/schema_generated_bindings.js:554:\n> }).bind(apiFunction);\n> It's always been weird the way we pass extra parameters to the custom handlers\n> through |this| here. Is it possible to make this just a normal function that\n> gets things like functionDef and apiDef from its closure?\n> \n> I think this might mean that some extra things might need to get passed\n> explicitly through the hook functions, but I think that would be much more\n> clear.","disapproval":false,"date":"2012-01-16 09:14:06.223625","approval":false},{"sender":"kalman@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js\nFile chrome/renderer/resources/extensions/schema_generated_bindings.js (right):\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode251\nchrome/renderer/resources/extensions/schema_generated_bindings.js:251: APIFunctions.prototype.register = function(apiName, apiFunction) {\nOn 2012/01/16 09:12:44, Aaron Boodman wrote:\n> It seems that the interaction between this code and custom bindings could be\n> simplified if this class was only a set of hooks. Like:\n> \n> function FunctionHooks() {\n>   this._functions = {};\n> }\n> \n> FunctionHooks.prototype.setHook = function(fullyQualifiedFunctionName, hookName,\n> hook) {\n>   if (!this._functions[fullyQualifiedFunctionName])\n>     this._functions[fullyQualifiedFunctionName] = {};\n> \n>   this._functions[fullyQualifiedFunctionName][hookName] = hook;\n> }\n> \n> FunctionHooks.prototype.getHook = function(fqfn, hookName, args) {\n>   return this._functions[fqfn] && this._functions[fqfn][hookName];\n> }\n> \n> GetChromeHidden().functionHooks = new FunctionHooks();\n> \n> // In generated bindings\n> var hook = GetChromeHidden().functionHooks.getHook(functionName,\n> 'customCallback');\n> if (hook)\n>   hook.apply(null, ...);\n> \n> \n> // In foo_custom_bindings.js\n> GetChromeHidden().functionHooks.setHook('foo.doMonkey', 'customCallback',\n> function(a, b, c) {\n>   ...\n> });\n> \n> WDYT?\n\nYeah I'd planned on doing this, but doing it this way was easier at the time.  I agree it would be simpler, should do in a follow-up.\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode306\nchrome/renderer/resources/extensions/schema_generated_bindings.js:306: chromeHidden.registerCustomHook = function(namespace, fn) {\nOn 2012/01/16 09:12:44, Aaron Boodman wrote:\n> What about something like chromeHidden.onBindingsGenerated?\n\nThe reason I used the name \"register...\" rather than an event is because you need to access the platform an API runs on (found this out the debugging way).  The way I did this was passing in the API name when you register, which looks up the API schema and compares the \"platform\" property to the current platform and all that.\n\nSo an event-like name looked slightly out of place, since it implies something like\n\nchromeHidden.onBindingsGenerated = new chrome.Event()\n\nwhich wouldn't work I think, since listeners can't give any context using addListener().\n\nI agree that hook isn't a particularly descriptive name though, definitely could be more useful.\n\nhttp://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode554\nchrome/renderer/resources/extensions/schema_generated_bindings.js:554: }).bind(apiFunction);\nOn 2012/01/16 09:12:44, Aaron Boodman wrote:\n> It's always been weird the way we pass extra parameters to the custom handlers\n> through |this| here. Is it possible to make this just a normal function that\n> gets things like functionDef and apiDef from its closure?\n> \n> I think this might mean that some extra things might need to get passed\n> explicitly through the hook functions, but I think that would be much more\n> clear.\n\nYeah, all this code is a bit haphazard. Fix up in a follow-up though..?","disapproval":false,"date":"2012-01-16 14:20:35.826936","approval":false},{"sender":"kalman@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"(btw: thanks)","disapproval":false,"date":"2012-01-16 14:21:18.690538","approval":false},{"sender":"aa@chromium.org","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Mon, Jan 16, 2012 at 6:20 AM,  <kalman@chromium.org> wrote:\n>\n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js\n> File chrome/renderer/resources/extensions/schema_generated_bindings.js\n> (right):\n>\n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode251\n> chrome/renderer/resources/extensions/schema_generated_bindings.js:251:\n> APIFunctions.prototype.register = function(apiName, apiFunction) {\n> On 2012/01/16 09:12:44, Aaron Boodman wrote:\n>>\n>> It seems that the interaction between this code and custom bindings\n>\n> could be\n>>\n>> simplified if this class was only a set of hooks. Like:\n>\n>\n>> function FunctionHooks() {\n>>   this._functions = {};\n>> }\n>\n>\n>> FunctionHooks.prototype.setHook = function(fullyQualifiedFunctionName,\n>\n> hookName,\n>>\n>> hook) {\n>>   if (!this._functions[fullyQualifiedFunctionName])\n>>     this._functions[fullyQualifiedFunctionName] = {};\n>\n>\n>>   this._functions[fullyQualifiedFunctionName][hookName] = hook;\n>> }\n>\n>\n>> FunctionHooks.prototype.getHook = function(fqfn, hookName, args) {\n>>   return this._functions[fqfn] && this._functions[fqfn][hookName];\n>> }\n>\n>\n>> GetChromeHidden().functionHooks = new FunctionHooks();\n>\n>\n>> // In generated bindings\n>> var hook = GetChromeHidden().functionHooks.getHook(functionName,\n>> 'customCallback');\n>> if (hook)\n>>   hook.apply(null, ...);\n>\n>\n>\n>> // In foo_custom_bindings.js\n>> GetChromeHidden().functionHooks.setHook('foo.doMonkey',\n>\n> 'customCallback',\n>>\n>> function(a, b, c) {\n>>   ...\n>> });\n>\n>\n>> WDYT?\n>\n>\n> Yeah I'd planned on doing this, but doing it this way was easier at the\n> time.  I agree it would be simpler, should do in a follow-up.\n>\n>\n> http://codereview.chromium.org/9228002/diff/2001/chrome/renderer/resources/extensions/schema_generated_bindings.js#newcode306\n> chrome/renderer/resources/extensions/schema_generated_bindings.js:306:\n> chromeHidden.registerCustomHook = function(namespace, fn) {\n> On 2012/01/16 09:12:44, Aaron Boodman wrote:\n>>\n>> What about something like chromeHidden.onBindingsGenerated?\n>\n>\n> The reason I used the name \"register...\" rather than an event is because\n> you need to access the platform an API runs on (found this out the\n> debugging way).  The way I did this was passing in the API name when you\n> register, which looks up the API schema and compares the \"platform\"\n> property to the current platform and all that.\n>\n> So an event-like name looked slightly out of place, since it implies\n> something like\n>\n> chromeHidden.onBindingsGenerated = new chrome.Event()\n>\n> which wouldn't work I think, since listeners can't give any context\n> using addListener().\n>\n> I agree that hook isn't a particularly descriptive name though,\n> definitely could be more useful.\n\nSorry, I actually meant to remove this comment as it doesn't make\nsense with the other two (if FunctionHooks is available and works from\nthe start, then this API with the callback is no longer required).\n\n- a\n","disapproval":false,"date":"2012-01-16 16:56:44.483520","approval":false},{"sender":"commit-bot@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/kalman@chromium.org/9228002/1025","disapproval":false,"date":"2012-01-16 23:24:11.210947","approval":false},{"sender":"commit-bot@chromium.org","recipients":["kalman@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org","koz@chromium.org"],"text":"Change committed as 117864","disapproval":false,"date":"2012-01-17 00:38:38.873813","approval":false}],"owner_email":"kalman@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"kalman","subject":"Extensions cleanup: move the chromePrivate, extension, fileBrowserPrivate, and","created":"2012-01-16 04:12:56.111344","patchsets":[1,2001,1025],"modified":"2012-01-17 00:38:38.968499","closed":true,"commit":false,"issue":9228002}