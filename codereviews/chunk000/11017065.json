{"description":"[Chromoting] Added support of a list of desktop sessions on the daemon side.\n\nDaemonProcess object keeps a list of active desktop sessions, each representing the screen, input devices, etc to be remoted to another machine. The network process is expected to request a desktop session to be opened once a connection has been accepted and closed when the client session is destroyed. This CL includes changes on the daemon side only.\n\nBUG=134694\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=162520","cc":["chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"reviewers":["wez@chromium.org"],"messages":[{"sender":"alexeypa@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"PTAL or let me know if you are busy.","disapproval":false,"date":"2012-10-10 22:08:30.988690","approval":false},{"sender":"alexeypa@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"ping","disapproval":false,"date":"2012-10-12 14:53:49.782420","approval":false},{"sender":"alexeypa@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"Ping... Ping... Ping...","disapproval":false,"date":"2012-10-16 01:12:37.310650","approval":false},{"sender":"wez@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"Looking pretty good. :)\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/chromoting_messages.h\nFile remoting/host/chromoting_messages.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/chromoting_messages.h#newcode19\nremoting/host/chromoting_messages.h:19: IPC_MESSAGE_CONTROL1(ChromotingDaemonNetworkMsg_DesktopSessionClosed,\nnit: I think this should use the same terminology as the IPCs below.  If you call the APIs below TerminalConnected and TerminalDisconnected then this would become DisconnectTerminal, for example.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode40\nremoting/host/daemon_process.cc:40: // Reset the last known desktop session ID to the initial value.\nnit: Why? :)\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode52\nremoting/host/daemon_process.cc:52: IPC_MESSAGE_HANDLER(ChromotingNetworkHostMsg_ConnectTerminal,\nnit: Only two-space indent the handler definitions.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode69\nremoting/host/daemon_process.cc:69: // Validate the supplied desktop session ID. An invalid ID (from a wrong\nnit: What does \"from a wrong range\" mean?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode74\nremoting/host/daemon_process.cc:74: << \" desktop_session_id=\" << desktop_session_id;\nIf you never expect this to happen in reality then consider LOG(FATAL) rather than re-starting the network process, so that we'll get corresponding crash reports.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nnit: notifies the other party?\nnit: clean up?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nWhat you mean is that CloseDesktopSession() may be triggered by either the daemon process in response to the desktop session being closed, or by the network process in response to client disconnect, so we'll often get it called twice during teardown of a desktop session?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode90\nremoting/host/daemon_process.cc:90: if (i != desktop_sessions_.end()) {\nnit: Consider reversing this test to trigger an early-exit.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode139\nremoting/host/daemon_process.cc:139: // Validate the supplied desktop session ID. An invalid ID (from a wrong\nWrong range means...?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode144\nremoting/host/daemon_process.cc:144: << \" desktop_session_id=\" << desktop_session_id;\nSee comment above re LOG(FATAL)\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode166\nremoting/host/daemon_process.cc:166: void DaemonProcess::CloseAllDesktopSessions() {\nnit: CloseAllDesktopSessions() implies it's equivalent to calling CloseDesktopSession() for all the desktops; should it be DeleteAllDesktopSessions()?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h\nFile remoting/host/daemon_process.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode59\nremoting/host/daemon_process.h:59: virtual void Send(IPC::Message* message) = 0;\nnit: This should be re-named to make it clear it won't send to desktop processes, e.g. SendToNetwork or SendNetworkIPC\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode73\nremoting/host/daemon_process.h:73: void CreateDesktopSession(int desktop_session_id);\nOK, it really feels like all this logic belongs in a DesktopSessionManager; that might be passed the DesktopSessionFactory to use to actually create desktops, for example.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc\nFile remoting/host/daemon_process_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode57\nremoting/host/daemon_process_unittest.cc:57: class MockDesktopSession : public DesktopSession {\nIs the intent that there will be methods to be mocked on this object in future?\n\nConsider defining these mocks in their own remoting/host/win/host_mock_objects.h\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode112\nremoting/host/daemon_process_unittest.cc:112: void DeleteDaemonProcess();\nTearDown always calls Stop() on the daemon process, though, so surely calling this will crash the test?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode144\nremoting/host/daemon_process_unittest.cc:144: base::Unretained(this)));\nReminds me... I must land AutoThread, which tweaks AutoThreadTaskRunner to always call the shutdown task on the underlying task runner, so you can just pass QuitClosure() for cases like this...\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode149\nremoting/host/daemon_process_unittest.cc:149: task_runner_ = NULL;\nIf you're going to NULL |task_runner_| then it doesn't need to be a test member, does it?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode218\nremoting/host/daemon_process_unittest.cc:218: TEST_F(DaemonProcessTest, DirectClose) {\nnit: Suggest CallCloseDesktopSession\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode239\nremoting/host/daemon_process_unittest.cc:239: TEST_F(DaemonProcessTest, DoubleClose) {\nnit: DoubleDisconnectTerminal\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode267\nremoting/host/daemon_process_unittest.cc:267: TEST_F(DaemonProcessTest, InvalidClose) {\nnit: InvalidDisconnectTerminal\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode287\nremoting/host/daemon_process_unittest.cc:287: TEST_F(DaemonProcessTest, InvalidOpen) {\nnit: InvalidConnectTerminal\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc\nFile remoting/host/daemon_process_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode49\nremoting/host/daemon_process_win.cc:49: // |monitor| must outlive |this|.\nWhat is |monitor|? ;)\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode71\nremoting/host/daemon_process_win.cc:71: scoped_ptr<WorkerProcessLauncher> launcher_;\nnit: network_launcher_ or network_process_\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode137\nremoting/host/daemon_process_win.cc:137: launcher_->Restart();\nWhy do you prefer to add a Restart() method rather than tear-down the launcher and create a new one?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h\nFile remoting/host/desktop_session.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h#newcode16\nremoting/host/desktop_session.h:16: // code.\nSuggest \"Represents the desktop session for a connected terminal.  Each desktop session has a unique identifier used by cross-platform code to refer to it.\"\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h#newcode21\nremoting/host/desktop_session.h:21: DaemonProcess* daemon_process() const { return daemon_process_; }\nDoes this need to be in the public interface?  Won't the caller own the DaemonProcess, in effect?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc\nFile remoting/host/desktop_session_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc#newcode85\nremoting/host/desktop_session_win.cc:85: // Create the delegate knowing how to launch a process in a session.\nnit: Reword: \"Create a delegate to a process into the session\"\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc#newcode93\nremoting/host/desktop_session_win.cc:93: // Create a per-session launcher that will start the host process.\nnit: Reword: \"Create a launcher for the desktop process, using the per-session delegate\"\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h\nFile remoting/host/desktop_session_win.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode25\nremoting/host/desktop_session_win.h:25: // Represents the physical console. Implements |WorkerProcessIpcDelegate| to\nnit: Suggest \"DesktopSession implementation which attaches to the host's physical console.  Receives IPC messages from the desktop process, running in the console session, via |WorkerProcessIpcDelegate|, and monitors console session attach/detach events via |WtsConsoleObserer|.\"\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode31\nremoting/host/desktop_session_win.h:31: class DesktopSessionWin\nnit: This seems to be implementation, not plumbing?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode31\nremoting/host/desktop_session_win.h:31: class DesktopSessionWin\nnit: ConsoleDesktopSession[Win]?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode54\nremoting/host/desktop_session_win.h:54: // The task runner all public methods of this class should be called on.\nnit: Reword \"Task runner on which public methods of this class...\"\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode66\nremoting/host/desktop_session_win.h:66: // This pointer is used to unsubscribe from session attach and detach events.\nnit: \"Pointer used to...\"","disapproval":false,"date":"2012-10-16 04:27:03.011780","approval":false},{"sender":"alexeypa@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"I also renamed desktop_session_id back to terminal_id. Everywhere it is used it is really a terminal ID (it is allocated on the network process side) and we just choosed desktop session IDs to match terminal IDs.\n\nPTAL.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/chromoting_messages.h\nFile remoting/host/chromoting_messages.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/chromoting_messages.h#newcode19\nremoting/host/chromoting_messages.h:19: IPC_MESSAGE_CONTROL1(ChromotingDaemonNetworkMsg_DesktopSessionClosed,\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: I think this should use the same terminology as the IPCs below.  If you\n> call the APIs below TerminalConnected and TerminalDisconnected then this would\n> become DisconnectTerminal, for example.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode40\nremoting/host/daemon_process.cc:40: // Reset the last known desktop session ID to the initial value.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Why? :)\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode52\nremoting/host/daemon_process.cc:52: IPC_MESSAGE_HANDLER(ChromotingNetworkHostMsg_ConnectTerminal,\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Only two-space indent the handler definitions.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode69\nremoting/host/daemon_process.cc:69: // Validate the supplied desktop session ID. An invalid ID (from a wrong\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: What does \"from a wrong range\" mean?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode74\nremoting/host/daemon_process.cc:74: << \" desktop_session_id=\" << desktop_session_id;\nOn 2012/10/16 04:27:03, Wez wrote:\n> If you never expect this to happen in reality then consider LOG(FATAL) rather\n> than re-starting the network process, so that we'll get corresponding crash\n> reports.\n\nWe are crossing a privilege boundary here. The ID is generated by a less privileged process validated by a more privileged process. If we crash it would mean that the 1st process would be able to crash the 2nd one. I think restarting the process is a proper action. We could also ask the lest privileged process to crash instead. This will be a follow up CL then.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: notifies the other party?\n> nit: clean up?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nOn 2012/10/16 04:27:03, Wez wrote:\n> What you mean is that CloseDesktopSession() may be\n> triggered by either the daemon process in response \n> to the desktop session being closed, or by the\n> network process in response to client disconnect,\n\nYes.\n\n> so we'll often get it called\n> twice during teardown of a desktop session?\n\nNo. I mean that those two events could happen simultaneously.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode90\nremoting/host/daemon_process.cc:90: if (i != desktop_sessions_.end()) {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Consider reversing this test to trigger an early-exit.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode139\nremoting/host/daemon_process.cc:139: // Validate the supplied desktop session ID. An invalid ID (from a wrong\nOn 2012/10/16 04:27:03, Wez wrote:\n> Wrong range means...?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode144\nremoting/host/daemon_process.cc:144: << \" desktop_session_id=\" << desktop_session_id;\nOn 2012/10/16 04:27:03, Wez wrote:\n> See comment above re LOG(FATAL)\n\nSee my response to that comment.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode166\nremoting/host/daemon_process.cc:166: void DaemonProcess::CloseAllDesktopSessions() {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: CloseAllDesktopSessions() implies it's equivalent to calling\n> CloseDesktopSession() for all the desktops; should it be\n> DeleteAllDesktopSessions()?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h\nFile remoting/host/daemon_process.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode59\nremoting/host/daemon_process.h:59: virtual void Send(IPC::Message* message) = 0;\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: This should be re-named to make it clear it won't send to desktop\n> processes, e.g. SendToNetwork or SendNetworkIPC\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode73\nremoting/host/daemon_process.h:73: void CreateDesktopSession(int desktop_session_id);\nOn 2012/10/16 04:27:03, Wez wrote:\n> OK, it really feels like all this logic belongs in a DesktopSessionManager; that\n> might be passed the DesktopSessionFactory to use to actually create desktops,\n> for example.\n\nDaemonProcess is that \"DesktopSessionManager\". Really, managing desktop sessions is 50% of what it is supposed to do. I don't think there is value in separating \"DesktopSessionManager\" out. It will add more boilerplate code without any benefit.\n\n\"DesktopSessionManager\" makes sense on the other side - in the network/host process. There HospProcess is too large so it pays off to split it into smaller pieces.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc\nFile remoting/host/daemon_process_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode57\nremoting/host/daemon_process_unittest.cc:57: class MockDesktopSession : public DesktopSession {\nOn 2012/10/16 04:27:03, Wez wrote:\n> Is the intent that there will be methods to be mocked on this object in future?\n\nRenamed to FakeDesktopSession. The test needs it in order to be able to create DesktopSession instances.\n\n> Consider defining these mocks in their own remoting/host/win/host_mock_objects.h\n\nWill do once there is need to share any of the mock objects.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode112\nremoting/host/daemon_process_unittest.cc:112: void DeleteDaemonProcess();\nOn 2012/10/16 04:27:03, Wez wrote:\n> TearDown always calls Stop() on the daemon process, though, so surely calling\n> this will crash the test?\n\nIf it is called in wrong time - yes. But it is passed as a callback to stoppable. The object is deleted when is it completely stopped and it is fine to delete it.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode144\nremoting/host/daemon_process_unittest.cc:144: base::Unretained(this)));\nOn 2012/10/16 04:27:03, Wez wrote:\n> Reminds me... I must land AutoThread, which tweaks AutoThreadTaskRunner to\n> always call the shutdown task on the underlying task runner, so you can just\n> pass QuitClosure() for cases like this...\n\nAck.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode149\nremoting/host/daemon_process_unittest.cc:149: task_runner_ = NULL;\nOn 2012/10/16 04:27:03, Wez wrote:\n> If you're going to NULL |task_runner_| then it doesn't need to be a test member,\n> does it?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode218\nremoting/host/daemon_process_unittest.cc:218: TEST_F(DaemonProcessTest, DirectClose) {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Suggest CallCloseDesktopSession\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode239\nremoting/host/daemon_process_unittest.cc:239: TEST_F(DaemonProcessTest, DoubleClose) {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: DoubleDisconnectTerminal\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode267\nremoting/host/daemon_process_unittest.cc:267: TEST_F(DaemonProcessTest, InvalidClose) {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: InvalidDisconnectTerminal\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_unittest.cc#newcode287\nremoting/host/daemon_process_unittest.cc:287: TEST_F(DaemonProcessTest, InvalidOpen) {\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: InvalidConnectTerminal\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc\nFile remoting/host/daemon_process_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode49\nremoting/host/daemon_process_win.cc:49: // |monitor| must outlive |this|.\nOn 2012/10/16 04:27:03, Wez wrote:\n> What is |monitor|? ;)\n\nIt is from a different CL. Removed.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode71\nremoting/host/daemon_process_win.cc:71: scoped_ptr<WorkerProcessLauncher> launcher_;\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: network_launcher_ or network_process_\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process_win.cc#newcode137\nremoting/host/daemon_process_win.cc:137: launcher_->Restart();\nOn 2012/10/16 04:27:03, Wez wrote:\n> Why do you prefer to add a Restart() method rather than tear-down the launcher\n> and create a new one?\n\nGood point.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h\nFile remoting/host/desktop_session.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h#newcode16\nremoting/host/desktop_session.h:16: // code.\nOn 2012/10/16 04:27:03, Wez wrote:\n> Suggest \"Represents the desktop session for a connected terminal.  Each desktop\n> session has a unique identifier used by cross-platform code to refer to it.\"\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session.h#newcode21\nremoting/host/desktop_session.h:21: DaemonProcess* daemon_process() const { return daemon_process_; }\nOn 2012/10/16 04:27:03, Wez wrote:\n> Does this need to be in the public interface?\n\nMade it protected.\n\n> Won't the caller own the DaemonProcess, in effect?\n\nNo, it is called by DesktopSessionWin.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc\nFile remoting/host/desktop_session_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc#newcode85\nremoting/host/desktop_session_win.cc:85: // Create the delegate knowing how to launch a process in a session.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Reword: \"Create a delegate to a process into the session\"\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.cc#newcode93\nremoting/host/desktop_session_win.cc:93: // Create a per-session launcher that will start the host process.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Reword: \"Create a launcher for the desktop process, using the per-session\n> delegate\"\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h\nFile remoting/host/desktop_session_win.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode25\nremoting/host/desktop_session_win.h:25: // Represents the physical console. Implements |WorkerProcessIpcDelegate| to\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Suggest \"DesktopSession implementation which attaches to the host's\n> physical console.  Receives IPC messages from the desktop process, running in\n> the console session, via |WorkerProcessIpcDelegate|, and monitors console\n> session attach/detach events via |WtsConsoleObserer|.\"\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode31\nremoting/host/desktop_session_win.h:31: class DesktopSessionWin\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: This seems to be implementation, not plumbing?\n\nI updated the CL description.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode31\nremoting/host/desktop_session_win.h:31: class DesktopSessionWin\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: ConsoleDesktopSession[Win]?\n\nNo, I think it should be more generic. There will be no separate DesktopSessionWin when RDP integration code will be in place. Instead WtsConsoleObserver will be replaced with an interface that will monitor a specified desktop session (teh console session or a specific RDP session).\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode54\nremoting/host/desktop_session_win.h:54: // The task runner all public methods of this class should be called on.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: Reword \"Task runner on which public methods of this class...\"\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/desktop_session_win.h#newcode66\nremoting/host/desktop_session_win.h:66: // This pointer is used to unsubscribe from session attach and detach events.\nOn 2012/10/16 04:27:03, Wez wrote:\n> nit: \"Pointer used to...\"\n\nDone.","disapproval":false,"date":"2012-10-16 16:48:09.440020","approval":false},{"sender":"wez@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"LGTM w/ nits.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode74\nremoting/host/daemon_process.cc:74: << \" desktop_session_id=\" << desktop_session_id;\nOn 2012/10/16 16:48:09, alexeypa wrote:\n> On 2012/10/16 04:27:03, Wez wrote:\n> > If you never expect this to happen in reality then consider LOG(FATAL) rather\n> > than re-starting the network process, so that we'll get corresponding crash\n> > reports.\n> \n> We are crossing a privilege boundary here. The ID is generated by a less\n> privileged process validated by a more privileged process. If we crash it would\n> mean that the 1st process would be able to crash the 2nd one. I think restarting\n> the process is a proper action. We could also ask the lest privileged process to\n> crash instead. This will be a follow up CL then.\n\nThe less-privileged process is instead triggering logging, which is clearly less-bad but still a potential issue unless we limit logging in some way. :-/  I don't think a controlled crash is a problem here, since although it's a less-privileged process, it's _our_ less-privileged process, so badly-formed data from it indicates it's compromised, in which case crashing our host is probably the least of the issues with the host system.  Let's discuss how to handle this for a follow-up CL though.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nOn 2012/10/16 16:48:09, alexeypa wrote:\n> On 2012/10/16 04:27:03, Wez wrote:\n> > What you mean is that CloseDesktopSession() may be\n> > triggered by either the daemon process in response \n> > to the desktop session being closed, or by the\n> > network process in response to client disconnect,\n> \n> Yes.\n> \n> > so we'll often get it called\n> > twice during teardown of a desktop session?\n> \n> No. I mean that those two events could happen simultaneously.\n> \n\nAnd the events get queued & processed by the same thread, so it ends up getting called twice, surely?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h\nFile remoting/host/daemon_process.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode73\nremoting/host/daemon_process.h:73: void CreateDesktopSession(int desktop_session_id);\nOn 2012/10/16 16:48:09, alexeypa wrote:\n> On 2012/10/16 04:27:03, Wez wrote:\n> > OK, it really feels like all this logic belongs in a DesktopSessionManager;\n> that\n> > might be passed the DesktopSessionFactory to use to actually create desktops,\n> > for example.\n> \n> DaemonProcess is that \"DesktopSessionManager\". Really, managing desktop sessions\n> is 50% of what it is supposed to do. I don't think there is value in separating\n> \"DesktopSessionManager\" out. It will add more boilerplate code without any\n> benefit.\n> \n> \"DesktopSessionManager\" makes sense on the other side - in the network/host\n> process. There HospProcess is too large so it pays off to split it into smaller\n> pieces.\n\nDaemonProcess also manages the network process, and may in future perform other functions; the desktop session management feels like a natural fit for hiving off into its own component for DaemonProcess to use.  Not an issue for this CL, though.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode20\nremoting/host/daemon_process.cc:20: CHECK(!config_watcher_.get());\nnit: Should these be DCHECKs?  Should there be a state == stopped check here, too?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode24\nremoting/host/daemon_process.cc:24: void DaemonProcess::OnConfigUpdated(const std::string& serialized_config) {\nnit: Are this and OnConfigWatcherError called on any particular thread?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode42\nremoting/host/daemon_process.cc:42: // by the the newly started process yet.\nnit: One thing that wasn't clear to me from the previous CL is that there's a convention that terminal IDs start from zero whenever the network process is started.  See my suggestions re terminal-ID handling, below.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode51\nremoting/host/daemon_process.cc:51: DCHECK(caller_task_runner()->BelongsToCurrentThread());\nnit: Seems really strange that we do IPC I/O on the non-I/O thread; perhaps clarify what the two are used for in the Create() comment?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode73\nremoting/host/daemon_process.cc:73: // with the ID that couldn't possibly be allocated is considered a protocol\ntypo: the -> an\ntypo: be allocated -> have been allocated yet\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode75\nremoting/host/daemon_process.cc:75: if (!IsTerminalIdKnown(terminal_id)) {\nThis check gets progressively weaker as time goes on. Why not keep track (e.g. with std::set<>) of the IDs the network process has \"connected\", and clear them up when it asks to disconnect?\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session.h\nFile remoting/host/desktop_session.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session.h#newcode16\nremoting/host/desktop_session.h:16: // has a unique identifier used by cross-platform to refer to it.\ntypo: cross-platform -> cross-platform code\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session_win.h\nFile remoting/host/desktop_session_win.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session_win.h#newcode38\nremoting/host/desktop_session_win.h:38: // events. Both |daemon_process| and |monitor| should outlive |this|.\nnit: should -> must\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/remoting_me2me_host.cc\nFile remoting/host/remoting_me2me_host.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/remoting_me2me_host.cc#newcode282\nremoting/host/remoting_me2me_host.cc:282: IPC_MESSAGE_HANDLER(ChromotingDaemonNetworkMsg_Configuration,\nnit: Two spaces","disapproval":false,"date":"2012-10-16 21:53:20.156300","approval":true},{"sender":"alexeypa@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.cc#newcode89\nremoting/host/daemon_process.cc:89: // notifies the party if there was something to clean.\nOn 2012/10/16 21:53:20, Wez wrote:\n> And the events get queued & processed by the same thread, so it ends up getting\n> called twice, surely?\n\nIt can be called twice. It has very low chances of happening.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h\nFile remoting/host/daemon_process.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/7001/remoting/host/daemon_process.h#newcode73\nremoting/host/daemon_process.h:73: void CreateDesktopSession(int desktop_session_id);\nOn 2012/10/16 21:53:20, Wez wrote:\n> DaemonProcess also manages the network process, and may in\n> future perform other functions; the desktop session\n> management feels like a natural fit for hiving\n> off into its own component for DaemonProcess to use.\n\nThis is exactly the reason why we have so much boilerplate code. Instead of a single class we end up with two (or even three) classes and an interface. They will have to know enough about each other to be able to pass messages between desktop and network channels. It is only worth it when the parts are complex enough, otherwise it will be tons of worthless code.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc\nFile remoting/host/daemon_process.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode20\nremoting/host/daemon_process.cc:20: CHECK(!config_watcher_.get());\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: Should these be DCHECKs?\n\nDone.\n\n> Should there be a state == stopped check here, too?\n\nIt should be in the most derived class. It is present in DaemonProcessWin.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode24\nremoting/host/daemon_process.cc:24: void DaemonProcess::OnConfigUpdated(const std::string& serialized_config) {\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: Are this and OnConfigWatcherError called on any particular thread?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode42\nremoting/host/daemon_process.cc:42: // by the the newly started process yet.\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: One thing that wasn't clear to me from the previous CL is that there's a\n> convention that terminal IDs start from zero whenever the network process is\n> started.  See my suggestions re terminal-ID handling, below.\n\nAck.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode51\nremoting/host/daemon_process.cc:51: DCHECK(caller_task_runner()->BelongsToCurrentThread());\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: Seems really strange that we do IPC I/O on the non-I/O thread; \n\nThis is how ChannelProxy works.\n\n> clarify what the two are used for in the Create() comment?\n\nI added the comment, but I'm getting too verbose. The purpose of both task runners is explained next to the corresponding data members definitions.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode73\nremoting/host/daemon_process.cc:73: // with the ID that couldn't possibly be allocated is considered a protocol\nOn 2012/10/16 21:53:20, Wez wrote:\n> typo: the -> an\n> typo: be allocated -> have been allocated yet\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/daemon_process.cc#newcode75\nremoting/host/daemon_process.cc:75: if (!IsTerminalIdKnown(terminal_id)) {\nOn 2012/10/16 21:53:20, Wez wrote:\n> This check gets progressively weaker as time goes on. Why not keep track (e.g.\n> with std::set<>) of the IDs the network process has \"connected\", and clear them\n> up when it asks to disconnect?\n\nThe range is large enough and this check is simpler.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session.h\nFile remoting/host/desktop_session.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session.h#newcode16\nremoting/host/desktop_session.h:16: // has a unique identifier used by cross-platform to refer to it.\nOn 2012/10/16 21:53:20, Wez wrote:\n> typo: cross-platform -> cross-platform code\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session_win.h\nFile remoting/host/desktop_session_win.h (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/desktop_session_win.h#newcode38\nremoting/host/desktop_session_win.h:38: // events. Both |daemon_process| and |monitor| should outlive |this|.\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: should -> must\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/remoting_me2me_host.cc\nFile remoting/host/remoting_me2me_host.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11017065/diff/19002/remoting/host/remoting_me2me_host.cc#newcode282\nremoting/host/remoting_me2me_host.cc:282: IPC_MESSAGE_HANDLER(ChromotingDaemonNetworkMsg_Configuration,\nOn 2012/10/16 21:53:20, Wez wrote:\n> nit: Two spaces\n\nStrange. There are two spaces on my machine.","disapproval":false,"date":"2012-10-17 00:01:20.169290","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/alexeypa@chromium.org/11017065/29001","disapproval":false,"date":"2012-10-17 06:39:02.414580","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"Sorry for I got bad news for ya.\nCompile failed with a clobber build.\nYour code is likely broken or HEAD is junk. Please ensure your\ncode is not broken then alert the build sheriffs.\nLook at the try server FAQ for more details.","disapproval":false,"date":"2012-10-17 07:02:23.186310","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/alexeypa@chromium.org/11017065/29002","disapproval":false,"date":"2012-10-17 17:07:42.973180","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"Sorry for I got bad news for ya.\nCompile failed with a clobber build.\nYour code is likely broken or HEAD is junk. Please ensure your\ncode is not broken then alert the build sheriffs.\nLook at the try server FAQ for more details.","disapproval":false,"date":"2012-10-17 17:31:29.856040","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/alexeypa@chromium.org/11017065/21019","disapproval":false,"date":"2012-10-17 18:51:09.509160","approval":false},{"sender":"commit-bot@chromium.org","recipients":["alexeypa@chromium.org","wez@chromium.org","chromium-reviews@chromium.org","jamiewalch+watch@chromium.org","dcaiafa+watch@chromium.org","simonmorris+watch@chromium.org","hclam+watch@chromium.org","wez+watch@chromium.org","amit@chromium.org","sanjeevr@chromium.org","garykac+watch@chromium.org","lambroslambrou+watch@chromium.org","rmsousa+watch@chromium.org","alexeypa+watch@chromium.org","sergeyu+watch@chromium.org"],"text":"Change committed as 162520","disapproval":false,"date":"2012-10-17 21:06:30.995030","approval":false}],"owner_email":"alexeypa@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"alexeypa (please no reviews)","subject":"[Chromoting] Adding plumbing to support a list of terminals on the daemon side.","created":"2012-10-10 22:06:56.420400","patchsets":[1,3001,7001,19002,23003,29001,29002,21019],"modified":"2012-10-17 21:06:31.393020","closed":true,"commit":false,"issue":11017065}