{"files":{"content/renderer/render_thread_impl.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":4,"num_removed":0,"messages":[{"author":"tommi","author_email":"tommi@chromium.org","text":"return const scoped_refptr<>& and remove call to .get()","draft":false,"lineno":267,"date":"2013-04-24 09:53:25.387170","left":false},{"author":"Henrik Grunell","author_email":"grunell@chromium.org","text":"On 2013/04/24 09:53:25, tommi wrote:\n> return const scoped_refptr<>& and remove call to .get()\n\nDone.","draft":false,"lineno":267,"date":"2013-04-24 11:07:50.669810","left":false}],"id":38004,"is_binary":false},"content/renderer/media/media_stream_dependency_factory.h":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":7,"num_removed":0,"messages":[],"id":38003,"is_binary":false},"content/renderer/webrtc_logging_handler_impl.cc":{"status":"M","num_chunks":2,"no_base_file":false,"property_changes":"","num_added":22,"num_removed":10,"messages":[{"author":"tommi","author_email":"tommi@chromium.org","text":"Since the pointer to the handler is global and can be referenced from any thread at any time, we cannot safely delete the object.  So, let's do this instead:\n\n* In the ctor, store a proxy to the IO loop in a member variable.\n* In here, use that member variable to post a task to the IO thread.  This call will safely fail if the loop has gone away.\n* Change the filter to never delete the handler.","draft":false,"lineno":24,"date":"2013-04-24 09:53:25.387450","left":false},{"author":"Henrik Grunell","author_email":"grunell@chromium.org","text":"On 2013/04/24 09:53:25, tommi wrote:\n> Since the pointer to the handler is global and can be referenced from any thread\n> at any time, we cannot safely delete the object.  So, let's do this instead:\n> \n> * In the ctor, store a proxy to the IO loop in a member variable.\n> * In here, use that member variable to post a task to the IO thread.  This call\n> will safely fail if the loop has gone away.\n> * Change the filter to never delete the handler.\n\nDone.","draft":false,"lineno":24,"date":"2013-04-24 11:07:50.669990","left":false}],"id":38005,"is_binary":false},"content/renderer/media/media_stream_dependency_factory.cc":{"status":"M","num_chunks":5,"no_base_file":false,"property_changes":"","num_added":38,"num_removed":1,"messages":[{"author":"tommi","author_email":"tommi@chromium.org","text":"just pass this directly to Bind instead of using make_scoped_refptr.","draft":false,"lineno":469,"date":"2013-04-24 09:53:25.386890","left":false},{"author":"Henrik Grunell","author_email":"grunell@chromium.org","text":"On 2013/04/24 09:53:25, tommi wrote:\n> just pass this directly to Bind instead of using make_scoped_refptr.\n\nDone.","draft":false,"lineno":469,"date":"2013-04-24 11:07:50.669590","left":false}],"id":38002,"is_binary":false},"content/renderer/webrtc_logging_handler_impl.h":{"status":"M","num_chunks":3,"no_base_file":false,"property_changes":"","num_added":6,"num_removed":5,"messages":[],"id":38006,"is_binary":false},"content/renderer/webrtc_logging_message_filter.cc":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":3,"num_removed":1,"messages":[],"id":38007,"is_binary":false},"content/renderer/webrtc_logging_message_filter.h":{"status":"M","num_chunks":1,"no_base_file":false,"property_changes":"","num_added":5,"num_removed":1,"messages":[{"author":"tommi","author_email":"tommi@chromium.org","text":"const &","draft":false,"lineno":35,"date":"2013-04-24 09:53:25.387730","left":false},{"author":"Henrik Grunell","author_email":"grunell@chromium.org","text":"On 2013/04/24 09:53:25, tommi wrote:\n> const &\n\nDone.","draft":false,"lineno":35,"date":"2013-04-24 11:07:50.670160","left":false}],"id":38008,"is_binary":false}},"owner_email":"grunell@chromium.org","owner":"Henrik Grunell","message":"Fixed merge error.","try_job_results":[],"created":"2013-04-24 09:16:18.834290","url":null,"num_comments":8,"modified":"2013-04-24 11:07:50.711450","patchset":35003,"issue":13976016}