{"description":"Implement RFC 5764 (DTLS-SRTP).\n\nThe patch is contributed by Eric Rescorla.\n\nR=rsleevi@chromium.org,ekr@rtfm.com\nBUG=120938\nTEST=none (eventually covered by libjingle tests)\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=140535","cc":["chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"reviewers":["rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com"],"messages":[{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: Patch set 1 is your original patch in the upstream NSS\nbug https://bugzilla.mozilla.org/show_bug.cgi?id=737178,\nexcluding the tstclnt.c changes.\n\nI fixed coding style nits and added two checks to prevent\nthe use_srtp extension from being used in stream TLS mode.\nI still need to review the extension sender and handler\nfunctions, so you can wait until then to review my changes.\n\nI have some questions for you.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/1/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/1/net/third_party/nss/ssl/ssl3ext.c#newcode1679\nnet/third_party/nss/ssl/ssl3ext.c:1679: sender = (ss->version > SSL_LIBRARY_VERSION_3_0 || IS_DTLS(ss)) ?\n\nThis is no longer necessary after we made ss->version the\nbase TLS protocol version.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c#newcode2008\nnet/third_party/nss/ssl/ssl3ext.c:2008: /* Ignore the extension. */\n\nIf the client offers the use_srtp extension in stream TLS\nmode, should we ignore the extension or fail?\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/sslsock.c#newcode231\nnet/third_party/nss/ssl/sslsock.c:231: /* XXX what about SRTP_NULL_SHA1_80 and SRTP_NULL_SHA1_32? */\n\nShould SRTP_NULL_SHA1_80 and SRTP_NULL_SHA1_32 be added to\nthis array?  You allow tstclnt.c to set these null encryption\ncipher suites using the letters C and D.","disapproval":false,"date":"2012-04-04 23:32:49.152071","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"https://chromiumcodereview.appspot.com/9982019/diff/1/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/1/net/third_party/nss/ssl/ssl3ext.c#newcode1679\nnet/third_party/nss/ssl/ssl3ext.c:1679: sender = (ss->version > SSL_LIBRARY_VERSION_3_0 || IS_DTLS(ss)) ?\nOn 2012/04/04 23:32:49, wtc wrote:\n> \n> This is no longer necessary after we made ss->version the\n> base TLS protocol version.\n\nConcur.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c#newcode2008\nnet/third_party/nss/ssl/ssl3ext.c:2008: /* Ignore the extension. */\nOn 2012/04/04 23:32:49, wtc wrote:\n> \n> If the client offers the use_srtp extension in stream TLS\n> mode, should we ignore the extension or fail?\n\nI think it's best to ignore it. \n\nIn the OpenSSL code, I don't even test for DTLS, I believe. But it's\npretty clear from the spec that this isn't a TLS feature.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/sslsock.c#newcode231\nnet/third_party/nss/ssl/sslsock.c:231: /* XXX what about SRTP_NULL_SHA1_80 and SRTP_NULL_SHA1_32? */\nOn 2012/04/04 23:32:49, wtc wrote:\n> \n> Should SRTP_NULL_SHA1_80 and SRTP_NULL_SHA1_32 be added to\n> this array?  You allow tstclnt.c to set these null encryption\n> cipher suites using the letters C and D.\n\nI think my preference is to simply not implement them, and remove them from tstclnt.c as well.","disapproval":false,"date":"2012-04-19 14:29:35.879608","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: the CL is ready for your review.\n\nPatch set 1 is your original NSS patch.\n\nPatch set 2 contains the white space and style nit fixes.\n\nPatch set 3 has the fixes I made after a full review today.\n\nPlease diff between the patch sets to review my changes.\nI also have some questions for you below.  Thanks.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl.h#newcode846\nnet/third_party/nss/ssl/ssl.h:846: unsigned int numCiphers);\n\nTo enable SSL/TLS cipher suites, one has to call the\nSSL_CipherPrefSet function on individual cipher suites.\nSo SSL_SetSRTPCiphers uses a different method to enable\nall SRTP cipher suites in one shot.\n\nI wonder if we should use a SSL_SRTPCipherPrefSet function\ninstead to be consistent with the SSL_CipherPrefSet style.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c#newcode1960\nnet/third_party/nss/ssl/ssl3ext.c:1960: !ssl3_ClientExtensionAdvertised(ss, ssl_use_srtp_xtn)) {\n\nWe don't need to check this here because\nssl3_HandleHelloExtensions checks this (on line 1622).\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1995\nnet/third_party/nss/ssl/ssl3ext.c:1995: /* We didn't offer an MKI, so this must be 0 length */\n\nThe RFC says:\n  If the client detects a nonzero-length MKI in the server's\n  response that is different than the one the client offered,\n  then the client MUST abort the handshake and SHOULD send an\n  invalid_parameter alert.\n\nDue to a limitation of the ssl3_HandleHelloExtensions\nfunction, this is not easy to do.  (See lines 1633-1636.)\nI described this problem before in\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=537356#c52\nand Nelson commented on it in\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=537356#c53.\n\nReturning SECFailure here won't abort the handshake.  It\nwill merely cause the use_srtp extension to be not\nnegotiated.\n\nI hope this deviation from the RFC's requirement is\nacceptable.\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h\nFile net/third_party/nss/ssl/sslproto.h (right):\n\nhttps://chromiumcodereview.appspot.com/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h#newcode242\nnet/third_party/nss/ssl/sslproto.h:242: #define SRTP_AES128_CM_HMAC_SHA1_80\t\t0x0001\n\nI hope it's fine to use the exact cipher suite names\n(which have _HMAC) from the RFC.\n\nBy the way, these are called \"protection profiles\" in the\nRFC.  Should we also use that term here?","disapproval":false,"date":"2012-04-20 02:02:13.242674","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"I had a little trouble with Rietveld figuring out how to isolate each patch set, but I think I got all the changes.\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h#newcode846\nnet/third_party/nss/ssl/ssl.h:846: unsigned int numCiphers);\nOn 2012/04/20 02:02:13, wtc wrote:\n> \n> To enable SSL/TLS cipher suites, one has to call the\n> SSL_CipherPrefSet function on individual cipher suites.\n> So SSL_SetSRTPCiphers uses a different method to enable\n> all SRTP cipher suites in one shot.\n> \n> I wonder if we should use a SSL_SRTPCipherPrefSet function\n> instead to be consistent with the SSL_CipherPrefSet style.\n\nThat seems to be a change consistent with NSS style. I.e., \"Yes\" :)\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl3ext.c#newcode1960\nnet/third_party/nss/ssl/ssl3ext.c:1960: !ssl3_ClientExtensionAdvertised(ss, ssl_use_srtp_xtn)) {\nOn 2012/04/20 02:02:13, wtc wrote:\n> \n> We don't need to check this here because\n> ssl3_HandleHelloExtensions checks this (on line 1622).\n\nAgreed.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1897\nnet/third_party/nss/ssl/ssl3ext.c:1897: if (append && maxBytes >= 4 + ext_data_len) {\nAs a matter of style, I tend to add parentheses wherever I don't immediately know the precedence rules. I believe that you are correct that this is a safe transformation, but I'm not sure I would make it. Matter of house style.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1956\nnet/third_party/nss/ssl/ssl3ext.c:1956: \nWhy are these signed? Doesn't the encoding require unsigned values?\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1995\nnet/third_party/nss/ssl/ssl3ext.c:1995: /* We didn't offer an MKI, so this must be 0 length */\nOn 2012/04/20 02:02:13, wtc wrote:\n> \n> The RFC says:\n>   If the client detects a nonzero-length MKI in the server's\n>   response that is different than the one the client offered,\n>   then the client MUST abort the handshake and SHOULD send an\n>   invalid_parameter alert.\n> \n> Due to a limitation of the ssl3_HandleHelloExtensions\n> function, this is not easy to do.  (See lines 1633-1636.)\n> I described this problem before in\n> https://bugzilla.mozilla.org/show_bug.cgi?id=537356#c52\n> and Nelson commented on it in\n> https://bugzilla.mozilla.org/show_bug.cgi?id=537356#c53.\n> \n> Returning SECFailure here won't abort the handshake.  It\n> will merely cause the use_srtp extension to be not\n> negotiated.\n> \n> I hope this deviation from the RFC's requirement is\n> acceptable.\n\nDid I misread your comment in c55 where it sounded like you\nwere going to change to be able to abort the handshake with\nSECFailure? I think it would be good to abort the handshake,\neven if we can't generate an error.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2008\nnet/third_party/nss/ssl/ssl3ext.c:2008: return SECSuccess;\nI would change this comment to say\n/* Ignore the extension if we aren't doing DTLS or no DTLS-SRTP preferences have been set */\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2038\nnet/third_party/nss/ssl/ssl3ext.c:2038: }\nThis is arguably slightly less clear because it involves setting found to true multiple times. I don't feel strongly about it. You think clearer because no nested conditionals?\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h\nFile net/third_party/nss/ssl/sslproto.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h#newcode242\nnet/third_party/nss/ssl/sslproto.h:242: #define SRTP_AES128_CM_HMAC_SHA1_80\t\t0x0001\nOn 2012/04/20 02:02:13, wtc wrote:\n> \n> I hope it's fine to use the exact cipher suite names\n> (which have _HMAC) from the RFC.\n\nYes, that seems like an improvement.\n\n\n> By the way, these are called \"protection profiles\" in the\n> RFC.  Should we also use that term here?\n\nYes, we should.","disapproval":false,"date":"2012-04-26 14:33:42.815183","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: thank you for reviewing my changes.  I answer your\nquestions below.\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h#newcode846\nnet/third_party/nss/ssl/ssl.h:846: unsigned int numCiphers);\nOn 2012/04/26 14:33:42, ekr wrote:\n>\n> That seems to be a change consistent with NSS style. I.e., \"Yes\" :)\n\nI just realized that one disadvantage of the\nSSL_CipherPrefSet style is that the ordering of cipher\nsuites is fixed.\n\nSo, if you think the number of SRTP cipher suites will\nremain small, the SSL_SetSRTPCiphers function seems\nbetter: it allows us to specify all the SRTP cipher to\nenable, including their ordering, in one shot.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1897\nnet/third_party/nss/ssl/ssl3ext.c:1897: if (append && maxBytes >= 4 + ext_data_len) {\nOn 2012/04/26 14:33:42, ekr wrote:\n> As a matter of style, I tend to add parentheses wherever I don't immediately\n> know the precedence rules. I believe that you are correct that this is a safe\n> transformation, but I'm not sure I would make it. Matter of house style.\n\nI removed these parentheses because I found the other\nextender sender functions don't use them.  I seem to recall\ngcc prefers adding parentheses when there is && or ||.\nI can add these parentheses back like this:\n\n  if (append && (maxBytes >= 4 + ext_data_len)) {\n\nbut I think this would be excessive:\n\n  if (append && (maxBytes >= (4 + ext_data_len))) {\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1956\nnet/third_party/nss/ssl/ssl3ext.c:1956: \nOn 2012/04/26 14:33:42, ekr wrote:\n> Why are these signed? Doesn't the encoding require unsigned values?\n\nThese two variables are used to store the return value\nof ssl3_ConsumeHandshakeNumber, which is PRInt32.  This\nis why I changed them to PRInt32.\n\nBut I just discovered that these two variables are compared\nwith variables of unsigned types, which would cause MSVC\nwarnings.  So it seems that I should change these back to\nPRUint32?\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1995\nnet/third_party/nss/ssl/ssl3ext.c:1995: /* We didn't offer an MKI, so this must be 0 length */\nOn 2012/04/26 14:33:42, ekr wrote:\n>\n> Did I misread your comment in c55 where it sounded like you\n> were going to change to be able to abort the handshake with\n> SECFailure?\n\nYou read my comment in c55 correctly.  I did volunteer to\ndo that, and in c56 Nelson agreed with my plan.  But for\nsome reason I never got around to doing that :-(\n\n> I think it would be good to abort the handshake,\n> even if we can't generate an error.\n\nBy generating an error, you meant sending an invalid_parameter alert?\n\nIn any case, I should open a new NSS bug report for the\nwork I volunteered to do in c55.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2038\nnet/third_party/nss/ssl/ssl3ext.c:2038: }\nOn 2012/04/26 14:33:42, ekr wrote:\n> This is arguably slightly less clear because it involves setting found to true\n> multiple times. I don't feel strongly about it. You think clearer because no\n> nested conditionals?\n\nThis was my attempt to do\n    bestIndex = i;\nin only one place.\n\nI can change it back to your original code.  But after\nlooking into this, I think the best solution is to imitate\nhow ssl3_HandleClientHello picks a cipher suite:\n- Call ssl3_ConsumeHandshakeVariable to read the entire\n  list of cipher suites into a SECItem.\n- Use nested for loops, with the outer loop iterating over\n  ss->ssl3.dtlsSRTPCiphers[i], to pick a match in our\n  order of preference.","disapproval":false,"date":"2012-04-27 01:06:08.647086","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"See comments.\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/5001/net/third_party/nss/ssl/ssl.h#newcode846\nnet/third_party/nss/ssl/ssl.h:846: unsigned int numCiphers);\nOn 2012/04/27 01:06:08, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> >\n> > That seems to be a change consistent with NSS style. I.e., \"Yes\" :)\n> \n> I just realized that one disadvantage of the\n> SSL_CipherPrefSet style is that the ordering of cipher\n> suites is fixed.\n> \n> So, if you think the number of SRTP cipher suites will\n> remain small, the SSL_SetSRTPCiphers function seems\n> better: it allows us to specify all the SRTP cipher to\n> enable, including their ordering, in one shot.\n\nI think it's likely to remain very small; there's no combinatoric explosion problem with key exchange, so we may just add AEAD (GCM) or something, but probably no more than 10 cipher suites.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1897\nnet/third_party/nss/ssl/ssl3ext.c:1897: if (append && maxBytes >= 4 + ext_data_len) {\nOn 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > As a matter of style, I tend to add parentheses wherever I don't immediately\n> > know the precedence rules. I believe that you are correct that this is a safe\n> > transformation, but I'm not sure I would make it. Matter of house style.\n> \n> I removed these parentheses because I found the other\n> extender sender functions don't use them.  I seem to recall\n> gcc prefers adding parentheses when there is && or ||.\n> I can add these parentheses back like this:\n> \n>   if (append && (maxBytes >= 4 + ext_data_len)) {\n> \n> but I think this would be excessive:\n> \n>   if (append && (maxBytes >= (4 + ext_data_len))) {\n\nIf it were me, I would do the first of these, but really, it's OK as long as you're sure it's OK. I looked at it and it seemed good, but I had to check the precedence table first.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1956\nnet/third_party/nss/ssl/ssl3ext.c:1956: \nOn 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > Why are these signed? Doesn't the encoding require unsigned values?\n> \n> These two variables are used to store the return value\n> of ssl3_ConsumeHandshakeNumber, which is PRInt32.  This\n> is why I changed them to PRInt32.\n> \n> But I just discovered that these two variables are compared\n> with variables of unsigned types, which would cause MSVC\n> warnings.  So it seems that I should change these back to\n> PRUint32?\n\nOuch, that's not a good state of affairs, esp. since SECFailure = -1.\n\nMaybe we should use PRInt32 and then cast to PRUint32. E.g.,\n\nPRInt32 x;\n\nx = ssl3_ConsumeHandshakeNumber()\n\nif (x == SECFailure)\n  return SECFailure;\n\nPRUint32 y = x & 0xffff;\n\nIt's kind of bad no matter what.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1995\nnet/third_party/nss/ssl/ssl3ext.c:1995: /* We didn't offer an MKI, so this must be 0 length */\nOn 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> >\n> > Did I misread your comment in c55 where it sounded like you\n> > were going to change to be able to abort the handshake with\n> > SECFailure?\n> \n> You read my comment in c55 correctly.  I did volunteer to\n> do that, and in c56 Nelson agreed with my plan.  But for\n> some reason I never got around to doing that :-(\n> \n> > I think it would be good to abort the handshake,\n> > even if we can't generate an error.\n> \n> By generating an error, you meant sending an invalid_parameter alert?\n> \n> In any case, I should open a new NSS bug report for the\n> work I volunteered to do in c55.\n\nI think failing with no alert would be satisfactory for now, plus a TODO if you get around to c55.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2038\nnet/third_party/nss/ssl/ssl3ext.c:2038: }\nOn 2012/04/27 01:06:09, wtc wrote:\n> On 2012/04/26 14:33:42, ekr wrote:\n> > This is arguably slightly less clear because it involves setting found to true\n> > multiple times. I don't feel strongly about it. You think clearer because no\n> > nested conditionals?\n> \n> This was my attempt to do\n>     bestIndex = i;\n> in only one place.\n> \n> I can change it back to your original code.  But after\n> looking into this, I think the best solution is to imitate\n> how ssl3_HandleClientHello picks a cipher suite:\n> - Call ssl3_ConsumeHandshakeVariable to read the entire\n>   list of cipher suites into a SECItem.\n> - Use nested for loops, with the outer loop iterating over\n>   ss->ssl3.dtlsSRTPCiphers[i], to pick a match in our\n>   order of preference.\n\nI'm not sure I'm knowledgeable enough about SECItem to do this easily. Do you want to try and have me take a look?","disapproval":false,"date":"2012-04-27 03:36:33.871969","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: I will send you a new patch set some time next week.\nSee my answers to your questions below.  Thanks.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode1956\nnet/third_party/nss/ssl/ssl3ext.c:1956: \n\nOn 2012/04/27 03:36:34, ekr wrote:\n>\n> Ouch, that's not a good state of affairs, esp. since SECFailure = -1.\n> \n> Maybe we should use PRInt32 and then cast to PRUint32. E.g.,\n> \n> PRInt32 x;\n> \n> x = ssl3_ConsumeHandshakeNumber()\n> \n> if (x == SECFailure)\n>   return SECFailure;\n\nWe can also do\n  if (x < 0)\n    return SECFailure;\n\nThis will get rid of all the negative numbers.\n\n> PRUint32 y = x & 0xffff;\n\ny should be PRUint16, right?  Both cipherLenBytes and\ncipher are 16-bit quantities in the use_srtp extension.\nAh, I see, the 0xffff mask you used truncates it to 16 bits.\nStrictly speaking the masking is not necessary because\nwe ask ssl3_ConsumeHandshakeNumber to read two bytes.\n\n> It's kind of bad no matter what.\n\nYes.  I will look at this more closely next week and\npropose a solution.  I actually like your idea.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2038\nnet/third_party/nss/ssl/ssl3ext.c:2038: }\nOn 2012/04/27 03:36:34, ekr wrote:\n>\n> I'm not sure I'm knowledgeable enough about SECItem to do this easily. Do you\n> want to try and have me take a look?\n\nYes, I'll be happy to do that.  I can make all the changes\nthat I suggested and you agreed with, but I'll need you to\ntest my changes.\n\nPlease wait for a new patch set from me some time next week.\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h\nFile net/third_party/nss/ssl/sslproto.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/sslproto.h#newcode242\nnet/third_party/nss/ssl/sslproto.h:242: #define SRTP_AES128_CM_HMAC_SHA1_80\t\t0x0001\nOn 2012/04/26 14:33:42, ekr wrote:\n> On 2012/04/20 02:02:13, wtc wrote:\n> > By the way, these are called \"protection profiles\" in the\n> > RFC.  Should we also use that term here?\n> \n> Yes, we should.\n\nAny suggestion on how to abbreviate \"ProtectionProfile\"\nif it is too long?\n\nI actually like \"cipher suites\" better.  \"Protection profiles\"\nhave a different meaning in Common Criteria evaluations.","disapproval":false,"date":"2012-04-27 17:32:55.908506","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Fri, Apr 27, 2012 at 10:32 AM,  <wtc@chromium.org> wrote\r\n> http://codereview.chromium.org/9982019/diff/13001/net/third_party/nss/ssl/ssl3ext.c#newcode2038\r\n> net/third_party/nss/ssl/ssl3ext.c:2038: }\r\n>\r\n> On 2012/04/27 03:36:34, ekr wrote:\r\n>\r\n>> I'm not sure I'm knowledgeable enough about SECItem to do this easily.\r\n>\r\n> Do you\r\n>>\r\n>> want to try and have me take a look?\r\n>\r\n>\r\n> Yes, I'll be happy to do that.  I can make all the changes\r\n> that I suggested and you agreed with, but I'll need you to\r\n> test my changes.\r\n>\r\n> Please wait for a new patch set from me some time next week.\r\n\r\nWilldo. I'm working on the libjingle NSS patch as we speak so testing shoul dbe\r\nno problem.\r\n\r\n\r\n\r\n> Any suggestion on how to abbreviate \"ProtectionProfile\"\r\n> if it is too long?\r\n>\r\n> I actually like \"cipher suites\" better.  \"Protection profiles\"\r\n> have a different meaning in Common Criteria evaluations.\r\n\r\nLet's leave it as is then. I don't think it matters much.\r\n\r\n-Ekr\r\n\r\n\r\n> http://codereview.chromium.org/9982019/\r\n","disapproval":false,"date":"2012-04-27 17:41:21.718090","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: please review patch set 4.  If it looks good, please also\ntest it.  Thanks!\n\nhttp://codereview.chromium.org/9982019/diff/24002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/24002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: goto cipher_found;\n\nThis goto statement is necessary to exit the nested for loops.\nPerhaps I should try harder to avoid it?","disapproval":false,"date":"2012-05-03 02:00:15.154165","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: Please review patch set 5.  I got rid of the goto.","disapproval":false,"date":"2012-05-04 00:43:49.585546","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Except for the above comment, I think this is fine. I have tested it against OpenSSL and in my test harness and things seem OK.\n\nhttp://codereview.chromium.org/9982019/diff/24002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/24002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: goto cipher_found;\nOn 2012/05/03 02:00:15, wtc wrote:\n> \n> This goto statement is necessary to exit the nested for loops.\n> Perhaps I should try harder to avoid it?\n\nI think it's fine.\n\nhttp://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\nI'd still like to find a way to abort the handshake. I don't care if it generates an alert, though. Is there anything we can do?","disapproval":false,"date":"2012-05-07 22:51:00.660984","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"rsleevi: please review patch set 6.  This CL was based on\nEric Rescorla's NSS patch, with some changes by me.\n\nekr: I decided to avoid the \"goto\" statement.  I answered\nyour other question below.\n\nhttp://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\nOn 2012/05/07 22:51:00, ekr wrote:\n> I'd still like to find a way to abort the handshake. I don't care if it\n> generates an alert, though. Is there anything we can do?\n\nI filed NSS bug 753136 and described how to fix this:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=753136\n\nBasically we need to examine all the TLS hello extension\nhandlers called by ssl3_HandleHelloExtensions and the call\nsites of ssl3_HandleHelloExtensions:\n\nhttp://mxr.mozilla.org/security/ident?i=ssl3_HandleHelloExtensions\n\nFor the former, I think it is best done in a series of\n1-1.5 hour \"pair programming\" sessions.  Ekr, would you\nhave time to do that?","disapproval":false,"date":"2012-05-08 22:15:11.071771","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Tue, May 8, 2012 at 3:15 PM,  <wtc@chromium.org> wrote:\r\n> rsleevi: please review patch set 6.  This CL was based on\r\n> Eric Rescorla's NSS patch, with some changes by me.\r\n>\r\n> ekr: I decided to avoid the \"goto\" statement.  I answered\r\n> your other question below.\r\n>\r\n>\r\n>\r\n> http://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c\r\n> File net/third_party/nss/ssl/ssl3ext.c (right):\r\n>\r\n> http://codereview.chromium.org/9982019/diff/31002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\r\n> net/third_party/nss/ssl/ssl3ext.c:2010: */\r\n> On 2012/05/07 22:51:00, ekr wrote:\r\n>>\r\n>> I'd still like to find a way to abort the handshake. I don't care if\r\n>\r\n> it\r\n>>\r\n>> generates an alert, though. Is there anything we can do?\r\n>\r\n>\r\n> I filed NSS bug 753136 and described how to fix this:\r\n> https://bugzilla.mozilla.org/show_bug.cgi?id=753136\r\n>\r\n> Basically we need to examine all the TLS hello extension\r\n> handlers called by ssl3_HandleHelloExtensions and the call\r\n> sites of ssl3_HandleHelloExtensions:\r\n>\r\n> http://mxr.mozilla.org/security/ident?i=ssl3_HandleHelloExtensions\r\n>\r\n> For the former, I think it is best done in a series of\r\n> 1-1.5 hour \"pair programming\" sessions.  Ekr, would you\r\n> have time to do that?\r\n\r\nI'm way ahead of you... I already offered that in the bugzilla bug :)\r\n\r\nMy preference would be to have your hands on the keyboard if that's\r\nOK with you.\r\n\r\n-Ekr\r\n","disapproval":false,"date":"2012-05-08 22:17:47.016706","approval":false},{"sender":"rsleevi@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"wtc: Based on the ChromeOS TPM work ongoing, I'm not sure I'll have a chance to review this CL this week. You may wish to ping agl@","disapproval":false,"date":"2012-05-08 22:55:36.315656","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"rsleevi: since you reviewed the previous DTLS patch, I think\nyou are the best reviewer for this patch.  You can review\nthis patch next week.  Thanks.","disapproval":false,"date":"2012-05-09 18:58:02.220777","approval":false},{"sender":"rsleevi@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"wtc: I only focused on the code, and did not focus on the implementation of the extension. I've assumed you've already vetted the conformance to the spec, etc.\n\nMostly style nits, but one design question and one implementation question/maybe BUG?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h#newcode842\nnet/third_party/nss/ssl/ssl.h:842: ** negotiated.\nIf you have to document that it has a side-effect, would it make more sense to have a UseSRTP function (which sets some default cipher list) and then a SetSRTPCiphers?\n\nThis would parallel the DTLS/TLS cipher preference setting.\n\nAlso, the interaction with SSL model sockets is not clear here. Does this have a model socket / global preference parallel?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1892\nnet/third_party/nss/ssl/ssl3ext.c:1892: if (!IS_DTLS(ss) || !ss->ssl3.dtlsSRTPCipherCount)\nSeems IS_DTLS should be checked before the server side is checked, otherwise SRTP can be negotiated on a TLS socket?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1956\nnet/third_party/nss/ssl/ssl3ext.c:1956: \nIS_DTLS check\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1972\nnet/third_party/nss/ssl/ssl3ext.c:1972: if (rv != SECSuccess) {\nThis function seems to have inconsistent bracing throughout.\n\n1972-1973, 1976/1977, 1990/1991, 1996-1998, 2011/2012, 2035-2037, 2039/2040, 2056-2058, 2060/2061\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1999\nnet/third_party/nss/ssl/ssl3ext.c:1999: /* We didn't offer an MKI, so this must be 0 length */\nnit: newline following }\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\nPerhaps move this up to 1964, since it applies to the SECFailure returned in (1961/1966), and at least there it provides context about the MKI.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2045\nnet/third_party/nss/ssl/ssl3ext.c:2045: for (j = 0; j + 1 < ciphers.len; j += 2) {\n!found && j + 1 ...\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: break;\nI assume this is where you were talking about gotos?\n\nI note the equivalent NSS function does use goto, but that's because it's got an error handler - http://code.google.com/searchframe#OAMlx_jo-ck/src/net/third_party/nss/ssl/ssl3con.c&exact_package=chromium&q=hs.cipher_suite&type=cs&l=6844\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1633\nnet/third_party/nss/ssl/sslsock.c:1633: PORT_SetError(SEC_ERROR_INVALID_ARGS);\nThe NSS SSL/DTLS code accepts non-existant cipher suites without issue, simply ignoring them. I think this works to our advantage. Does it make sense to do the same here?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1677\nnet/third_party/nss/ssl/sslsock.c:1677: #if 0\nDoes it make sense to update this function, even though it's not implemented?\n\nSeems a subtle edge if it gets enabled but breaks.","disapproval":false,"date":"2012-05-10 19:43:10.968636","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Make the changes suggested by rsleevi","disapproval":false,"date":"2012-05-12 00:54:33.745950","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"rsleevi: please review patch set 7.  Thank you very much for\nyour thoughtful review.  I made all the changes you suggested\nexcept for adding a SSL_UseSRTP function and global preference\nfor SRTP ciphers.  I will discuss them with Ekr.\n\nEkr: what do you think of rsleevi's suggestion?  (Search for\n\"Ekr\" in the comment below.)\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h\nFile net/third_party/nss/ssl/ssl.h (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h#newcode842\nnet/third_party/nss/ssl/ssl.h:842: ** negotiated.\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> If you have to document that it has a side-effect, would it make more sense to\n> have a UseSRTP function (which sets some default cipher list) and then a\n> SetSRTPCiphers?\n> \n> This would parallel the DTLS/TLS cipher preference setting.\n\nI will talk to Ekr about this.  Thanks for the suggestion.\n\n> Also, the interaction with SSL model sockets is not clear here. Does this have a\n> model socket / global preference parallel?\n\nI updated ssl_DupSocket and SSL_ReconfigFD to copy from\nthe model socket.\n\nI will talk to Ekr about a global preference for\nSRTP ciphers.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1892\nnet/third_party/nss/ssl/ssl3ext.c:1892: if (!IS_DTLS(ss) || !ss->ssl3.dtlsSRTPCipherCount)\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> Seems IS_DTLS should be checked before the server side is checked, otherwise\n> SRTP can be negotiated on a TLS socket?\n\nThis is a good question.\n\nThe server side checks IS_DTLS in ssl3_HandleUseSRTPXtn on\nline 2021.  The reason client and server check IS_DTLS in\ndifferent places is that the client always calls\nssl3_SendUseSRTPXtn, but the server calls \nssl3_SendUseSRTPXtn\nonly if ssl3_HandleUseSRTPXtn has validated the extension\nand marked that ssl3_SendUseSRTPXtn should be called.\n\nSimilarly, the client side does not need to check IS_DTLS\nin ssl3_HandleUseSRTPXtn because the client won't call\nssl3_HandleUseSRTPXtn (even if the server sends the\nextension) unless the client has sent the extension.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> Perhaps move this up to 1964, since it applies to the SECFailure returned in\n> (1961/1966), and at least there it provides context about the MKI.\n\nAfter studying this code, I decided to move the\nextension data length check (data->len != 5) on line 1964 after the MKI length check here.  This way we only need to\ntalk about MKI here.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2045\nnet/third_party/nss/ssl/ssl3ext.c:2045: for (j = 0; j + 1 < ciphers.len; j += 2) {\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> !found && j + 1 ...\n\nIt is not necessary to test !found here because !found is\nguaranteed to be true by the !found test on line 2044 and\nthe break statement on line 2049.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: break;\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> I assume this is where you were talking about gotos?\n\nYes, it is.  Do you still prefer that we avoid goto here?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1633\nnet/third_party/nss/ssl/sslsock.c:1633: PORT_SetError(SEC_ERROR_INVALID_ARGS);\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> The NSS SSL/DTLS code accepts non-existant cipher suites without issue, simply\n> ignoring them.\n\nSSL_CipherPrefSet returns SECFailure with\nSSL_ERROR_UNKNOWN_CIPHER_SUITE if the cipher suite is\nnonexistent.  Perhaps I misunderstood your comment here?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1677\nnet/third_party/nss/ssl/sslsock.c:1677: #if 0\n\nOn 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> Does it make sense to update this function, even though it's not implemented?\n\nI updated both this function and ssl_DupSocket (both of them\ntake a model socket as input).","disapproval":false,"date":"2012-05-12 01:00:59.381408","approval":false},{"sender":"rsleevi@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"http://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode1892\nnet/third_party/nss/ssl/ssl3ext.c:1892: if (!IS_DTLS(ss) || !ss->ssl3.dtlsSRTPCipherCount)\nOn 2012/05/12 01:00:59, wtc wrote:\n> \n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > Seems IS_DTLS should be checked before the server side is checked, otherwise\n> > SRTP can be negotiated on a TLS socket?\n> \n> This is a good question.\n> \n> The server side checks IS_DTLS in ssl3_HandleUseSRTPXtn on\n> line 2021.  The reason client and server check IS_DTLS in\n> different places is that the client always calls\n> ssl3_SendUseSRTPXtn, but the server calls \n> ssl3_SendUseSRTPXtn\n> only if ssl3_HandleUseSRTPXtn has validated the extension\n> and marked that ssl3_SendUseSRTPXtn should be called.\n> \n> Similarly, the client side does not need to check IS_DTLS\n> in ssl3_HandleUseSRTPXtn because the client won't call\n> ssl3_HandleUseSRTPXtn (even if the server sends the\n> extension) unless the client has sent the extension.\n\nFair enough, if that's the contract. I wanted to make sure it wasn't possible for a misbehaving program to end up with this called on a server socket or a malicious server to be able to send an invalid extension. Seems like this is already covered.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\nOn 2012/05/12 01:00:59, wtc wrote:\n> \n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > Perhaps move this up to 1964, since it applies to the SECFailure returned in\n> > (1961/1966), and at least there it provides context about the MKI.\n> \n> After studying this code, I decided to move the\n> extension data length check (data->len != 5) on line 1964 after the MKI length\n> check here.  This way we only need to\n> talk about MKI here.\n\nThis means you're now relying on ssl3_ConsumeHandshakeVariable to do the length check.\n\nThis is probably fine, but note that if the lengths don't match, this will force SSL3_SendAlert() to be called. Is this what you want to happen?\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2045\nnet/third_party/nss/ssl/ssl3ext.c:2045: for (j = 0; j + 1 < ciphers.len; j += 2) {\nOn 2012/05/12 01:00:59, wtc wrote:\n> \n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > !found && j + 1 ...\n> \n> It is not necessary to test !found here because !found is\n> guaranteed to be true by the !found test on line 2044 and\n> the break statement on line 2049.\n\nAh, right.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: break;\nOn 2012/05/12 01:00:59, wtc wrote:\n> \n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > I assume this is where you were talking about gotos?\n> \n> Yes, it is.  Do you still prefer that we avoid goto here?\n\nDepends.\n\nCurrently, the code always consumes the srtp_mki value (line 2055), even when !found (line 2064). If that's the expected behaviour, then yeah, I think goto is considered harmful.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1633\nnet/third_party/nss/ssl/sslsock.c:1633: PORT_SetError(SEC_ERROR_INVALID_ARGS);\nOn 2012/05/12 01:00:59, wtc wrote:\n> \n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > The NSS SSL/DTLS code accepts non-existant cipher suites without issue, simply\n> > ignoring them.\n> \n> SSL_CipherPrefSet returns SECFailure with\n> SSL_ERROR_UNKNOWN_CIPHER_SUITE if the cipher suite is\n> nonexistent.  Perhaps I misunderstood your comment here?\n\nAh, you're right, sorry for not double-checking memory.\n\nIn the SSL/TLS case, we can enable/disable individual cipher suites via SSL_CipherPrefSet, so we can safely ignore any errors with unrecognized suites ( see http://code.google.com/searchframe#OAMlx_jo-ck/src/net/socket/ssl_server_socket_nss.cc&exact_package=chromium&q=SSL_CipherPrefSet&type=cs&l=299 )\n\nWith this code, because setting enabled suites is all-or-nothing, and because even enabling SRTP is dependent on all-or-nothing suites, we couldn't do such an approach if we wanted to.\n\nThis would be an issue if a cipher suite ever needed to be removed, as it would break clients still supplying the old cipher suite. I think that would argue in favour of separating the API?","disapproval":false,"date":"2012-05-12 01:13:05.911154","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Fri, May 11, 2012 at 6:00 PM,  <wtc@chromium.org> wrote:\r\n\r\n>\r\n> http://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h\r\n> File net/third_party/nss/ssl/ssl.h (right):\r\n>\r\n> http://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl.h#newcode842\r\n> net/third_party/nss/ssl/ssl.h:842: ** negotiated.\r\n>\r\n> On 2012/05/10 19:43:11, Ryan Sleevi wrote:\r\n>>\r\n>> If you have to document that it has a side-effect, would it make more\r\n>\r\n> sense to\r\n>>\r\n>> have a UseSRTP function (which sets some default cipher list) and then\r\n>\r\n> a\r\n>>\r\n>> SetSRTPCiphers?\r\n>\r\n>\r\n>> This would parallel the DTLS/TLS cipher preference setting.\r\n>\r\n>\r\n> I will talk to Ekr about this.  Thanks for the suggestion.\r\n>\r\n>\r\n>> Also, the interaction with SSL model sockets is not clear here. Does\r\n>\r\n> this have a\r\n>>\r\n>> model socket / global preference parallel?\r\n>\r\n>\r\n> I updated ssl_DupSocket and SSL_ReconfigFD to copy from\r\n> the model socket.\r\n>\r\n> I will talk to Ekr about a global preference for\r\n> SRTP ciphers.\r\n\r\nI'm torn: I'm generally not a huge fan of global preferences, but it seems\r\nto be the way NSS currently does things. I'm not sure how to weigh these.\r\n\r\n-Ekr\r\n","disapproval":false,"date":"2012-05-14 22:49:14.179234","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"http://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2049\nnet/third_party/nss/ssl/ssl3ext.c:2049: break;\nOn 2012/05/12 01:13:06, Ryan Sleevi wrote:\n> On 2012/05/12 01:00:59, wtc wrote:\n> > \n> > On 2012/05/10 19:43:11, Ryan Sleevi wrote:\n> > > I assume this is where you were talking about gotos?\n> > \n> > Yes, it is.  Do you still prefer that we avoid goto here?\n> \n> Depends.\n> \n> Currently, the code always consumes the srtp_mki value (line 2055), even when\n> !found (line 2064). If that's the expected behaviour, then yeah, I think goto is\n> considered harmful.\n\nI don't think it matters either way, since we're going to generate an error.\n\nIMO the goto is clearer but I'm not going to go to the mat over it.","disapproval":false,"date":"2012-05-14 22:50:49.743868","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"http://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c\nFile net/third_party/nss/ssl/ssl3ext.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/ssl3ext.c#newcode2010\nnet/third_party/nss/ssl/ssl3ext.c:2010: */\n\nOn 2012/05/12 01:13:06, Ryan Sleevi wrote:\n>\n> This means you're now relying on ssl3_ConsumeHandshakeVariable to do the length\n> check.\n> \n> This is probably fine, but note that if the lengths don't match, this will force\n> SSL3_SendAlert() to be called. Is this what you want to happen?\n\nI didn't intend to force SSL3_SendAlert(), but I think it\nis fine to send a decode_error alert when an extension\ncannot be decoded because the length of the extension is\nincorrect.\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c\nFile net/third_party/nss/ssl/sslsock.c (right):\n\nhttp://codereview.chromium.org/9982019/diff/37002/net/third_party/nss/ssl/sslsock.c#newcode1633\nnet/third_party/nss/ssl/sslsock.c:1633: PORT_SetError(SEC_ERROR_INVALID_ARGS);\n\nOn 2012/05/12 01:13:06, Ryan Sleevi wrote:\n> \n> This would be an issue if a cipher suite ever needed to be removed, as it would\n> break clients still supplying the old cipher suite. I think that would argue in\n> favour of separating the API?\n\nI also came to the same conclusion that we probably should\nenable SRTP cipher suites individually, in the same way we\nenable TLS cipher suites.\n\nEkr: do you have time to implement an SSL_USE_SRTP socket\noption and the SSL_SRTPCipherPrefSet and SSL_SRTPCipherPrefGet\nfunctions, or do you want me to do that?\n\nI think we can omit the global preferences and just support\na model socket.","disapproval":false,"date":"2012-05-15 00:56:41.573282","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"lso came to the same conclusion that we probably should\r\n> enable SRTP cipher suites individually, in the same way we\r\n> enable TLS cipher suites.\r\n>\r\n> Ekr: do you have time to implement an SSL_USE_SRTP socket\r\n> option and the SSL_SRTPCipherPrefSet and SSL_SRTPCipherPrefGet\r\n> functions, or do you want me to do that?\r\n\r\nIt would be great if you were able to do it. I'm juggling a bunch\r\nof libjingle CLs today. Is it too much trouble?\r\n\r\n-Ekr\r\n","disapproval":false,"date":"2012-05-16 18:52:16.551940","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"Wan-Teh, are you able to to do this, or should I pick it back up?\r\n\r\nThanks,\r\n-Ekr\r\n\r\n\r\nOn Wed, May 16, 2012 at 11:51 AM, Eric Rescorla <ekr@rtfm.com> wrote:\r\n> lso came to the same conclusion that we probably should\r\n>> enable SRTP cipher suites individually, in the same way we\r\n>> enable TLS cipher suites.\r\n>>\r\n>> Ekr: do you have time to implement an SSL_USE_SRTP socket\r\n>> option and the SSL_SRTPCipherPrefSet and SSL_SRTPCipherPrefGet\r\n>> functions, or do you want me to do that?\r\n>\r\n> It would be great if you were able to do it. I'm juggling a bunch\r\n> of libjingle CLs today. Is it too much trouble?\r\n>\r\n> -Ekr\r\n","disapproval":false,"date":"2012-05-24 18:27:34.637550","approval":false},{"sender":"wtc@google.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Thu, May 24, 2012 at 11:26 AM, Eric Rescorla <ekr@rtfm.com> wrote:\r\n> Wan-Teh, are you able to to do this, or should I pick it back up?\r\n\r\nI haven't had time to do this, sorry.\r\n\r\nI think we probably should first make the current SSL_SetSRTPCiphers\r\nusable.  Its only major problem is the \"all or nothing\" behavior.  If\r\nwe can change it to fail only if none of the SRTP ciphers are\r\nsupported, then that would be an acceptable solution to me.\r\nAlternatively we can consider using the cipher suite array as an\r\nin/out argument, and let the caller determine if the actual enabled\r\nciphers are acceptable.\r\n\r\nI still think doing the SSL_SetSRTPCipherPref approach might be\r\nbetter, but I think it is also advantageous to make the current\r\napproach work, to allow testing.  Because of the backward\r\ncompatibility of NSS, we will need to be careful not to leak the\r\nSSL_SetSRTPCiphers function to the DLL export file.\r\n\r\nWan-Teh\r\n","disapproval":false,"date":"2012-05-24 18:46:31.791648","approval":false},{"sender":"ekr@rtfm.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Thu, May 24, 2012 at 11:46 AM, Wan-Teh Chang <wtc@google.com> wrote:\r\n> On Thu, May 24, 2012 at 11:26 AM, Eric Rescorla <ekr@rtfm.com> wrote:\r\n>> Wan-Teh, are you able to to do this, or should I pick it back up?\r\n>\r\n> I haven't had time to do this, sorry.\r\n>\r\n> I think we probably should first make the current SSL_SetSRTPCiphers\r\n> usable.  Its only major problem is the \"all or nothing\" behavior.  If\r\n> we can change it to fail only if none of the SRTP ciphers are\r\n> supported, then that would be an acceptable solution to me.\r\n> Alternatively we can consider using the cipher suite array as an\r\n> in/out argument, and let the caller determine if the actual enabled\r\n> ciphers are acceptable.\r\n\r\nThe first of these seems easiest. Basically, all that's required seems to\r\nbe to\r\n\r\n(1) have PRBool found = PR_FALSE; at the beginning,\r\n(2) Invert the test on 1629 to read if (*srtpCipher) { found = PR_TRUE; break;}\r\n(3) change line 1638 to read if (!found || ...) ...\r\n\r\nDo you need me to make a patch for this?\r\n\r\n\r\n> I still think doing the SSL_SetSRTPCipherPref approach might be\r\n> better, but I think it is also advantageous to make the current\r\n> approach work, to allow testing.  Because of the backward\r\n> compatibility of NSS, we will need to be careful not to leak the\r\n> SSL_SetSRTPCiphers function to the DLL export file.\r\n\r\nWFM\r\n\r\n-Ekr\r\n","disapproval":false,"date":"2012-05-24 22:57:26.183255","approval":false},{"sender":"wtc@google.com","recipients":["reply@chromiumcodereview.appspotmail.com"],"text":"On Thu, May 24, 2012 at 3:56 PM, Eric Rescorla <ekr@rtfm.com> wrote:\r\n> On Thu, May 24, 2012 at 11:46 AM, Wan-Teh Chang <wtc@google.com> wrote:\r\n>>\r\n>> I think we probably should first make the current SSL_SetSRTPCiphers\r\n>> usable.  Its only major problem is the \"all or nothing\" behavior.  If\r\n>> we can change it to fail only if none of the SRTP ciphers are\r\n>> supported, then that would be an acceptable solution to me.\r\n>> Alternatively we can consider using the cipher suite array as an\r\n>> in/out argument, and let the caller determine if the actual enabled\r\n>> ciphers are acceptable.\r\n>\r\n> The first of these seems easiest. Basically, all that's required seems to\r\n> be to\r\n>\r\n> (1) have PRBool found = PR_FALSE; at the beginning,\r\n> (2) Invert the test on 1629 to read if (*srtpCipher) { found = PR_TRUE; break;}\r\n> (3) change line 1638 to read if (!found || ...) ...\r\n>\r\n> Do you need me to make a patch for this?\r\n\r\nNo, I can make this patch.  I just wanted to run this idea by you.\r\n\r\nBasically, the  issue is whether \"all ciphers in the input array are\r\nacceptable\" or \"some of the ciphers in the input array are mandatory\".\r\n I think the latter is unlikely to be true because ultimately, if we\r\nare willing to allow the peer to select any ciphers that we offer,\r\nthen that means all ciphers in the input array are acceptable.\r\n\r\nDoes my reasoning make sense?\r\n\r\nWan-Teh\r\n","disapproval":false,"date":"2012-05-24 23:22:27.855509","approval":false},{"sender":"wtc@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Ekr: please review patch set 8. You can just review the delta\nbetween patch sets 7 and 8.  Thanks.\n\nI fixed the all-or-nothing behavior of SSL_SetSRTPCiphers.","disapproval":false,"date":"2012-06-02 01:19:57.353969","approval":false},{"sender":"ekr@rtfm.com","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"lgtm","disapproval":false,"date":"2012-06-03 15:44:07.789501","approval":true},{"sender":"rsleevi@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"lgtm","disapproval":false,"date":"2012-06-04 17:56:18.460089","approval":true},{"sender":"commit-bot@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/wtc@chromium.org/9982019/65002","disapproval":false,"date":"2012-06-05 13:17:47.268667","approval":false},{"sender":"commit-bot@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Try job failure for 9982019-65002 on win for step \"update\".\nhttp://build.chromium.org/p/tryserver.chromium/buildstatus?builder=win&number=14375\n\nStep \"update\" is always a major failure.\nLook at the try server FAQ for more details.","disapproval":false,"date":"2012-06-05 13:19:21.265125","approval":false},{"sender":"commit-bot@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/wtc@chromium.org/9982019/65002","disapproval":false,"date":"2012-06-05 14:53:57.382907","approval":false},{"sender":"commit-bot@chromium.org","recipients":["wtc@chromium.org","rsleevi@chromium.org","ekr@rtfm.com","wtc@google.com","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org"],"text":"Change committed as 140535","disapproval":false,"date":"2012-06-05 16:39:03.031132","approval":false}],"owner_email":"wtc@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src/","owner":"wtc","subject":"Implement RFC 5764 (DTLS-SRTP).","created":"2012-04-04 22:44:17.180238","patchsets":[1,5001,13001,24002,31002,37002,50002,57002,65002],"modified":"2012-06-05 16:39:03.147032","closed":true,"commit":false,"issue":9982019}