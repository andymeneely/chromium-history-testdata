{"description":"Add X509Certificate::IsIssuedByEncoded()\n\nThis new method is used to ensure that a given client certificate\nis issued by one of the CA names listed by the server, as they appear\nin the SSL Handshake \"Certificate Request\" message.\n\nThe patch also adds two new X509CertificateTest unit tests,\nmoves existing hard-coded DN tables to net/base/test_certificate_data.h to\nshare them between multiple test sources, and adds a\nfew new DN tables too.\n\nR=rsleevi@chromium.org,wtc@chromium.org,agl@chromium.org\nBUG=134418\nNOTRY=true\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=176371","cc":["chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"reviewers":["rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org"],"messages":[{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org"],"text":"This patch corresponds to the change suggested by Ryan in the comments of https://chromiumcodereview.appspot.com/11458012/\n\nThis is a first version, I could only compile it for Android, linux and linux_redux (will use the try bots for win / mac / ios).\n\nNote that this code make some rather strong assumptions because I didn't find some platform-specific APIs to do otherwise:\n\n- OpenSSL: The X509_NAME_cmp() implementation makes a\n  rather \"naive\" comparison of the list of RDNs. I.e.\n  it is order-dependent, so if the certificate issuer\n  lists the RDNs in a different order than in the X.500\n  name sent by the server, they won't match.\n\n  (my understanding is that order should not matter for\n  that kind of comparison).\n\n- NSS: I couldn't find a way to to a non-order dependent\n  comparison either. Actually, the only API I found is\n  essentially performing a byte-wise comparison of the\n  DER-encoded values. I'm really unsure this is sufficient.\n\n- Win/Mac: The changes here are purely speculative.\n\nSo please let me know if there is a better way to implement all this (I'm pretty sure there is).\n\nThanks","disapproval":false,"date":"2012-12-13 18:55:59.411600","approval":false},{"sender":"rsleevi@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org"],"text":"Thanks digit\n\nThis looks great, and is mostly ready to go. I mentioned the same sort of bug repeatedly, which is that rather than checking intermediate[x]->subject, you should be checking intermediate[x]->issuer - since you may be missing the final issuer certificate.\n\nFor the shared code between (IOS, NSS), I'd suggest taking a vector of CERTName & a vector of std::strings.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: valid_issuers))\nIt's a shame to have to reparse the CERTName here (we have it in cert_handle->issuer)\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode82\nnet/base/x509_certificate_ios.cc:82: return true;\nBUG: Rather then checking the subject, you should be checking issuer names here as well.\n\nIt's legal for intermediate_ca_certs[.size() - 1].issuer == some_valid_issuer, which would be missed by this algorithm.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_mac.cc\nFile net/base/x509_certificate_mac.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_mac.cc#newcode368\nnet/base/x509_certificate_mac.cc:368: valid_issuers))\nSTYLE: multi-line conditionals should have braces (also lines 373-375)\n\nBUG: See IOS bug about subject vs ISSUER\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_nss.cc\nFile net/base/x509_certificate_nss.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_nss.cc#newcode161\nnet/base/x509_certificate_nss.cc:161: valid_issuers))\nSTYLE: See comments re braces (also line 166-168)\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_nss.cc#newcode167\nnet/base/x509_certificate_nss.cc:167: valid_issuers))\nBUG: See comment in ios re subject vs issuer\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc\nFile net/base/x509_certificate_openssl.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode523\nnet/base/x509_certificate_openssl.cc:523: issuer = X509_get_subject_name(*it);\nBUG: See previous comments re: subject vs issuer\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode529\nnet/base/x509_certificate_openssl.cc:529: // and 'cert_names'.\nNot sure this comment really makes sense. Is it a continuation of some comment? which?\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode537\nnet/base/x509_certificate_openssl.cc:537: break;\nThis breaks the inner loop but keeps spinning the outer loop.\n\nJust return true here, and return false on line 542?\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc\nFile net/base/x509_certificate_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc#newcode129\nnet/base/x509_certificate_win.cc:129: const std::vector<std::string>& issuer_names) {\nSTYLE: Indenting is wrong\n\nbool IsCertNameBlobInIsuserList(\n    CERT_NAME_BLOB* name_blob,\n    const std::vector<std::string>& issuer_names) {\n}\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc#newcode490\nnet/base/x509_certificate_win.cc:490: valid_issuers))\nSTYLE: Indenting is messy here\n\nif (IsCertNameBlobInIssuerList(&cert_handle->pCertInfo->Issuer,\n                               valid_issuers)) {\n  return true;\n}\n\nSame on 496 as well\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc#newcode541\nnet/base/x509_util_nss.cc:541: if (SECITEM_ItemsAreEqual(&issuer, name))\nuse the CERTName comparison\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h\nFile net/base/x509_util_nss.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h#newcode80\nnet/base/x509_util_nss.h:80: SECItem* name,\nsee comments in iOS about making this a CERTName and saving some name parsing\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h#newcode81\nnet/base/x509_util_nss.h:81: const std::vector<std::string>& valid_issuers);\nPerhaps rather then passing a single SECItem for a name, along with a vector of strings, you have it pass in a vector of CERTName (collected from the CERTCertificate*s) and a vector of strings (collected from the SSL handshake)","disapproval":false,"date":"2012-12-13 19:49:05.332870","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org"],"text":"By the way, it seems that the order of RDN elements in a DER-encoded DN is strictly mandated by their encoding values. At least that's what is said in the \"Names\" section of the x509 guide at http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt\n\nThis probably means I shouldn't worry about this at all. Let me know if this is wrong.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: valid_issuers))\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> It's a shame to have to reparse the CERTName here (we have it in\n> cert_handle->issuer)\n\nI know, but cert_handle->issuer is a CertPrincipal which, has you already mentioned, should only be used for presentation. That's why I intentionally avoided using it here.\n\nI also wanted to use CERT_CompareName(), unfortunately NSS doesn't seem to provide _any_ API to create a CERTName object from its DER-encoded representation. The only alternative seems to create multiple CERTRDN objects first, then pass then to CERT_CreateName() / CERT_AddRDN(), amd each CERTRDN is created from a list of CERTAVA objects.\n\nThis is much more work, it requires parsing the DER encoded issuer names explicitely, and I'm not sure it will be much better than comparing the DER-encoded representations directly.\n\nI'd be happy if you or wtc@ had a better suggestion for this issue.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode82\nnet/base/x509_certificate_ios.cc:82: return true;\nThat makes sense, I'll fix all checks.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_mac.cc\nFile net/base/x509_certificate_mac.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_mac.cc#newcode368\nnet/base/x509_certificate_mac.cc:368: valid_issuers))\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> STYLE: multi-line conditionals should have braces (also lines 373-375)\n> \n> BUG: See IOS bug about subject vs ISSUER\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc\nFile net/base/x509_certificate_openssl.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode523\nnet/base/x509_certificate_openssl.cc:523: issuer = X509_get_subject_name(*it);\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> BUG: See previous comments re: subject vs issuer\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode529\nnet/base/x509_certificate_openssl.cc:529: // and 'cert_names'.\nYes, it's a left-over, I've removed it.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_openssl.cc#newcode537\nnet/base/x509_certificate_openssl.cc:537: break;\nDoh. Thanks for this.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc\nFile net/base/x509_certificate_win.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc#newcode129\nnet/base/x509_certificate_win.cc:129: const std::vector<std::string>& issuer_names) {\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> STYLE: Indenting is wrong\n> \n> bool IsCertNameBlobInIsuserList(\n>     CERT_NAME_BLOB* name_blob,\n>     const std::vector<std::string>& issuer_names) {\n> }\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_win.cc#newcode490\nnet/base/x509_certificate_win.cc:490: valid_issuers))\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> STYLE: Indenting is messy here\n> \n> if (IsCertNameBlobInIssuerList(&cert_handle->pCertInfo->Issuer,\n>                                valid_issuers)) {\n>   return true;\n> }\n> \n> Same on 496 as well\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc#newcode541\nnet/base/x509_util_nss.cc:541: if (SECITEM_ItemsAreEqual(&issuer, name))\nOn 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> use the CERTName comparison\n\nThat's not do-able for the reason explained previously (no NSS API to create a CERTName from a DER-encoded byte array).\nI've added a comment explaining this.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h\nFile net/base/x509_util_nss.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h#newcode81\nnet/base/x509_util_nss.h:81: const std::vector<std::string>& valid_issuers);\nYes, I've actually changed the function to take a vector of CERTCertificate*, which makes it easier to reuse for iOS too.","disapproval":false,"date":"2012-12-14 17:54:33.501030","approval":false},{"sender":"agl@chromium.org","recipients":["reply@chromiumcodereview-hr.appspotmail.com"],"text":"On Fri, Dec 14, 2012 at 12:54 PM,  <digit@chromium.org> wrote:\r\n> By the way, it seems that the order of RDN elements in a DER-encoded DN is\r\n> strictly mandated by their encoding values. At least that's what is said in\r\n> the\r\n> \"Names\" section of the x509 guide at\r\n> http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt\r\n>\r\n> This probably means I shouldn't worry about this at all. Let me know if this\r\n> is\r\n> wrong.\r\n\r\nI believe that standard says that you should trim whitespace from the\r\nstring values before comparing. I can't remember what it says about\r\norder.\r\n\r\nIn practice, however, a byte-wise compare of the DER encoding is what's used.\r\n\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n","disapproval":false,"date":"2012-12-14 18:02:11.001320","approval":false},{"sender":"rsleevi@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org"],"text":"Trim whitespace, normalize case, normalize i18n representations, do order-less comparison for the SETs and in-order comparison for the SEQUENCEs.\n\nThis is a subset of the X.500 rules, and goes back to RFC 2459. In a surprising move for Apple, this is one of the few places where they followed the specs very closely, which means that all platform APIs (NSS, CryptoAPI, CDSA) are doing name comparison correctly. Apple even optimized a step further, by storing the normalized name form, which it then stores re-encoded, so that it can just do a DER->DER comparison of normalized name forms.\n\nWhile we can add something to NSS to do so (which seems useful and a trivial function for NSS, since it already has the normalization code), at least using the correct type seems the proper way.\n\nApple & NSS follow RFC 3280 rules - in that they don't handle IDNA - but Microsoft follows RFC 5280 rules, which do.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: valid_issuers))\nOn 2012/12/14 17:54:33, digit1 wrote:\n> On 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> > It's a shame to have to reparse the CERTName here (we have it in\n> > cert_handle->issuer)\n> \n> I know, but cert_handle->issuer is a CertPrincipal which, has you already\n> mentioned, should only be used for presentation. That's why I intentionally\n> avoided using it here.\n\ncert_handle->issuer is a CERTName, which is the canonical type, not a CertPrincipal.\n\nNote, I was talking about cert_handle->issuer, not this->issuer_\n\n> \n> I also wanted to use CERT_CompareName(), unfortunately NSS doesn't seem to\n> provide _any_ API to create a CERTName object from its DER-encoded\n> representation. The only alternative seems to create multiple CERTRDN objects\n> first, then pass then to CERT_CreateName() / CERT_AddRDN(), amd each CERTRDN is\n> created from a list of CERTAVA objects.\n\ntypedef scoped_ptr_malloc<CERTName, NSSDestroyer<CERTName, CERT_DestroyName> > ScopedCERTName;\n\n\nSECItem data;\ndata.len = ...\ndata.data = ...;\n\nScopedPLArenaPool arena(PORT_NewArena(DER_DEFAULT_CHUNKSIZE));\nif (!arena.get());\n  return false;\nScopedCERTName name(PORT_ArenaZNew(arena, CERTName));\nif (!name.get())\n  return false;\nSECStatus rv = SEC_ASN1DecodeItem(arena.get(), name.get(), SEC_ASN1_GET(CERT_NameTemplate), &data);\nif (rv != SECSuccess)\n  return false;\n\n/* Setting ->arena will ensure that name releases arena when it's done. If this is all stack local, then you don't need to do this and just let the arena pool handle cleanup */\nname->arena = arena.release();\n\n/* do something with a CERTName here */\n\nreturn true;\n\n> \n> This is much more work, it requires parsing the DER encoded issuer names\n> explicitely, and I'm not sure it will be much better than comparing the\n> DER-encoded representations directly.\n\nIt also yields the RFC-correct output, which comparing the DER-encoded representations does not.\n\n> \n> I'd be happy if you or wtc@ had a better suggestion for this issue.\n>\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.cc#newcode541\nnet/base/x509_util_nss.cc:541: if (SECITEM_ItemsAreEqual(&issuer, name))\nOn 2012/12/14 17:54:33, digit1 wrote:\n> On 2012/12/13 19:49:05, Ryan Sleevi wrote:\n> > use the CERTName comparison\n> \n> That's not do-able for the reason explained previously (no NSS API to create a\n> CERTName from a DER-encoded byte array).\n> I've added a comment explaining this.\n\nSee comments about the NSS API to use to do this :)\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h\nFile net/base/x509_util_nss.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_util_nss.h#newcode81\nnet/base/x509_util_nss.h:81: const std::vector<std::string>& valid_issuers);\nOn 2012/12/14 17:54:33, digit1 wrote:\n> Yes, I've actually changed the function to take a vector of CERTCertificate*,\n> which makes it easier to reuse for iOS too.\n\nThat works too","disapproval":false,"date":"2012-12-14 18:16:41.993470","approval":false},{"sender":"rsleevi@chromium.org","recipients":["reply@chromiumcodereview-hr.appspotmail.com"],"text":"On Fri, Dec 14, 2012 at 9:54 AM,  <digit@chromium.org> wrote:\r\n> By the way, it seems that the order of RDN elements in a DER-encoded DN is\r\n> strictly mandated by their encoding values. At least that's what is said in\r\n> the\r\n> \"Names\" section of the x509 guide at\r\n> http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt\r\n>\r\n> This probably means I shouldn't worry about this at all. Let me know if this\r\n> is\r\n> wrong.\r\n\r\nThis is how things SHOULD be encoded when encoding DER.\r\n\r\nIn practice though, most certificate *DE*coders use BER processing\r\nrules, since DER is strictly a subset of BER, and as a result, have\r\nnot been particular about enforcing this requirement - as long as the\r\nstructure decodes under BER rules.\r\n\r\nThere was some discussion of this back when CertID was being worked on\r\n- http://www.ietf.org/mail-archive/web/certid/current/msg00140.html\r\nfor the start of the thread.\r\n\r\nI have seen CAs that do insane/inane things, such as encoding the\r\nentire name \"hierarchy\" via an RDN + AVA pairs, and failing to\r\nproperly sort it. These are typically enterprise CAs, although I think\r\nit was a Spanish regional CA where I also saw this.\r\n\r\nComparing via the name comparison functions should \"Do the Right Thing\" though.\r\n","disapproval":false,"date":"2012-12-14 19:09:20.394410","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/3001/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: valid_issuers))\nThank you so much for this, I've implemented this in net/base/x509_util_nss.cc, this makes the use of CERT_CompareName() possible.","disapproval":false,"date":"2012-12-18 16:19:24.598040","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"I've added David Roger to review the iOS portion of the patch. Any reviewer recommendations for the Windows one?\n\nApart from that, this should now be stable, though I'd like to add a unit test or two.","disapproval":false,"date":"2012-12-19 12:07:43.391070","approval":false},{"sender":"droger@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"LGTM\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: // Convert to scoped CERTName* list.\nOptional nit: you could consider sharing more code with x509_certificate_nss.cc, for example by adding a new method to x509_util_nss:\nIsIssuedByEncoded(const x509_util_ios::NSSCertChain& chain,\n                  const std::vector<std::string>& valid_issuers)\n\nIt's only a few lines, so it may not worth it.  I'm just throwing this out as an idea. If you've already discussed that issue, just ignore this comment.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc#newcode80\nnet/base/x509_certificate_ios.cc:80: return false;\nNit: I think you need curly braces for multi-line ifs. If you change this, also change the similar code in x509_certificate_nss.cc.","disapproval":false,"date":"2012-12-19 12:26:23.122750","approval":true},{"sender":"droger@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Oops, ignore my first comment, it was wrong.\n\n> Optional nit: you could consider sharing more code with x509_certificate_nss.cc,\n> for example by adding a new method to x509_util_nss:\n> IsIssuedByEncoded(const x509_util_ios::NSSCertChain& chain,\n>                   const std::vector<std::string>& valid_issuers)\n> \n> It's only a few lines, so it may not worth it.  I'm just throwing this out as an\n> idea. If you've already discussed that issue, just ignore this comment.\n>","disapproval":false,"date":"2012-12-19 12:27:26.253850","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc#newcode75\nnet/base/x509_certificate_ios.cc:75: // Convert to scoped CERTName* list.\nThat's what I tried originally in a previous patch, but as you discovered, it's not really possible :)\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/20012/net/base/x509_certificate_ios.cc#newcode80\nnet/base/x509_certificate_ios.cc:80: return false;\nThanks, I've fixed this in the latest patch.","disapproval":false,"date":"2012-12-19 12:58:42.132250","approval":false},{"sender":"rsleevi@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Mostly nits.\n\nAlso, please add unit tests. You can see in x509_cert_types_unittest.cc we have some DER-encoded distinguished names as part of the unit test data.\n\nYou could move these into net/base/test_certificate_data.h, so that they're in a common location for the two unit tests, then load several of our test certificates ( see net/base/cert_test_util.h ) and do positive and negative matching unit tests.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc#newcode79\nnet/base/x509_certificate_ios.cc:79: valid_issuers, arena.get(), &issuers)) {\nnit: indent is incorrect here\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc#newcode82\nnet/base/x509_certificate_ios.cc:82: // Do the comparison.\nnit: Nix this comment\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_nss.cc\nFile net/base/x509_certificate_nss.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_nss.cc#newcode171\nnet/base/x509_certificate_nss.cc:171: valid_issuers, arena.get(), &issuers))\nnit: Both indent and bracing are incorrect here\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_openssl.cc\nFile net/base/x509_certificate_openssl.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_openssl.cc#newcode512\nnet/base/x509_certificate_openssl.cc:512: cert_names(sk_X509_NAME_new_null());\nNot sure why you're not just using a vector here?\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode278\nnet/base/x509_util_nss.cc:278: crypto::NSSDestroyer<CERTName, CERT_DestroyName> > ScopedCERTName;\nstyle nit: This indenting is wrong\n\ntypedef scoped_ptr_malloc<\n    CERTName,\n    crypto::NSSDestroyer<CERTName, CERT_DestroyName> > ScopedCERTName;\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode299\nnet/base/x509_util_nss.cc:299: SEC_ASN1_GET(CERT_NameTemplate), &item);\nstyle: This indent is incorrect (minimally, should be exactly 4 spaces here), but can be rewritten as follows\n\nSECStatus rv = SEC_ASN1DecodeItem(\n    arena, name.get(), SEC_ASN1_GET(CERT_NameTemplate), &item);\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode573\nnet/base/x509_util_nss.cc:573: }\nRAII-safe alternative:\n\nstd::vector<CERTName*> result;\nfor (size_t i = 0; ...) {\n  ...\n}\nif (result.size() == encoded_issuers.size()) {\n  out->swap(result);\n  return true;\n}\n\nfor (size_t i = 0; i < result.size(); ++i)\n  CERT_DestroyName(result[i]);\nreturn false;\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.h\nFile net/base/x509_util_nss.h (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.h#newcode81\nnet/base/x509_util_nss.h:81: // intermediate CERTName objects pushed to |out|.\nnit: I generally dislike APIs that require \"On failure, the caller must cleanup some temporary\", since it prevents writing easy shortcuts.\n\nHaving |out| be unmodified on failure is easy (see next line) and lets you write\n\nif (!GetIssuersFromEncodedList(...))\n  return false;\n\nWhich is the better pattern.","disapproval":false,"date":"2012-12-21 22:09:50.831360","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc\nFile net/base/x509_certificate_ios.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc#newcode79\nnet/base/x509_certificate_ios.cc:79: valid_issuers, arena.get(), &issuers)) {\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> nit: indent is incorrect here\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_ios.cc#newcode82\nnet/base/x509_certificate_ios.cc:82: // Do the comparison.\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> nit: Nix this comment\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_nss.cc\nFile net/base/x509_certificate_nss.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_nss.cc#newcode171\nnet/base/x509_certificate_nss.cc:171: valid_issuers, arena.get(), &issuers))\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> nit: Both indent and bracing are incorrect here\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_openssl.cc\nFile net/base/x509_certificate_openssl.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_certificate_openssl.cc#newcode512\nnet/base/x509_certificate_openssl.cc:512: cert_names(sk_X509_NAME_new_null());\nThat works too.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode278\nnet/base/x509_util_nss.cc:278: crypto::NSSDestroyer<CERTName, CERT_DestroyName> > ScopedCERTName;\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> style nit: This indenting is wrong\n> \n> typedef scoped_ptr_malloc<\n>     CERTName,\n>     crypto::NSSDestroyer<CERTName, CERT_DestroyName> > ScopedCERTName;\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode299\nnet/base/x509_util_nss.cc:299: SEC_ASN1_GET(CERT_NameTemplate), &item);\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> style: This indent is incorrect (minimally, should be exactly 4 spaces here),\n> but can be rewritten as follows\n> \n> SECStatus rv = SEC_ASN1DecodeItem(\n>     arena, name.get(), SEC_ASN1_GET(CERT_NameTemplate), &item);\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.cc#newcode573\nnet/base/x509_util_nss.cc:573: }\nOn 2012/12/21 22:09:50, Ryan Sleevi wrote:\n> RAII-safe alternative:\n> \n> std::vector<CERTName*> result;\n> for (size_t i = 0; ...) {\n>   ...\n> }\n> if (result.size() == encoded_issuers.size()) {\n>   out->swap(result);\n>   return true;\n> }\n> \n> for (size_t i = 0; i < result.size(); ++i)\n>   CERT_DestroyName(result[i]);\n> return false;\n\nDone.\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.h\nFile net/base/x509_util_nss.h (right):\n\nhttps://codereview.chromium.org/11579002/diff/31001/net/base/x509_util_nss.h#newcode81\nnet/base/x509_util_nss.h:81: // intermediate CERTName objects pushed to |out|.\nThanks, I'll fix this.","disapproval":false,"date":"2013-01-07 13:58:40.073300","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"The latest patch adds a unit test that is slightly limited, each tested certificate is tested against its direct issuer DN. I'd like to add a new test that actually checks a certificate chain's intermediate CA issuers too.\n\nI'm still uploading this simpler version to launch all the new tests on all build bots, in order to detected implementation problems asap.\n\nNote that this moves the hard-coded DN constants to test_certificate_data.h, and also adds two new DNs here (ThawteDN + MITDN)","disapproval":false,"date":"2013-01-07 17:53:22.048780","approval":false},{"sender":"rsleevi@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"LGTM, mod BUG below.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/43002/net/base/test_certificate_data.h\nFile net/base/test_certificate_data.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/43002/net/base/test_certificate_data.h#newcode488\nnet/base/test_certificate_data.h:488: const uint8 VARIABLE_IS_NOT_USED VerisignDN[] = {\nWe'll want to fix the variable naming in a future cleanup CL.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/43002/net/base/x509_util_nss.cc\nFile net/base/x509_util_nss.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/43002/net/base/x509_util_nss.cc#newcode589\nnet/base/x509_util_nss.cc:589: if (CERT_CompareName(valid_issuers[i], cert_issuer))\nCERT_CompareName returns a SECComparison.\n\nif (CERT_CompareName(valid_issuers[i], cert_issuer) == SECEqual) {\n}","disapproval":false,"date":"2013-01-07 18:11:13.828600","approval":true},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Patch set 13 adds a new unit test (and corresponding hard-coded DN tables) to check that IsIssuedByEncoded() also works when the issuers are listed in the chain's intermediate certificate (instead of the certificate's own Issuer entry).\n\nPatch set 14 is the same than 13, for some reason \"git cl upload\" complained that base files were missing, but it looks like everything went to the review server correctly.","disapproval":false,"date":"2013-01-08 14:25:13.400920","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11579002/diff/58014/net/base/x509_certificate_unittest.cc\nFile net/base/x509_certificate_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58014/net/base/x509_certificate_unittest.cc#newcode394\nnet/base/x509_certificate_unittest.cc:394: ImportCertFromFile(certs_dir, \"salesforce_com_test.pem\");\nmmm, I really don't know what caused this, I'll fix it.","disapproval":false,"date":"2013-01-08 14:37:23.389550","approval":false},{"sender":"rsleevi@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/test_certificate_data.h\nFile net/base/test_certificate_data.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/test_certificate_data.h#newcode485\nnet/base/test_certificate_data.h:485: // Compute END - START, save it into LEN.\nThis comment needs reworking, because it's misleading or broken:\n\n1) countryName is not required in the name, so trying to be clearer about which fields contain it\n2) Easier way to compute the length\n\n// To output the subject or issuer of a certificate:\n//\n// openssl asnparse -i -inform PEM -in <cert>\n//\n// The output will contain\n// SEQUENCE  [This is the issuer name]\n//   ...\n// SEQUENCE  [This is the validity period]\n//   UTCTIME (or GENERALTIME)\n//   UTCTIME\n// SEQUENCE  [This is the subject]\n//   ...\n//\n// The OFFSET is the first column before the : (eg: '21:d=2', the offset is 21) for the SEQUENCE you're interested in\n// The LENGTH is hl + l\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/x509_certificate_unittest.cc\nFile net/base/x509_certificate_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/x509_certificate_unittest.cc#newcode817\nnet/base/x509_certificate_unittest.cc:817: EXPECT_TRUE(cert_chain->IsIssuedByEncoded(issuers));\nAdd some negative tests here as well, since a compatible interface could just always return true for IsIssuedByEncoded without failing a test here.","disapproval":false,"date":"2013-01-08 20:14:18.743300","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"https://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/test_certificate_data.h\nFile net/base/test_certificate_data.h (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/test_certificate_data.h#newcode485\nnet/base/test_certificate_data.h:485: // Compute END - START, save it into LEN.\nOn 2013/01/08 20:14:18, Ryan Sleevi wrote:\n> This comment needs reworking, because it's misleading or broken:\n> \n> 1) countryName is not required in the name, so trying to be clearer about which\n> fields contain it\n> 2) Easier way to compute the length\n> \n> // To output the subject or issuer of a certificate:\n> //\n> // openssl asnparse -i -inform PEM -in <cert>\n> //\n> // The output will contain\n> // SEQUENCE  [This is the issuer name]\n> //   ...\n> // SEQUENCE  [This is the validity period]\n> //   UTCTIME (or GENERALTIME)\n> //   UTCTIME\n> // SEQUENCE  [This is the subject]\n> //   ...\n> //\n> // The OFFSET is the first column before the : (eg: '21:d=2', the offset is 21)\n> for the SEQUENCE you're interested in\n> // The LENGTH is hl + l\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/x509_certificate_unittest.cc\nFile net/base/x509_certificate_unittest.cc (right):\n\nhttps://chromiumcodereview.appspot.com/11579002/diff/58015/net/base/x509_certificate_unittest.cc#newcode817\nnet/base/x509_certificate_unittest.cc:817: EXPECT_TRUE(cert_chain->IsIssuedByEncoded(issuers));\nOn 2013/01/08 20:14:18, Ryan Sleevi wrote:\n> Add some negative tests here as well, since a compatible interface could just\n> always return true for IsIssuedByEncoded without failing a test here.\n\nDone.","disapproval":false,"date":"2013-01-09 14:01:46.233370","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Fine, since none of the failures are related to this code in any way, I'll commit it as NOTRY.","disapproval":false,"date":"2013-01-09 15:31:04.428780","approval":false},{"sender":"commit-bot@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/digit@chromium.org/11579002/67002","disapproval":false,"date":"2013-01-09 15:31:38.966830","approval":false},{"sender":"commit-bot@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Presubmit check for 11579002-67002 failed and returned exit status 1.\n\n\nRunning presubmit commit checks ...\n\n** Presubmit Warnings **\nFound lines longer than 80 characters (first 5 shown).\n  net/base/test_certificate_data.h, line 498, 84 chars \\\n  net/base/test_certificate_data.h, line 513, 97 chars \\\n  net/base/test_certificate_data.h, line 537, 85 chars \\\n  net/base/test_certificate_data.h, line 541, 83 chars \\\n  net/base/test_certificate_data.h, line 579, 96 chars\n\nPresubmit checks took 1.7s to calculate.","disapproval":false,"date":"2013-01-09 15:31:45.134240","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"On 2013/01/09 15:31:45, I haz the power (commit-bot) wrote:\n> Presubmit check for 11579002-67002 failed and returned exit status 1.\n> \n> \n> Running presubmit commit checks ...\n> \n> ** Presubmit Warnings **\n> Found lines longer than 80 characters (first 5 shown).\n>   net/base/test_certificate_data.h, line 498, 84 chars \\\n>   net/base/test_certificate_data.h, line 513, 97 chars \\\n>   net/base/test_certificate_data.h, line 537, 85 chars \\\n>   net/base/test_certificate_data.h, line 541, 83 chars \\\n>   net/base/test_certificate_data.h, line 579, 96 chars\n> \n> Presubmit checks took 1.7s to calculate.\n\nHmmm, these are for existing lines that weren't modified by this commit. I'll guess I'll have to reformat them then.","disapproval":false,"date":"2013-01-09 15:35:12.089060","approval":false},{"sender":"digit@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Failures are not related to this test, as usual. So committing now.","disapproval":false,"date":"2013-01-11 16:33:27.989590","approval":false},{"sender":"commit-bot@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/digit@chromium.org/11579002/78001","disapproval":false,"date":"2013-01-11 16:33:43.202500","approval":false},{"sender":"commit-bot@chromium.org","recipients":["digit@chromium.org","rsleevi@chromium.org","wtc@chromium.org","agl@chromium.org","droger@chromium.org","chromium-reviews@chromium.org","cbentzel+watch@chromium.org","darin-cc@chromium.org","sail+watch@chromium.org","ppi@chromium.org"],"text":"Change committed as 176371","disapproval":false,"date":"2013-01-11 16:37:03.425140","approval":false}],"owner_email":"digit@chromium.org","private":false,"base_url":"http://git.chromium.org/chromium/src.git@master","owner":"digit1","subject":"Add X509Certificate::IsIssuedByEncoded()","created":"2012-12-13 18:32:55.348380","patchsets":[1,3001,1002,14001,19001,8002,22002,20012,31001,41001,43002,57001,46016,58014,58015,67002,58030,78001],"modified":"2013-01-11 16:37:03.654380","closed":true,"commit":false,"issue":11579002}