{"description":"NaCl: enable meta-based validation for shared libraries.\n\nThis is the Chrome-side half of a CL to allow mmaping and skipping validation\nfor chrome-extension: files we have seen before and know are safe.  To do this\nwe need to know the path of the file on disk, but we don't entirely trust the\nrenderer not to tamper with it.  To work around this, a nonce is passed along\nwith the file handle.  This nonce can be used by the NaCl process to acquire the\nfile handle directly from the browser process, as well as a fresh copy of the\nfile handle.\n\nThis change significantly revises the OpenNaClExecutable method of the\nPPB_NaCl_Private interface.  The method was added anticipation of this CL, but\nthe overall design shifted after the method was added.\n\nBUG=https://code.google.com/p/chromium/issues/detail?id=224434\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=202278\n\nR=dmichael@chromium.org, jschuh@chromium.org, mseaborn@chromium.org\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=202702","cc":["chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"reviewers":["dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","commit-bot@chromium.org"],"messages":[{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org"],"text":"PPAPI OWNER: dmichael@chromium.org\nNaCl OWNER: mseaborn@chromium.org\nIPC security OWNER: jschuh@chromium.org\nFYI: sehr@chromium.org, bbudge@chromium.org\n\nThis is the Chrome-side half of a CL to allow mmaping and skipping validation for chrome-extension: files we have seen before and know are safe.  To do this we need to know the path of the file on disk, but we don't entirely trust the renderer not to tamper with it.  To work around this, a nonce is passed along with the file handle.  This nonce can be used by the NaCl process to acquire the file handle directly from the browser process, as well as a fresh copy of the file handle.\n\nThis is the NaCl-side CL: https://codereview.chromium.org/15039022/\n\nThis CL has been tested using a unified diff of both changes.","disapproval":false,"date":"2013-05-13 20:49:09.132750","approval":false},{"sender":"dmichael@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"ppapi stuff looks pretty straightforward, though I don't feel qualified to comment on the nonce approach. I'm guessing that's already been vetted in another forum?\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode177\nppapi/native_client/src/trusted/plugin/file_downloader.cc:177: return info;\nI find these error returns less obvious now. Not sure of a nicer way to do it. You could maybe do:\nreturn { NACL_NO_FILE_DESC, nonce };\n? That has the downside that NaClFileInfo can only change by appending, though.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode179\nppapi/native_client/src/trusted/plugin/service_runtime.cc:179: &error_info, &op_complete);\nI know this isn't your fault, but this seems to warrant a comment to me: to_open is made on the heap, but has pointers to stack variables (and |info| which I guess comes from SRPC?). It appears that to_open will be deleted in the continuation, and that must happen in another thread before this function exits. So I think it's all OK, but it looks fishy at first glance.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.h\nFile ppapi/native_client/src/trusted/plugin/service_runtime.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.h#newcode72\nppapi/native_client/src/trusted/plugin/service_runtime.h:72: file_info(file_info),\nplease use distinct names for the parameter and the member.","disapproval":false,"date":"2013-05-15 18:37:53.029230","approval":false},{"sender":"bennet.yee@gmail.com","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/1/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/chrome/browser/nacl_host/nacl_process_host.cc#newcode961\nchrome/browser/nacl_host/nacl_process_host.cc:961: if (!NaClBrowser::GetInstance()->GetFilePath(nonce, &file_path)){\nthis should never happen in normal operation -- and is a good signal that the renderer and/or the NaCl module was compromised.  perhaps logging something?  kill either the renderer or the NaCl module, or both?  justin: any advice?","disapproval":false,"date":"2013-05-16 01:52:48.615310","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"PTAL\n\nhttps://codereview.chromium.org/14750007/diff/1/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/chrome/browser/nacl_host/nacl_process_host.cc#newcode961\nchrome/browser/nacl_host/nacl_process_host.cc:961: if (!NaClBrowser::GetInstance()->GetFilePath(nonce, &file_path)){\nOn 2013/05/16 01:52:48, bennet.yee wrote:\n> this should never happen in normal operation -- and is a good signal that the\n> renderer and/or the NaCl module was compromised.  perhaps logging something? \n> kill either the renderer or the NaCl module, or both?  justin: any advice?\n\nThis could happen someone launches 10+ NaCl modules at once.  The file path cache has a limited size, and it will evict the oldest entry.  Queries for evicted entries will fail gracefully.  Added a comment.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode177\nppapi/native_client/src/trusted/plugin/file_downloader.cc:177: return info;\nOn 2013/05/15 18:37:53, dmichael wrote:\n> I find these error returns less obvious now. Not sure of a nicer way to do it.\n> You could maybe do:\n> return { NACL_NO_FILE_DESC, nonce };\n> ? That has the downside that NaClFileInfo can only change by appending, though.\n\nThe file info structure is defined in the NaCl repo, so I want to avoid any assumptions about the layout.  I get what you're saying and considered it myself, but didn't see a better way.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.h\nFile ppapi/native_client/src/trusted/plugin/service_runtime.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.h#newcode72\nppapi/native_client/src/trusted/plugin/service_runtime.h:72: file_info(file_info),\nOn 2013/05/15 18:37:53, dmichael wrote:\n> please use distinct names for the parameter and the member.\n\nDone.","disapproval":false,"date":"2013-05-16 16:38:17.123750","approval":false},{"sender":"dmichael@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode177\nppapi/native_client/src/trusted/plugin/file_downloader.cc:177: return info;\nOn 2013/05/16 16:38:17, Nick Bray (chromium) wrote:\n> On 2013/05/15 18:37:53, dmichael wrote:\n> > I find these error returns less obvious now. Not sure of a nicer way to do it.\n> > You could maybe do:\n> > return { NACL_NO_FILE_DESC, nonce };\n> > ? That has the downside that NaClFileInfo can only change by appending,\n> though.\n> \n> The file info structure is defined in the NaCl repo, so I want to avoid any\n> assumptions about the layout.  I get what you're saying and considered it\n> myself, but didn't see a better way.\nHow about a simple little helper function in the unnamed namespace, and do:\nMakeNaClFileInfo(NACL_NO_FILE_DESC, nonce);\nhere.\nMakeNaClFileInfo would do the memset and assign those fields without making assumptions about layout.\n\nOr if you have any better ideas, I'm open. I would just like it to be super obvious that these branches are error conditions somehow.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode179\nppapi/native_client/src/trusted/plugin/service_runtime.cc:179: &error_info, &op_complete);\nOn 2013/05/15 18:37:53, dmichael wrote:\n> I know this isn't your fault, but this seems to warrant a comment to me: to_open\n> is made on the heap, but has pointers to stack variables (and |info| which I\n> guess comes from SRPC?). It appears that to_open will be deleted in the\n> continuation, and that must happen in another thread before this function exits.\n> So I think it's all OK, but it looks fishy at first glance.\nCould you comment this a little, pretty please? The way this method works by jumping threads and shuffling pointers around is unusual and a bit tricky. It would be helpful to have a high-level comment about what it's doing (which will also hopefully explain to the reader why it's okay to pass stack pointers to this heap object).","disapproval":false,"date":"2013-05-16 17:08:35.132190","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"PTAL\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode177\nppapi/native_client/src/trusted/plugin/file_downloader.cc:177: return info;\nOn 2013/05/16 17:08:35, dmichael wrote:\n> On 2013/05/16 16:38:17, Nick Bray (chromium) wrote:\n> > On 2013/05/15 18:37:53, dmichael wrote:\n> > > I find these error returns less obvious now. Not sure of a nicer way to do\n> it.\n> > > You could maybe do:\n> > > return { NACL_NO_FILE_DESC, nonce };\n> > > ? That has the downside that NaClFileInfo can only change by appending,\n> > though.\n> > \n> > The file info structure is defined in the NaCl repo, so I want to avoid any\n> > assumptions about the layout.  I get what you're saying and considered it\n> > myself, but didn't see a better way.\n> How about a simple little helper function in the unnamed namespace, and do:\n> MakeNaClFileInfo(NACL_NO_FILE_DESC, nonce);\n> here.\n> MakeNaClFileInfo would do the memset and assign those fields without making\n> assumptions about layout.\n> \n> Or if you have any better ideas, I'm open. I would just like it to be super\n> obvious that these branches are error conditions somehow.\n\nDidn't think of that one.  Good idea.  Done.\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/1/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode179\nppapi/native_client/src/trusted/plugin/service_runtime.cc:179: &error_info, &op_complete);\nOn 2013/05/16 17:08:35, dmichael wrote:\n> On 2013/05/15 18:37:53, dmichael wrote:\n> > I know this isn't your fault, but this seems to warrant a comment to me:\n> to_open\n> > is made on the heap, but has pointers to stack variables (and |info| which I\n> > guess comes from SRPC?). It appears that to_open will be deleted in the\n> > continuation, and that must happen in another thread before this function\n> exits.\n> > So I think it's all OK, but it looks fishy at first glance.\n> Could you comment this a little, pretty please? The way this method works by\n> jumping threads and shuffling pointers around is unusual and a bit tricky. It\n> would be helpful to have a high-level comment about what it's doing (which will\n> also hopefully explain to the reader why it's okay to pass stack pointers to\n> this heap object).\n\nDone.","disapproval":false,"date":"2013-05-16 17:44:15.287430","approval":false},{"sender":"dmichael@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"ppapi/ lgtm","disapproval":false,"date":"2013-05-16 18:06:38.454090","approval":true},{"sender":"mseaborn@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"> This is the Chrome-side half of a CL to allow mmaping and\n> skipping validation for chrome-extension: files we have seen\n> before and know are safe.  To do this we need to know the path\n> of the file on disk, but we don't entirely trust the renderer\n> not to tamper with it.  To work around this, a nonce is passed\n> along with the file handle.  This nonce can be used by the NaCl\n> process to acquire the file handle directly from the browser\n> process, as well as a fresh copy of the file handle.\n\nPlease put the description above into the commit message.\n\nAlso, is there a canonical place that the whole nonce/token scheme can be explained?  Maybe explain it next to PutFilePath()/GetFilePath() in nacl_browser.h?\n\nIn particular, explain the attack scenario you're trying to prevent, which is:\n * Compromised renderer compromises a NaCl process and gets it to put bad results into the NaCl validation cache.  This then allows a web page (maybe from an uncompromised renderer) to run a NaCl nexe which can escape from the NaCl sandbox.  (But isn't this scenario possible with the hash-based validation caching anyway?)\n\nThe attack you're potentially opening up is:\n * Compromised NaCl process guesses nonce (file token) used for another NaCl process (running under a different origin) and thereby reads data from the other origin.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc\nFile chrome/browser/nacl_host/nacl_browser.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode117\nchrome/browser/nacl_host/nacl_browser.cc:117: // allow a sandbox escape.\n\"NaCl inner sandbox escape\"?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode122\nchrome/browser/nacl_host/nacl_browser.cc:122: base::PLATFORM_FILE_READ |\nMaybe format as:\n(FLAG |\n FLAG |\n FLAG)\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode131\nchrome/browser/nacl_host/nacl_browser.cc:131: // to an extension directory could allow a sandbox escape.\nSame here - which sandbox?  Probably not the inner sandbox this time, but certainly some Linux outer sandboxes.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode134\nchrome/browser/nacl_host/nacl_browser.cc:134: {\nPut on previous line\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode156\nchrome/browser/nacl_host/nacl_browser.cc:156: path_cache_(10),\nFrom discussion in person:  10 is the number of requests that can be in progress at once.  If you have 11 requests in progress simultaneously, some can fail.  So this isn't a cache -- cache misses shouldn't affect correctness.\n\nSo you either need to fix that, or put in a big TODO and explanation here of the meaning of 10.  And don't call it \"path_cache_\". :-)\n\nWhy is this limit set so low when you're only mapping IDs -> filenames?  It's not like this is holding on to file descriptors.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode413\nchrome/browser/nacl_host/nacl_browser.cc:413: nonce = base::RandUint64();\nI'm not sure 'nonce' is the appropriate term here, since it suggests the number is unguessable, that this is a cryptographic protocol, etc., which isn't the case.\n\nSomething like \"file_token\" instead, perhaps?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode416\nchrome/browser/nacl_host/nacl_browser.cc:416: if (nonce != 0) {\nHas the nonce == 0 code path ever been executed? :-)\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h\nFile chrome/browser/nacl_host/nacl_browser.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode21\nchrome/browser/nacl_host/nacl_browser.h:21: // Open an immutable executable file that can be mmaped.\n\"mmapped\"\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode22\nchrome/browser/nacl_host/nacl_browser.h:22: // This function should only be called on a tread that can perform file IO.\n\"thread\"\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode84\nchrome/browser/nacl_host/nacl_browser.h:84: bool GetFilePath(uint64 nonce, base::FilePath *path);\n\"* \" spacing\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc\nFile chrome/browser/nacl_host/nacl_file_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc#newcode134\nchrome/browser/nacl_host/nacl_file_host.cc:134: void DoOpenNaClExecutableRegister(\nNot sure I understand the name, since it suggests \"executable register\" is a noun phrase.  \"RegisterNaClExecutableFile\"?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc#newcode226\nchrome/browser/nacl_host/nacl_file_host.cc:226: base::Bind(\nWhy does this need a PostTask() now?  Is the CreatePlatformFile() call being moved to a different thread?  If so, why?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode938\nchrome/browser/nacl_host/nacl_process_host.cc:938: \nRemove empty line at function start\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode962\nchrome/browser/nacl_host/nacl_process_host.cc:962: // resolving the nonce may fail because the path cache was thrashed while the\nAs I said in the other comment, this is bad, so you should at least have a TODO to fix this.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode966\nchrome/browser/nacl_host/nacl_process_host.cc:966: if (!NaClBrowser::GetInstance()->GetFilePath(nonce, &file_path)){\nAdd space: \") {\"\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: NaClProcessMsg_ResolveFileNonce::WriteReplyParams(\nWrong indentation here (it's using 2+3 instead of 2+2)\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode980\nchrome/browser/nacl_host/nacl_process_host.cc:980: FROM_HERE,\nIndent the function's arguments\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h\nFile chrome/common/nacl_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h#newcode82\nchrome/common/nacl_messages.h:82: // Used by the NaCl process to aquire trusted information about a file.\n\"acquire\".\n\nCould you be more specific about what \"trusted information about a file\" means?  Also, this isn't just getting information about the file, it's getting an FD/handle.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h#newcode84\nchrome/common/nacl_messages.h:84: uint64, /* nonce */\n\"file token\"?  Please make it clear that this value identifies a file.  On its own, \"nonce\" doesn't do that.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/render_messages.h\nFile chrome/common/render_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/render_messages.h#newcode599\nchrome/common/render_messages.h:599: uint64_t /* nonce */)\nDitto: \"file token\"\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_listener.cc\nFile chrome/nacl/nacl_listener.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_listener.cc#newcode157\nchrome/nacl/nacl_listener.cc:157: *path = ipc_path.AsUTF8Unsafe();\nMaybe comment why this is safe here, despite the name (assuming it is actually safe?).\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc\nFile chrome/nacl/nacl_validation_query.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode135\nchrome/nacl/nacl_validation_query.cc:135: static int ResolveFileNonce(void* handle, uint64 nonce, int32* fd,\nSo you're returning absolute filenames to the NaCl process.  This means that you'll reveal pathnames like \"/home/mseaborn/...\" to the NaCl process.\n\nThat isn't ideal, although env vars are currently inherited by the NaCl process which expose similar information.  But it would be nice not to add to the set of things that are exposed this way.\n\nCould you pass a hash of the filename to the NaCl process instead?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode143\nchrome/nacl/nacl_validation_query.cc:143: *file_path = (char *) malloc(path.length() + 1);\nUse C++-style casts?\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode147\nchrome/nacl/nacl_validation_query.cc:147: *file_path_length = (uint32) path.length();\nDitto\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/c/private/ppb_nacl_private.h\nFile ppapi/c/private/ppb_nacl_private.h (left):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/c/private/ppb_nacl_private.h#oldcode63\nppapi/c/private/ppb_nacl_private.h:63: struct PP_NaClExecutableMetadata {\nExplain in commit message that this was a not-fully-baked interface that is being removed.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode24\nppapi/native_client/src/trusted/plugin/file_downloader.cc:24: namespace {\nAdd empty line after this\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode28\nppapi/native_client/src/trusted/plugin/file_downloader.cc:28: struct NaClFileInfo NoFileInfo() {\n'struct NaClFileInfo' -> 'NaClFileInfo' in C++?  Same below.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/plugin.cc\nFile ppapi/native_client/src/trusted/plugin/plugin.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/plugin.cc#newcode1326\nppapi/native_client/src/trusted/plugin/plugin.cc:1326: memset(&info, 0, sizeof(info));\nYou could instead do:\nstruct NaClFileInfo info = {0};\n(sometimes depending on warning settings)\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode327\nppapi/native_client/src/trusted/plugin/service_runtime.cc:327: // TODO(ncbray): more info for faster validation?\nI'm not sure what this TODO means","disapproval":false,"date":"2013-05-16 23:01:47.134950","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"Moved to 128-bit nonce, PTAL.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc\nFile chrome/browser/nacl_host/nacl_browser.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode117\nchrome/browser/nacl_host/nacl_browser.cc:117: // allow a sandbox escape.\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"NaCl inner sandbox escape\"?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode122\nchrome/browser/nacl_host/nacl_browser.cc:122: base::PLATFORM_FILE_READ |\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Maybe format as:\n> (FLAG |\n>  FLAG |\n>  FLAG)\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode131\nchrome/browser/nacl_host/nacl_browser.cc:131: // to an extension directory could allow a sandbox escape.\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Same here - which sandbox?  Probably not the inner sandbox this time, but\n> certainly some Linux outer sandboxes.\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode134\nchrome/browser/nacl_host/nacl_browser.cc:134: {\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Put on previous line\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode156\nchrome/browser/nacl_host/nacl_browser.cc:156: path_cache_(10),\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> From discussion in person:  10 is the number of requests that can be in progress\n> at once.  If you have 11 requests in progress simultaneously, some can fail.  So\n> this isn't a cache -- cache misses shouldn't affect correctness.\n> \n> So you either need to fix that, or put in a big TODO and explanation here of the\n> meaning of 10.  And don't call it \"path_cache_\". :-)\n> \n> Why is this limit set so low when you're only mapping IDs -> filenames?  It's\n> not like this is holding on to file descriptors.\n\nDone, modulo being able to think of a better name.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode413\nchrome/browser/nacl_host/nacl_browser.cc:413: nonce = base::RandUint64();\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> I'm not sure 'nonce' is the appropriate term here, since it suggests the number\n> is unguessable, that this is a cryptographic protocol, etc., which isn't the\n> case.\n> \n> Something like \"file_token\" instead, perhaps?\n\nMoving to 128 bits and Justin's request, which implies it is a nonce.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.cc#newcode416\nchrome/browser/nacl_host/nacl_browser.cc:416: if (nonce != 0) {\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Has the nonce == 0 code path ever been executed? :-)\n\nIt may be.  Some day.  We should add a prize.  On the other hand, once it's moved to 128 bits, probably not.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc\nFile chrome/browser/nacl_host/nacl_file_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc#newcode134\nchrome/browser/nacl_host/nacl_file_host.cc:134: void DoOpenNaClExecutableRegister(\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Not sure I understand the name, since it suggests \"executable register\" is a\n> noun phrase.  \"RegisterNaClExecutableFile\"?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_file_host.cc#newcode226\nchrome/browser/nacl_host/nacl_file_host.cc:226: base::Bind(\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Why does this need a PostTask() now?  Is the CreatePlatformFile() call being\n> moved to a different thread?  If so, why?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode938\nchrome/browser/nacl_host/nacl_process_host.cc:938: \nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Remove empty line at function start\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode962\nchrome/browser/nacl_host/nacl_process_host.cc:962: // resolving the nonce may fail because the path cache was thrashed while the\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> As I said in the other comment, this is bad, so you should at least have a TODO\n> to fix this.\n\nThe cache is big enough this shouldn't happen in practice, this behavior is not particularly bad, and there isn't a good alternative, given architectural constraints.  A TODO would just be clutter.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode966\nchrome/browser/nacl_host/nacl_process_host.cc:966: if (!NaClBrowser::GetInstance()->GetFilePath(nonce, &file_path)){\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Add space: \") {\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: NaClProcessMsg_ResolveFileNonce::WriteReplyParams(\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Wrong indentation here (it's using 2+3 instead of 2+2)\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_process_host.cc#newcode980\nchrome/browser/nacl_host/nacl_process_host.cc:980: FROM_HERE,\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Indent the function's arguments\n\nThey are.  Four space indent.  Which is ambiguous with the bracket alignment, in this case.  If you have a better suggestion, please be explicit.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h\nFile chrome/common/nacl_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h#newcode82\nchrome/common/nacl_messages.h:82: // Used by the NaCl process to aquire trusted information about a file.\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"acquire\".\n> \n> Could you be more specific about what \"trusted information about a file\" means? \n> Also, this isn't just getting information about the file, it's getting an\n> FD/handle.\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_listener.cc\nFile chrome/nacl/nacl_listener.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_listener.cc#newcode157\nchrome/nacl/nacl_listener.cc:157: *path = ipc_path.AsUTF8Unsafe();\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Maybe comment why this is safe here, despite the name (assuming it is actually\n> safe?).\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc\nFile chrome/nacl/nacl_validation_query.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode135\nchrome/nacl/nacl_validation_query.cc:135: static int ResolveFileNonce(void* handle, uint64 nonce, int32* fd,\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> So you're returning absolute filenames to the NaCl process.  This means that\n> you'll reveal pathnames like \"/home/mseaborn/...\" to the NaCl process.\n> \n> That isn't ideal, although env vars are currently inherited by the NaCl process\n> which expose similar information.  But it would be nice not to add to the set of\n> things that are exposed this way.\n> \n> Could you pass a hash of the filename to the NaCl process instead?\n\nSecurity team is not worried, and I have too much to deal with already.  The interface does not preclude changing this later.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode143\nchrome/nacl/nacl_validation_query.cc:143: *file_path = (char *) malloc(path.length() + 1);\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Use C++-style casts?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/nacl/nacl_validation_query.cc#newcode147\nchrome/nacl/nacl_validation_query.cc:147: *file_path_length = (uint32) path.length();\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Ditto\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/c/private/ppb_nacl_private.h\nFile ppapi/c/private/ppb_nacl_private.h (left):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/c/private/ppb_nacl_private.h#oldcode63\nppapi/c/private/ppb_nacl_private.h:63: struct PP_NaClExecutableMetadata {\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Explain in commit message that this was a not-fully-baked interface that is\n> being removed.\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc\nFile ppapi/native_client/src/trusted/plugin/file_downloader.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode24\nppapi/native_client/src/trusted/plugin/file_downloader.cc:24: namespace {\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Add empty line after this\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/file_downloader.cc#newcode28\nppapi/native_client/src/trusted/plugin/file_downloader.cc:28: struct NaClFileInfo NoFileInfo() {\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> 'struct NaClFileInfo' -> 'NaClFileInfo' in C++?  Same below.\n\nStaying consistent with the C code base.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/plugin.cc\nFile ppapi/native_client/src/trusted/plugin/plugin.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/plugin.cc#newcode1326\nppapi/native_client/src/trusted/plugin/plugin.cc:1326: memset(&info, 0, sizeof(info));\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> You could instead do:\n> struct NaClFileInfo info = {0};\n> (sometimes depending on warning settings)\n\nRather not risk the wrath of compiler skew.\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode327\nppapi/native_client/src/trusted/plugin/service_runtime.cc:327: // TODO(ncbray): more info for faster validation?\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> I'm not sure what this TODO means\n\nDone.","disapproval":false,"date":"2013-05-21 20:09:05.875980","approval":false},{"sender":"jschuh@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: &file_path)) {\nThis seems like unambiguously bad occurrence. At a minimum we should have a NOTREACHED, but maybe we should actually terminate the child process?","disapproval":false,"date":"2013-05-23 01:02:32.590140","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h\nFile chrome/browser/nacl_host/nacl_browser.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode21\nchrome/browser/nacl_host/nacl_browser.h:21: // Open an immutable executable file that can be mmaped.\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"mmapped\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode22\nchrome/browser/nacl_host/nacl_browser.h:22: // This function should only be called on a tread that can perform file IO.\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"thread\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/browser/nacl_host/nacl_browser.h#newcode84\nchrome/browser/nacl_host/nacl_browser.h:84: bool GetFilePath(uint64 nonce, base::FilePath *path);\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"* \" spacing\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h\nFile chrome/common/nacl_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/nacl_messages.h#newcode84\nchrome/common/nacl_messages.h:84: uint64, /* nonce */\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> \"file token\"?  Please make it clear that this value identifies a file.  On its\n> own, \"nonce\" doesn't do that.\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/render_messages.h\nFile chrome/common/render_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/27001/chrome/common/render_messages.h#newcode599\nchrome/common/render_messages.h:599: uint64_t /* nonce */)\nOn 2013/05/16 23:01:47, Mark Seaborn wrote:\n> Ditto: \"file token\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: &file_path)) {\nOn 2013/05/23 01:02:32, Justin Schuh wrote:\n> This seems like unambiguously bad occurrence. At a minimum we should have a\n> NOTREACHED, but maybe we should actually terminate the child process?\n\nSee the above comment.  Bounding the cache size implies that it may be valid for the query to fail. :/","disapproval":false,"date":"2013-05-23 16:44:11.329350","approval":false},{"sender":"jschuh@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"okay. ipc security lgtm.","disapproval":false,"date":"2013-05-23 16:47:03.544000","approval":true},{"sender":"bsy@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: &file_path)) {\nOn 2013/05/23 16:44:11, Nick Bray (chromium) wrote:\n> On 2013/05/23 01:02:32, Justin Schuh wrote:\n> > This seems like unambiguously bad occurrence. At a minimum we should have a\n> > NOTREACHED, but maybe we should actually terminate the child process?\n> \n> See the above comment.  Bounding the cache size implies that it may be valid for\n> the query to fail. :/\n\nJust because it's valid doesn't mean it's likely.  We should do (upper bound) estimates of number of tabs -- hundreds? -- that might re-open when the browser restarts, and the percentage of them that might involve NaCl -- 5%? 10%? -- and the number of manifest entries -- 64? 128? -- to get an estimate for when the cache might hit size limits.  Assume worse case behavior (not serial startup), etc.\n\nFurthermore, since the cache doesn't actually hold file descriptors (limited global resources) any more and just hold file tokens, that argument for keeping the cache really small no longer apply.  The only limit is memory, albeit still a limited resource, but much less limiting.  So, I'd like to see at least a ballpark analysis/discussion for the proper size for the cache, its cost in memory usage, versus the likelihood of a valid cache miss.  If the probability of a valid cache miss is low, then this could be a useful signal.  Even if it is not super low, a sharp spike in the cache miss rate is a signal that there might be something \"interesting\" going on in the wild.\n\nCould we have UMA or other feedback statistics for this?  At least a comment about the considerations, please.","disapproval":false,"date":"2013-05-23 17:57:24.203860","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"ping","disapproval":false,"date":"2013-05-23 23:29:26.012170","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/73001/chrome/browser/nacl_host/nacl_process_host.cc#newcode967\nchrome/browser/nacl_host/nacl_process_host.cc:967: &file_path)) {\nOn 2013/05/23 17:57:24, bsy_cr wrote:\n> On 2013/05/23 16:44:11, Nick Bray (chromium) wrote:\n> > On 2013/05/23 01:02:32, Justin Schuh wrote:\n> > > This seems like unambiguously bad occurrence. At a minimum we should have a\n> > > NOTREACHED, but maybe we should actually terminate the child process?\n> > \n> > See the above comment.  Bounding the cache size implies that it may be valid\n> for\n> > the query to fail. :/\n> \n> Just because it's valid doesn't mean it's likely.  We should do (upper bound)\n> estimates of number of tabs -- hundreds? -- that might re-open when the browser\n> restarts, and the percentage of them that might involve NaCl -- 5%? 10%? -- and\n> the number of manifest entries -- 64? 128? -- to get an estimate for when the\n> cache might hit size limits.  Assume worse case behavior (not serial startup),\n> etc.\n> \n> Furthermore, since the cache doesn't actually hold file descriptors (limited\n> global resources) any more and just hold file tokens, that argument for keeping\n> the cache really small no longer apply.  The only limit is memory, albeit still\n> a limited resource, but much less limiting.  So, I'd like to see at least a\n> ballpark analysis/discussion for the proper size for the cache, its cost in\n> memory usage, versus the likelihood of a valid cache miss.  If the probability\n> of a valid cache miss is low, then this could be a useful signal.  Even if it is\n> not super low, a sharp spike in the cache miss rate is a signal that there might\n> be something \"interesting\" going on in the wild.\n> \n> Could we have UMA or other feedback statistics for this?  At least a comment\n> about the considerations, please.\n\nDone.","disapproval":false,"date":"2013-05-24 16:54:27.946360","approval":false},{"sender":"mseaborn@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"LGTM with the changes below.  I don't know this aspect of ppapi/native_client/src/trusted/plugin so well, so I think you should get someone else to sign off on that part.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc\nFile chrome/browser/nacl_host/nacl_browser.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode42\nchrome/browser/nacl_host/nacl_browser.cc:42: // other hand, entries are not always claimed, so the size of the cache will\nSay \"claimed (and hence removed)\"?  Otherwise it's not clear what \"claimed\" means.\n\nWhy aren't entries always claimed?\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode137\nchrome/browser/nacl_host/nacl_browser.cc:137: // to an extension directory could allow an outer sandbox escape. openat\n\"openat\" -> \"openat()\" to be clearer what you're referring to?\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode417\nchrome/browser/nacl_host/nacl_browser.cc:417: void NaClBrowser::PutFilePath(const base::FilePath& path, uint64 *file_token_lo,\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode418\nchrome/browser/nacl_host/nacl_browser.cc:418: uint64 *file_token_hi) {\nFix indentation\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode425\nchrome/browser/nacl_host/nacl_browser.cc:425: std::string key(reinterpret_cast<char *>(file_token), sizeof(file_token));\nSpacing style should be \"char*\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode440\nchrome/browser/nacl_host/nacl_browser.cc:440: std::string key(reinterpret_cast<char *>(file_token), sizeof(file_token));\nSpacing style should be \"char*\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode441\nchrome/browser/nacl_host/nacl_browser.cc:441: PathCacheType::iterator iter  = path_cache_.Peek(key);\nFix spacing (you have 2 spaces before '=')\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h\nFile chrome/browser/nacl_host/nacl_browser.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode87\nchrome/browser/nacl_host/nacl_browser.h:87: // trusted the handle was read only but it was not, a mmaped file could\n\"an mmapped\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode88\nchrome/browser/nacl_host/nacl_browser.h:88: // mutated after validation, allowing an escape of the NaCl sandbox.\n\"could be mutated\" -- or better, \"could be modified\"\n\n\"escape of\" -> \"escape from\"?\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode92\nchrome/browser/nacl_host/nacl_browser.h:92: // Instead of allowing these attacks, we only trust information we get\n\"we\" -> \"the NaCl process\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode101\nchrome/browser/nacl_host/nacl_browser.h:101: // TODO(ncbray): move the cache onto the NaCl process host to completely\n\"onto the NaCl process host\" -> \"into NaClProcessHost\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode102\nchrome/browser/nacl_host/nacl_browser.h:102: // prevent one process from guessing the token of another process.\nNit: it doesn't prevent guessing, it prevents guessing from having any consequence.  \"So that we don't rely on file tokens being unguessable\"?\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc#newcode959\nchrome/browser/nacl_host/nacl_process_host.cc:959: // Was the file registered?\nNit: add empty line after each comment paragraph for readability.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc#newcode965\nchrome/browser/nacl_host/nacl_process_host.cc:965: // However: each NaCl process will consume 2-3 entries as it starts up, this\nWhy 2-3?  Explain more in comment, perhaps?\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc#newcode990\nchrome/browser/nacl_host/nacl_process_host.cc:990: FROM_HERE,\nIndent arguments properly.  i.e.:\n\n// Wrong\nif (some_function(\n    arg1)) ...\n\n// Right\nif (some_function(\n        arg1)) ...\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h\nFile chrome/common/nacl_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h#newcode82\nchrome/common/nacl_messages.h:82: // Used by the NaCl process to aquire trusted information about a file directly\n\"acquire\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h#newcode85\nchrome/common/nacl_messages.h:85: IPC_SYNC_MESSAGE_CONTROL2_2(NaClProcessMsg_ResolveFileToken,\n\"Resolve\" is vague.  How about \"OpenFileFromToken\" or \"OpenFileGivenToken\"?\n\n(I know you already used the term \"Resolve\" in the NaCl code, but I still think it would be better to use \"Open\" here.)\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc\nFile chrome/nacl/nacl_listener.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc#newcode134\nchrome/nacl/nacl_listener.cc:134: virtual bool ResolveFileToken(struct NaClFileToken *file_token,\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc#newcode160\nchrome/nacl/nacl_listener.cc:160: // It doesn't matter if the path is valid UTF8 as long as it's repeatable\nDo you mean \"It doesn't matter if the path is invalid UTF8\"?\n\nNot sure what you mean by repeatable here.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_db.h\nFile chrome/nacl/nacl_validation_db.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_db.h#newcode21\nchrome/nacl/nacl_validation_db.h:21: virtual bool ResolveFileToken(struct NaClFileToken *file_token,\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc\nFile chrome/nacl/nacl_validation_query.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode34\nchrome/nacl/nacl_validation_query.cc:34: struct NaClFileToken *file_token,\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode140\nchrome/nacl/nacl_validation_query.cc:140: uint32 *file_path_length) {\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode147\nchrome/nacl/nacl_validation_query.cc:147: *file_path = static_cast<char *>(malloc(path.length() + 1));\nStyle is \"char*\"\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/plugin.cc\nFile ppapi/native_client/src/trusted/plugin/plugin.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/plugin.cc#newcode1327\nppapi/native_client/src/trusted/plugin/plugin.cc:1327: std::map<nacl::string, struct NaClFileInfo>::iterator it =\nAs an aside, having this URL -> FD mapping seems to be wrong because:\n\n * It might be leaking FDs if entries are never removed\n * It might mean that two open() calls return the same FD, with the seek position being shared.\n * It might mean that a fresh open() call doesn't refetch the URL (which might be wrong if the resource is changeable).\n\nI don't know the scope of this.  Can you file an issue (with the info above), please?\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode174\nppapi/native_client/src/trusted/plugin/service_runtime.cc:174: struct NaClFileInfo *info) {\nFix \"*\" spacing style\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.h\nFile ppapi/native_client/src/trusted/plugin/service_runtime.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.h#newcode76\nppapi/native_client/src/trusted/plugin/service_runtime.h:76: struct NaClFileInfo *file_info;\nFix \"*\" spacing style","disapproval":false,"date":"2013-05-24 20:21:57.845610","approval":true},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc\nFile chrome/browser/nacl_host/nacl_browser.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode42\nchrome/browser/nacl_host/nacl_browser.cc:42: // other hand, entries are not always claimed, so the size of the cache will\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Say \"claimed (and hence removed)\"?  Otherwise it's not clear what \"claimed\"\n> means.\n> \n> Why aren't entries always claimed?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode137\nchrome/browser/nacl_host/nacl_browser.cc:137: // to an extension directory could allow an outer sandbox escape. openat\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"openat\" -> \"openat()\" to be clearer what you're referring to?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode417\nchrome/browser/nacl_host/nacl_browser.cc:417: void NaClBrowser::PutFilePath(const base::FilePath& path, uint64 *file_token_lo,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode418\nchrome/browser/nacl_host/nacl_browser.cc:418: uint64 *file_token_hi) {\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix indentation\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode425\nchrome/browser/nacl_host/nacl_browser.cc:425: std::string key(reinterpret_cast<char *>(file_token), sizeof(file_token));\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Spacing style should be \"char*\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode440\nchrome/browser/nacl_host/nacl_browser.cc:440: std::string key(reinterpret_cast<char *>(file_token), sizeof(file_token));\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Spacing style should be \"char*\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.cc#newcode441\nchrome/browser/nacl_host/nacl_browser.cc:441: PathCacheType::iterator iter  = path_cache_.Peek(key);\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix spacing (you have 2 spaces before '=')\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h\nFile chrome/browser/nacl_host/nacl_browser.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode87\nchrome/browser/nacl_host/nacl_browser.h:87: // trusted the handle was read only but it was not, a mmaped file could\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"an mmapped\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode88\nchrome/browser/nacl_host/nacl_browser.h:88: // mutated after validation, allowing an escape of the NaCl sandbox.\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"could be mutated\" -- or better, \"could be modified\"\n> \n> \"escape of\" -> \"escape from\"?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode92\nchrome/browser/nacl_host/nacl_browser.h:92: // Instead of allowing these attacks, we only trust information we get\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"we\" -> \"the NaCl process\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode101\nchrome/browser/nacl_host/nacl_browser.h:101: // TODO(ncbray): move the cache onto the NaCl process host to completely\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"onto the NaCl process host\" -> \"into NaClProcessHost\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_browser.h#newcode102\nchrome/browser/nacl_host/nacl_browser.h:102: // prevent one process from guessing the token of another process.\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Nit: it doesn't prevent guessing, it prevents guessing from having any\n> consequence.  \"So that we don't rely on file tokens being unguessable\"?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc\nFile chrome/browser/nacl_host/nacl_process_host.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc#newcode965\nchrome/browser/nacl_host/nacl_process_host.cc:965: // However: each NaCl process will consume 2-3 entries as it starts up, this\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Why 2-3?  Explain more in comment, perhaps?\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/browser/nacl_host/nacl_process_host.cc#newcode990\nchrome/browser/nacl_host/nacl_process_host.cc:990: FROM_HERE,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Indent arguments properly.  i.e.:\n> \n> // Wrong\n> if (some_function(\n>     arg1)) ...\n> \n> // Right\n> if (some_function(\n>         arg1)) ...\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h\nFile chrome/common/nacl_messages.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h#newcode82\nchrome/common/nacl_messages.h:82: // Used by the NaCl process to aquire trusted information about a file directly\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"acquire\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/common/nacl_messages.h#newcode85\nchrome/common/nacl_messages.h:85: IPC_SYNC_MESSAGE_CONTROL2_2(NaClProcessMsg_ResolveFileToken,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> \"Resolve\" is vague.  How about \"OpenFileFromToken\" or \"OpenFileGivenToken\"?\n> \n> (I know you already used the term \"Resolve\" in the NaCl code, but I still think\n> it would be better to use \"Open\" here.)\n\nOpening is only part of the elephant.  I don't think \"Open\" is the right verb.  \"Given\" is also an awkward way to resolve the resulting ambiguity.  Leaving as is.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc\nFile chrome/nacl/nacl_listener.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc#newcode134\nchrome/nacl/nacl_listener.cc:134: virtual bool ResolveFileToken(struct NaClFileToken *file_token,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_listener.cc#newcode160\nchrome/nacl/nacl_listener.cc:160: // It doesn't matter if the path is valid UTF8 as long as it's repeatable\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Do you mean \"It doesn't matter if the path is invalid UTF8\"?\n> \n> Not sure what you mean by repeatable here.\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_db.h\nFile chrome/nacl/nacl_validation_db.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_db.h#newcode21\nchrome/nacl/nacl_validation_db.h:21: virtual bool ResolveFileToken(struct NaClFileToken *file_token,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc\nFile chrome/nacl/nacl_validation_query.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode34\nchrome/nacl/nacl_validation_query.cc:34: struct NaClFileToken *file_token,\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode140\nchrome/nacl/nacl_validation_query.cc:140: uint32 *file_path_length) {\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/chrome/nacl/nacl_validation_query.cc#newcode147\nchrome/nacl/nacl_validation_query.cc:147: *file_path = static_cast<char *>(malloc(path.length() + 1));\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Style is \"char*\"\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/plugin.cc\nFile ppapi/native_client/src/trusted/plugin/plugin.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/plugin.cc#newcode1327\nppapi/native_client/src/trusted/plugin/plugin.cc:1327: std::map<nacl::string, struct NaClFileInfo>::iterator it =\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> As an aside, having this URL -> FD mapping seems to be wrong because:\n> \n>  * It might be leaking FDs if entries are never removed\n>  * It might mean that two open() calls return the same FD, with the seek\n> position being shared.\n>  * It might mean that a fresh open() call doesn't refetch the URL (which might\n> be wrong if the resource is changeable).\n> \n> I don't know the scope of this.  Can you file an issue (with the info above),\n> please?\n\nI will certainly help you file an issue.  This change has taken way too long and I just can't take the time to be a good citizen, myself, at this point.\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.cc\nFile ppapi/native_client/src/trusted/plugin/service_runtime.cc (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.cc#newcode174\nppapi/native_client/src/trusted/plugin/service_runtime.cc:174: struct NaClFileInfo *info) {\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.h\nFile ppapi/native_client/src/trusted/plugin/service_runtime.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/79001/ppapi/native_client/src/trusted/plugin/service_runtime.h#newcode76\nppapi/native_client/src/trusted/plugin/service_runtime.h:76: struct NaClFileInfo *file_info;\nOn 2013/05/24 20:21:58, Mark Seaborn wrote:\n> Fix \"*\" spacing style\n\nDone.","disapproval":false,"date":"2013-05-24 21:35:23.875130","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ncbray@chromium.org/14750007/93001","disapproval":false,"date":"2013-05-24 21:40:33.596440","approval":false},{"sender":"mseaborn@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://codereview.chromium.org/14750007/diff/93001/chrome/browser/nacl_host/nacl_browser.h\nFile chrome/browser/nacl_host/nacl_browser.h (right):\n\nhttps://codereview.chromium.org/14750007/diff/93001/chrome/browser/nacl_host/nacl_browser.h#newcode102\nchrome/browser/nacl_host/nacl_browser.h:102: // TODO(ncbray): move the cache onto NaClProcesHost so that we don't need to\n\"NaClProcessHost\"","disapproval":false,"date":"2013-05-24 21:55:41.753570","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ncbray@chromium.org/14750007/106001","disapproval":false,"date":"2013-05-24 22:41:39.078630","approval":false},{"sender":"mseaborn@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"https://chromiumcodereview.appspot.com/14750007/diff/106001/chrome/nacl/nacl_validation_query.cc\nFile chrome/nacl/nacl_validation_query.cc (right):\n\nhttps://chromiumcodereview.appspot.com/14750007/diff/106001/chrome/nacl/nacl_validation_query.cc#newcode10\nchrome/nacl/nacl_validation_query.cc:10: #include \"native_client/src/include/portability.h\"\nWhy?  You shouldn't be using native_client/src/include/portability.h in Chromium-side code, outside of the legacy code in ppapi/native_client.","disapproval":false,"date":"2013-05-24 22:48:11.310090","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","commit-bot@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"Retried try job too often on chromium_presubmit for step(s) presubmit\nhttp://build.chromium.org/p/tryserver.chromium/buildstatus?builder=chromium_presubmit&number=4958","disapproval":false,"date":"2013-05-24 22:52:20.997400","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","commit-bot@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ncbray@chromium.org/14750007/106001","disapproval":false,"date":"2013-05-24 23:38:58.320820","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","commit-bot@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"Change committed as 202278","disapproval":false,"date":"2013-05-25 14:10:10.800230","approval":false},{"sender":"ncbray@chromium.org","recipients":["ncbray@chromium.org","dmichael@chromium.org","mseaborn@chromium.org","jschuh@chromium.org","bennet.yee@gmail.com","bsy@chromium.org","ncbray@chromium.org","ncbray@google.com","commit-bot@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","raymes+watch@chromium.org","yzshen+watch@chromium.org","piman+watch@chromium.org","native-client-reviews@googlegroups.com","ihf+watch@chromium.org","sehr@chromium.org","bbudge@chromium.org","kmixter@chromium.org"],"text":"Committed patchset #9 manually as r202702 (presubmit successful).","disapproval":false,"date":"2013-05-29 00:19:33.464170","approval":false}],"owner_email":"ncbray@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"Nick Bray (chromium)","subject":"NaCl: enable meta-based validation for shared libraries.","created":"2013-05-13 17:57:43.090820","patchsets":[1,11001,27001,45001,48001,73001,79001,93001,106001],"modified":"2013-05-29 00:19:33.967130","closed":true,"commit":false,"issue":14750007}