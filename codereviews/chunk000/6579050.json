{"description":"Elides the beginning of tab titles that have common prefixes. \r\n\r\nBUG=69304\r\nTEST=Make sure the tab titles are displayed as spec'd, and that there isn't any performance issues.\r\n \n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=77860","cc":["chromium-reviews@chromium.org","phajdan.jr@chromium.org"],"reviewers":["sky@chromium.org","pkasting@chromium.org"],"messages":[{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","chromium-reviews@chromium.org"],"text":"I think you are the one that most recently (and more often) touched the code I modified here, but feel free to redirect this code review to whoever you think would be more appropriate...\n\nThanks!\n\nBYE\nMAD","disapproval":false,"date":"2011-02-25 04:15:43.886766","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","chromium-reviews@chromium.org"],"text":"On 2011/02/25 04:15:43, MAD wrote:\n> I think you are the one that most recently (and more often) touched the code I\n> modified here, but feel free to redirect this code review to whoever you think\n> would be more appropriate...\n> \n> Thanks!\n> \n> BYE\n> MAD\n\nNote that the Linux try that failed in patch set 4, we retried and succeeded (but didn't update the result here, I thought it would)\nhttp://build.chromium.org/p/tryserver.chromium/builders/linux/builds/14120","disapproval":false,"date":"2011-02-25 14:47:02.609287","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","chromium-reviews@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/12001/chrome/browser/about_flags.cc\nFile chrome/browser/about_flags.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/about_flags.cc#newcode268\nchrome/browser/about_flags.cc:268: kOsAll,\nYour patch only effects windows and chromeos.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode432\nchrome/browser/ui/views/tabs/base_tab_strip.cc:432: // tab we saw them in first, once we put this other index in the\nThis is a bit confusing. I think you mean:\n'This map is used to remember the title and the index of a tab. If multiple tabs have the same title the index is set to -1 and the indices of all tabs sharing the same title are placed in no_prefix_tab.'\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: DCHECK(tab_data_[tab_index].tab != NULL);\nShouldn't you skip over mini tabs?\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode442\nchrome/browser/ui/views/tabs/base_tab_strip.cc:442: DCHECK(tab_data_[tab_index].tab->data().title ==\nThis code is tricky to read, how about a comment here saying the title is a duplicate.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode454\nchrome/browser/ui/views/tabs/base_tab_strip.cc:454: base::hash_map<string16, std::vector<size_t> > prefixes;\nShouldn't this be std::vector<int> ?\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode468\nchrome/browser/ui/views/tabs/base_tab_strip.cc:468: // We don't need the last word, since we ignored duplicate titles above.\nMaybe I'm just dense, but this comment doesn't make sense to me.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode469\nchrome/browser/ui/views/tabs/base_tab_strip.cc:469: for (size_t word_index = 0; word_index < words.size() - 1; ++word_index) {\nIf words is empty, this is never stops. This might be possible if the title only contained white space. Either way, you should handle that case here.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode471\nchrome/browser/ui/views/tabs/base_tab_strip.cc:471: end_of_word = tab_data.title.find(words[word_index], end_of_word) +\nIt seems horribly inefficient to have to use find again when presumably SplitStringAlongWhitespace knows all this already.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode480\nchrome/browser/ui/views/tabs/base_tab_strip.cc:480: base::hash_map<string16, std::vector<size_t> >::iterator iter =\nMove the iter into the for declaration so that its clear the iterator is only used in the for loop.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode496\nchrome/browser/ui/views/tabs/base_tab_strip.cc:496: if ((size_t)data.common_prefix_length != prefix_lengths[tab_index]) {\nstatic_cast\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode498\nchrome/browser/ui/views/tabs/base_tab_strip.cc:498: tab_data_[tab_index].tab->SetData(data);\nI think you need a SchedulePaint here.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h\nFile chrome/browser/ui/views/tabs/base_tab_strip.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h#newcode199\nchrome/browser/ui/views/tabs/base_tab_strip.h:199: virtual void UpdateCommonTitlePrefix();\nWhy is this virtual?\n\nAlso, this class is only used on windows and chromeos. We're going to want this feature on other platforms too (sadly). This function should be extracted into a place that can be used on other platforms. I'm thinking you create some class like PrefixMatcher or PrefixFinder or TabTitlePrefixBlahBlahBlah (you get the idea) in chrome/browser/ui. The class has a single static method, CalculatePrefixes and it takes a std::vector<string16> and calculates the std::vector<size_t> of prefixes. This also has the benefit that you can write a nice unit test for it:)\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/tab_renderer_data.h\nFile chrome/browser/ui/views/tabs/tab_renderer_data.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/tab_renderer_data.h#newcode50\nchrome/browser/ui/views/tabs/tab_renderer_data.h:50: int32 common_prefix_length;\nsize_t","disapproval":false,"date":"2011-02-25 17:02:07.271218","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","chromium-reviews@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h\nFile chrome/browser/ui/views/tabs/base_tab_strip.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h#newcode199\nchrome/browser/ui/views/tabs/base_tab_strip.h:199: virtual void UpdateCommonTitlePrefix();\nOn 2011/02/25 17:02:07, sky wrote:\n> Why is this virtual?\n> \n> Also, this class is only used on windows and chromeos. We're going to want this\n> feature on other platforms too (sadly). This function should be extracted into a\n> place that can be used on other platforms. I'm thinking you create some class\n> like PrefixMatcher or PrefixFinder or TabTitlePrefixBlahBlahBlah (you get the\n> idea) in chrome/browser/ui. The class has a single static method,\n> CalculatePrefixes and it takes a std::vector<string16> and calculates the\n> std::vector<size_t> of prefixes. This also has the benefit that you can write a\n> nice unit test for it:)\n\nOne additional comment. Don't take my comment to mean you have to figure out the other platforms now. Just that you should prepare for them:)","disapproval":false,"date":"2011-02-25 17:03:03.276040","approval":false},{"sender":"pkasting@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode466\nchrome/browser/ui/views/tabs/base_tab_strip.cc:466: base::SplitStringAlongWhitespace(tab_data.title, &words);\nThis is the wrong function to use.  We need to use ICU functions to find logical boundaries as some languages don't have whitespace.","disapproval":false,"date":"2011-02-25 17:14:44.095264","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"Addressed most comments except the one about using ICU and the one about moving the code to a common place...\n\nI'll do that in the next iteration so that the reviewers can see the first iteration's changes compared the code where it was initially written to make it easer for diffs...\n\nNext iteration will move the code to a common place and use ICU for word breaking (and also try to avoid needing to search the words after they got split)...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/about_flags.cc\nFile chrome/browser/about_flags.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/about_flags.cc#newcode268\nchrome/browser/about_flags.cc:268: kOsAll,\nOn 2011/02/25 17:02:07, sky wrote:\n> Your patch only effects windows and chromeos.\n\nHo, I didn't realize that... Changed to:\nkOsWin | kOsCrOS,  // Until we have a solution for non-views platforms.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode432\nchrome/browser/ui/views/tabs/base_tab_strip.cc:432: // tab we saw them in first, once we put this other index in the\nOn 2011/02/25 17:02:07, sky wrote:\n> This is a bit confusing. I think you mean:\n> 'This map is used to remember the title and the index of a tab. If multiple tabs\n> have the same title the index is set to -1 and the indices of all tabs sharing\n> the same title are placed in no_prefix_tab.'\n\nThanks... Done...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: DCHECK(tab_data_[tab_index].tab != NULL);\nOn 2011/02/25 17:02:07, sky wrote:\n> Shouldn't you skip over mini tabs?\nGood point, it would save some processing time since we ignore them later anyway... Done...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode442\nchrome/browser/ui/views/tabs/base_tab_strip.cc:442: DCHECK(tab_data_[tab_index].tab->data().title ==\nOn 2011/02/25 17:02:07, sky wrote:\n> This code is tricky to read, how about a comment here saying the title is a\n> duplicate.\nDone...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode454\nchrome/browser/ui/views/tabs/base_tab_strip.cc:454: base::hash_map<string16, std::vector<size_t> > prefixes;\nOn 2011/02/25 17:02:07, sky wrote:\n> Shouldn't this be std::vector<int> ?\n\nHo, right, thanks again... Done...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode466\nchrome/browser/ui/views/tabs/base_tab_strip.cc:466: base::SplitStringAlongWhitespace(tab_data.title, &words);\nOn 2011/02/25 17:14:44, Peter Kasting wrote:\n> This is the wrong function to use.  We need to use ICU functions to find logical\n> boundaries as some languages don't have whitespace.\n\nWill do in the next iteration, when I move the code to a common place where it will be available to other platforms.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode468\nchrome/browser/ui/views/tabs/base_tab_strip.cc:468: // We don't need the last word, since we ignored duplicate titles above.\nOn 2011/02/25 17:02:07, sky wrote:\n> Maybe I'm just dense, but this comment doesn't make sense to me.\n\nSorry, maybe my wording is wrong (unintended pun :-)...\nWhat I mean is that we don't have to add an entry in the prefixes map for the concatenation of all the words, since a match on the whole title is ignored anyway... I reworded the comment...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode469\nchrome/browser/ui/views/tabs/base_tab_strip.cc:469: for (size_t word_index = 0; word_index < words.size() - 1; ++word_index) {\nOn 2011/02/25 17:02:07, sky wrote:\n> If words is empty, this is never stops. This might be possible if the title only\n> contained white space. Either way, you should handle that case here.\n\nHum, I thought I did handle that case by exiting the loop early for empty titles, and I was under the false impression that I would get empty strings in the words vector for contiguous white spaces, I see my mistake now, good catch!\n\nFixed...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode471\nchrome/browser/ui/views/tabs/base_tab_strip.cc:471: end_of_word = tab_data.title.find(words[word_index], end_of_word) +\nOn 2011/02/25 17:02:07, sky wrote:\n> It seems horribly inefficient to have to use find again when presumably\n> SplitStringAlongWhitespace knows all this already.\n\nYeah, I know, I was debating whether I should just rewrite my own splitter function, and decided to leave it like this... Now that I need to change it for an ICU regexp for word breaks, I'll try to avoid the find if I can...\n\nTODO...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode480\nchrome/browser/ui/views/tabs/base_tab_strip.cc:480: base::hash_map<string16, std::vector<size_t> >::iterator iter =\nOn 2011/02/25 17:02:07, sky wrote:\n> Move the iter into the for declaration so that its clear the iterator is only\n> used in the for loop.\n\nDone...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode496\nchrome/browser/ui/views/tabs/base_tab_strip.cc:496: if ((size_t)data.common_prefix_length != prefix_lengths[tab_index]) {\nOn 2011/02/25 17:02:07, sky wrote:\n> static_cast\n\nOops... I meant to fix that and forgot... Sorry about that...\nBut I don't need it anymore, now that I changed the type of common_prefix_length in the next file...\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode498\nchrome/browser/ui/views/tabs/base_tab_strip.cc:498: tab_data_[tab_index].tab->SetData(data);\nOn 2011/02/25 17:02:07, sky wrote:\n> I think you need a SchedulePaint here.\n\nI was wondering about that, but the SetData implementation actually does it... Should I add it anyway?\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h\nFile chrome/browser/ui/views/tabs/base_tab_strip.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.h#newcode199\nchrome/browser/ui/views/tabs/base_tab_strip.h:199: virtual void UpdateCommonTitlePrefix();\nOn 2011/02/25 17:02:07, sky wrote:\n> Why is this virtual?\n> \n> Also, this class is only used on windows and chromeos. We're going to want this\n> feature on other platforms too (sadly). This function should be extracted into a\n> place that can be used on other platforms. I'm thinking you create some class\n> like PrefixMatcher or PrefixFinder or TabTitlePrefixBlahBlahBlah (you get the\n> idea) in chrome/browser/ui. The class has a single static method,\n> CalculatePrefixes and it takes a std::vector<string16> and calculates the\n> std::vector<size_t> of prefixes. This also has the benefit that you can write a\n> nice unit test for it:)\n\nGood point... I looked for a test infrastructure for tabs and couldn't find one... I'll follow your advice here... Thanks!\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/tab_renderer_data.h\nFile chrome/browser/ui/views/tabs/tab_renderer_data.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/tab_renderer_data.h#newcode50\nchrome/browser/ui/views/tabs/tab_renderer_data.h:50: int32 common_prefix_length;\nOn 2011/02/25 17:02:07, sky wrote:\n> size_t\n\nD'Ho!... Done... :-)","disapproval":false,"date":"2011-02-25 20:09:13.228259","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"I only have comments on the rendering.\n\nBy next iteration do you mean you want to land this first, then move?\n\n  -Scott\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: DCHECK(tab_data_[tab_index].tab != NULL);\nOn 2011/02/25 20:09:13, MAD wrote:\n> On 2011/02/25 17:02:07, sky wrote:\n> > Shouldn't you skip over mini tabs?\n> Good point, it would save some processing time since we ignore them later\n> anyway... Done...\n> \n\nI wasn't so much concerned about that, but rather if you consider the title here you might incorrectly think a title was duplicated.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode498\nchrome/browser/ui/views/tabs/base_tab_strip.cc:498: tab_data_[tab_index].tab->SetData(data);\nOn 2011/02/25 20:09:13, MAD wrote:\n> On 2011/02/25 17:02:07, sky wrote:\n> > I think you need a SchedulePaint here.\n> \n> I was wondering about that, but the SetData implementation actually does it...\n> Should I add it anyway?\n\nIt does? It probably should, but I don't think it currently does.\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nI thought this became more important once the strings got smaller. Although, is there a reason why we shouldn't always do this?\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode451\nchrome/browser/ui/views/tabs/base_tab.cc:451: title.replace(0, data().common_prefix_length, ASCIIToUTF16(\"...\"));\nI think you should use the same string as in text_elider for this (kEllipsis).","disapproval":false,"date":"2011-02-25 21:04:44.462392","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"By next iteration, I meant another round of code review, I don't intend to submit the code like this... :-)\n\nAnd I don't think I'll have time to finish this today (I'm in EST and about to leave home now), and I'm on vacation next week. So it'll have to wait until the week after, but I was trying to get as much done as I could before I leave, and we'll complete the review when I'm back. I hope it's not too much trouble...\n\nBTW, now that I see there is ui/base/text folder (for the text_elider you pointed me to), I wonder if I should put the new TitlePrefixMatcher there instead of under browser/ui, what do you think?\n\nIt's kind of tab/browser independent so... Would make sense... Right?\n\nThanks again!\n\nBYE\nMAD\nP.S.: I changed the text_elider files so that the kEllipsis is now externalized under the ui namespace as opposed to local to the unnamed namespace... But I won't upload the new version just yet, since I'm in the middle of getting the isolated TitlePrefixMatcher working correctly.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: DCHECK(tab_data_[tab_index].tab != NULL);\nOn 2011/02/25 21:04:44, sky wrote:\n> On 2011/02/25 20:09:13, MAD wrote:\n> > On 2011/02/25 17:02:07, sky wrote:\n> > > Shouldn't you skip over mini tabs?\n> > Good point, it would save some processing time since we ignore them later\n> > anyway... Done...\n> > \n> \n> I wasn't so much concerned about that, but rather if you consider the title here\n> you might incorrectly think a title was duplicated.\n\nYes, that too... :-)\nFixed now, right?\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode498\nchrome/browser/ui/views/tabs/base_tab_strip.cc:498: tab_data_[tab_index].tab->SetData(data);\nOn 2011/02/25 21:04:44, sky wrote:\n> On 2011/02/25 20:09:13, MAD wrote:\n> > On 2011/02/25 17:02:07, sky wrote:\n> > > I think you need a SchedulePaint here.\n> > \n> > I was wondering about that, but the SetData implementation actually does it...\n> > Should I add it anyway?\n> \n> It does? It probably should, but I don't think it currently does.\n\nActually, it indirectly does, via Layout, which does a SchedulePaint when we have a layout manager. Should I had one here still?\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nOn 2011/02/25 21:04:44, sky wrote:\n> I thought this became more important once the strings got smaller. Although, is\n> there a reason why we shouldn't always do this?\n\nBecause we may end up with something like ...x... which isn't very useful...\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode451\nchrome/browser/ui/views/tabs/base_tab.cc:451: title.replace(0, data().common_prefix_length, ASCIIToUTF16(\"...\"));\nOn 2011/02/25 21:04:44, sky wrote:\n> I think you should use the same string as in text_elider for this (kEllipsis).\n\nHo, thanks, I didn't know about that...\nDone...","disapproval":false,"date":"2011-02-25 21:49:24.063271","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"According to Brett's email (Base is \"done\"...) we should put code 'in the most specific place that makes sense.' So, that implies chrome/browser/ui, not ui. I ran this by Ben too and he sayd chrome/browser/ui is the best place too.\n\nEnjoy your vacation and let me know when I should take another look.\n\n  -Scott\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: DCHECK(tab_data_[tab_index].tab != NULL);\nOn 2011/02/25 21:49:24, MAD wrote:\n> On 2011/02/25 21:04:44, sky wrote:\n> > On 2011/02/25 20:09:13, MAD wrote:\n> > > On 2011/02/25 17:02:07, sky wrote:\n> > > > Shouldn't you skip over mini tabs?\n> > > Good point, it would save some processing time since we ignore them later\n> > > anyway... Done...\n> > > \n> > \n> > I wasn't so much concerned about that, but rather if you consider the title\n> here\n> > you might incorrectly think a title was duplicated.\n> \n> Yes, that too... :-)\n> Fixed now, right?\n\nYes, thanks.\n\nhttp://codereview.chromium.org/6579050/diff/12001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode498\nchrome/browser/ui/views/tabs/base_tab_strip.cc:498: tab_data_[tab_index].tab->SetData(data);\nOn 2011/02/25 21:49:24, MAD wrote:\n> On 2011/02/25 21:04:44, sky wrote:\n> > On 2011/02/25 20:09:13, MAD wrote:\n> > > On 2011/02/25 17:02:07, sky wrote:\n> > > > I think you need a SchedulePaint here.\n> > > \n> > > I was wondering about that, but the SetData implementation actually does\n> it...\n> > > Should I add it anyway?\n> > \n> > It does? It probably should, but I don't think it currently does.\n> \n> Actually, it indirectly does, via Layout, which does a SchedulePaint when we\n> have a layout manager. Should I had one here still?\n\nBaseTab doesn't have a LayoutManager though.\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nOn 2011/02/25 21:49:24, MAD wrote:\n> On 2011/02/25 21:04:44, sky wrote:\n> > I thought this became more important once the strings got smaller. Although,\n> is\n> > there a reason why we shouldn't always do this?\n> \n> Because we may end up with something like ...x... which isn't very useful...\n\nGood point.\nDifferent suggestion then. For folks with lots of tabs all this work is useless. Would be nice to have a check that avoids doing anything if all the tabs are small.","disapproval":false,"date":"2011-02-25 22:59:27.626556","approval":false},{"sender":"pkasting@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"BTW I'm ignoring this while it's still so much a WIP, since sky is a fine reviewer, but if you want me to take a look when it's more done, I'd be happy to.\n\nIf possible, I'd love to avoid adding a flag for this, and just do some personal testing and then go ahead and land by default, and see what feedback we get.","disapproval":false,"date":"2011-02-25 23:49:44.474900","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"OK, I think I'm done now (at least for views build)... Moved up the logic to a new file under browser/ui, now use the ICU based BreakIterator, and added unit tests.\n\nPlease take another look...\n\nThough you may decide to wait for the try bots to complete successfully...\n\nThanks!\n\nBYE\nMAD\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nOn 2011/02/25 22:59:27, sky wrote:\n> On 2011/02/25 21:49:24, MAD wrote:\n> > On 2011/02/25 21:04:44, sky wrote:\n> > > I thought this became more important once the strings got smaller. Although,\n> > is\n> > > there a reason why we shouldn't always do this?\n> > \n> > Because we may end up with something like ...x... which isn't very useful...\n> \n> Good point.\n> Different suggestion then. For folks with lots of tabs all this work is useless.\n> Would be nice to have a check that avoids doing anything if all the tabs are\n> small.\n\nThat would be hard, since the title_bounds and font are not public. Would it be worth making them public so that the tab_strip could use them to make this decision?","disapproval":false,"date":"2011-03-10 19:03:44.388078","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nOn 2011/03/10 19:03:44, MAD wrote:\n> On 2011/02/25 22:59:27, sky wrote:\n> > On 2011/02/25 21:49:24, MAD wrote:\n> > > On 2011/02/25 21:04:44, sky wrote:\n> > > > I thought this became more important once the strings got smaller.\n> Although,\n> > > is\n> > > > there a reason why we shouldn't always do this?\n> > > \n> > > Because we may end up with something like ...x... which isn't very useful...\n> > \n> > Good point.\n> > Different suggestion then. For folks with lots of tabs all this work is\n> useless.\n> > Would be nice to have a check that avoids doing anything if all the tabs are\n> > small.\n> \n> That would be hard, since the title_bounds and font are not public. Would it be\n> worth making them public so that the tab_strip could use them to make this\n> decision?\n\nDo you even need that? For horizontal tabs (TabStrip) couldn't you only do if the width of each tab is > some value? For vertical tabs (SideTabStrip) you probably never want to do this. I think.\n\nIf you do this you would have to be careful to recalculate things on layout. This is a pretty expensive computation. Is it worth trying to avoid it?\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.cc\nFile chrome/browser/ui/title_prefix_matcher.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.cc#newcode12\nchrome/browser/ui/title_prefix_matcher.cc:12: const size_t kPreviouslySeenIndex = 0xFFFFFFFF;\nDocument whta this is for.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h\nFile chrome/browser/ui/title_prefix_matcher.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode13\nchrome/browser/ui/title_prefix_matcher.h:13: namespace browser {\nWe generally don't use namespaces in cases like this.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode16\nchrome/browser/ui/title_prefix_matcher.h:16: // so that it can find the length of the common prefixes among all the titles.\nImagine if you didn't write this class and went to use it on the mac and/or linux. Is there enough info here to tell you how to use it? For example, TitleInfo::caller_value isn't described, nor do you document what prefix_length is. Could you clean this up? You should also document what this is intended to be used for.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode21\nchrome/browser/ui/title_prefix_matcher.h:21: : title(title), prefix_length(0), caller_value(caller_value) {}\nSince you wrapper, each param should be on its own line.\nHow a DCHECK(title) too.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode22\nchrome/browser/ui/title_prefix_matcher.h:22: TitleInfo(const TitleInfo& other)\nHow come you wrote copy constructor/assignment operator. For this class aren't the compiler generated ones what you want?\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode42\nchrome/browser/ui/title_prefix_matcher.h:42: DISALLOW_COPY_AND_ASSIGN(TitlePrefixMatcher);\nafter private. But you probably want DISALLOW_IMPLICIT_CONSTRUCTORS.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode17\nchrome/browser/ui/views/tabs/base_tab_strip.cc:17: #include \"chrome/common/chrome_switches.h\"\nDo we know this include anymore? In fact I suspect you can nuke nearly all of the includes you added.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: tab_data_[tab_index].tab->SetData(data);\nDidn't we want a SchedulePaint here?","disapproval":false,"date":"2011-03-11 00:00:45.348711","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode436\nchrome/browser/ui/views/tabs/base_tab_strip.cc:436: tab_data_[tab_index].tab->SetData(data);\nOn 2011/03/11 00:00:45, sky wrote:\n> Didn't we want a SchedulePaint here?\n\nNever mind. I see it in BaseTab.","disapproval":false,"date":"2011-03-11 00:01:37.639060","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"OK, I think I addressed all your comments in the most recent upload, except for checking if we need to compute the prefixes at the tab strip level if the tab width is too small...\n\nI answered in the comment, and I will try something out, but I wanted to give you the fixes to all other comments in the mean time...\n\nThanks a lot!\n\nBYE\nMAD\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc\nFile chrome/browser/ui/views/tabs/base_tab.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/17002/chrome/browser/ui/views/tabs/base_tab.cc#newcode449\nchrome/browser/ui/views/tabs/base_tab.cc:449: font_->GetExpectedTextWidth(10) < title_bounds.width() &&\nHum... I'm not sure what would be a good \"some value\"... But I could try something...\n\nI guess I could keep an extra boolean identifying if I need to recompute the prefixes or not, and only compute them when I need to and when I have enough room for them... What do you think?\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.cc\nFile chrome/browser/ui/title_prefix_matcher.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.cc#newcode12\nchrome/browser/ui/title_prefix_matcher.cc:12: const size_t kPreviouslySeenIndex = 0xFFFFFFFF;\nOn 2011/03/11 00:00:45, sky wrote:\n> Document whta this is for.\n\nDone.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h\nFile chrome/browser/ui/title_prefix_matcher.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode13\nchrome/browser/ui/title_prefix_matcher.h:13: namespace browser {\nOn 2011/03/11 00:00:45, sky wrote:\n> We generally don't use namespaces in cases like this.\n\nDone.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode16\nchrome/browser/ui/title_prefix_matcher.h:16: // so that it can find the length of the common prefixes among all the titles.\nOn 2011/03/11 00:00:45, sky wrote:\n> Imagine if you didn't write this class and went to use it on the mac and/or\n> linux. Is there enough info here to tell you how to use it? For example,\n> TitleInfo::caller_value isn't described, nor do you document what prefix_length\n> is. Could you clean this up? You should also document what this is intended to\n> be used for.\n\nDone.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode21\nchrome/browser/ui/title_prefix_matcher.h:21: : title(title), prefix_length(0), caller_value(caller_value) {}\nOn 2011/03/11 00:00:45, sky wrote:\n> Since you wrapper, each param should be on its own line.\n> How a DCHECK(title) too.\n\nDone.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode22\nchrome/browser/ui/title_prefix_matcher.h:22: TitleInfo(const TitleInfo& other)\nOn 2011/03/11 00:00:45, sky wrote:\n> How come you wrote copy constructor/assignment operator. For this class aren't\n> the compiler generated ones what you want?\n\nDone.\nThis was needed in a previous iteration when the title was a const& and I was allocating the TitleInfo... When I changed it to not allocating the TitleInfo, it needed these, but I could find a way to make it work with const string16&, so I changed it to a pointer and forgot to remove these... Thanks for mentioning it... :-)\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/title_prefix_matcher.h#newcode42\nchrome/browser/ui/title_prefix_matcher.h:42: DISALLOW_COPY_AND_ASSIGN(TitlePrefixMatcher);\nOn 2011/03/11 00:00:45, sky wrote:\n> after private. But you probably want DISALLOW_IMPLICIT_CONSTRUCTORS.\n\nDone.\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc\nFile chrome/browser/ui/views/tabs/base_tab_strip.cc (right):\n\nhttp://codereview.chromium.org/6579050/diff/32001/chrome/browser/ui/views/tabs/base_tab_strip.cc#newcode17\nchrome/browser/ui/views/tabs/base_tab_strip.cc:17: #include \"chrome/common/chrome_switches.h\"\nOn 2011/03/11 00:00:45, sky wrote:\n> Do we know this include anymore? In fact I suspect you can nuke nearly all of\n> the includes you added.\n\nD'ho...ne.\n\nSorry about that...","disapproval":false,"date":"2011-03-11 03:01:37.746473","approval":false},{"sender":"sky@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"I'm giving you the LGTM for now.\n\nAs this computation is expensive, and gets even more so with the more tabs you have I think we should not do the calculation if possible. So, ya, the boolean sounds good. That can be done in a separate patch though. I say land this for now.\n\n  -Scott\n\nhttp://codereview.chromium.org/6579050/diff/38003/chrome/browser/ui/title_prefix_matcher.h\nFile chrome/browser/ui/title_prefix_matcher.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/38003/chrome/browser/ui/title_prefix_matcher.h#newcode41\nchrome/browser/ui/title_prefix_matcher.h:41: private:\nnit: newline between 40 and 41.","disapproval":false,"date":"2011-03-11 16:32:15.301090","approval":true},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org"],"text":"Thanks! :-)\n\nWill do...\n\nBYE\nMAD","disapproval":false,"date":"2011-03-11 19:17:56.073566","approval":false},{"sender":"mad@chromium.org","recipients":["mad@chromium.org","sky@chromium.org","pkasting@chromium.org","chromium-reviews@chromium.org","phajdan.jr@chromium.org"],"text":"http://codereview.chromium.org/6579050/diff/38003/chrome/browser/ui/title_prefix_matcher.h\nFile chrome/browser/ui/title_prefix_matcher.h (right):\n\nhttp://codereview.chromium.org/6579050/diff/38003/chrome/browser/ui/title_prefix_matcher.h#newcode41\nchrome/browser/ui/title_prefix_matcher.h:41: private:\nOn 2011/03/11 16:32:15, sky wrote:\n> nit: newline between 40 and 41.\n\nDone.","disapproval":false,"date":"2011-03-11 19:24:41.626352","approval":false}],"owner_email":"mad@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src/","owner":"MAD","subject":"Elides the beginning of tab titles that have common prefixes. ...","created":"2011-02-25 00:49:06.272305","patchsets":[1,1003,8001,12001,17002,19001,23003,27001,32001,36001,38003,42001],"modified":"2011-05-24 20:14:35.448974","closed":true,"commit":false,"issue":6579050}