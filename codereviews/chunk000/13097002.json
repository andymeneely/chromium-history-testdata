{"description":"Do not create one GL context per CompositingIOSurface\n\nDo not create one GL context per CompositingIOSurface, rather, \nshare a single GL context across all CompositingIOSurfaces that\nare drawing to a given NSWindow (as determined by window number)\nand have the same window ordering (above or below).\n\nThis cuts the regression in the ShutdownTests.TwentyTabs* from \n81% to 47%. Most of the rest is from the cost of destroying the \nrenderers' GL contexts in the GPU process. \n\nBUG=180463\n\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=192111","cc":["chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"reviewers":["kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org"],"messages":[{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"This takes care of half of the shutdown regression.\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode241\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:241: if (order == SURFACE_ORDER_BELOW_WINDOW) {\nI have yet to find an instance where just skipping this logic results in incorrect rendering. Is there an example that I can try? I tried the scenarios listed in crbug.com/161603\n\nOf note is that if I take this branch inappropriately, there is incorrect rendering (and setting below/above dynamically before draw also results in incorrect rendering).\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode325\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:325: CompositingIOSurfaceMac::ContextData::window_context_map_ = NULL;\nThis needs to be a pointer because we have warnings to disallow at-exit dtors (having it as a pointer feels a bit hacky)","disapproval":false,"date":"2013-03-26 20:52:42.784050","approval":false},{"sender":"avi@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"https://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode241\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:241: if (order == SURFACE_ORDER_BELOW_WINDOW) {\nFor tab web contents, we set this flag so that the find bar will display above web contents. For web contents used in things like extensions, we don't bother with this flag for sanity's sake.\n\nIf you want to verify this logic, type Command-F and make sure you can see the find bar. Without hole punching and this ordering stuff, the find bar won't be visible.","disapproval":false,"date":"2013-03-26 20:59:39.770780","approval":false},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"On 2013/03/26 20:59:39, Avi wrote:\n> https://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm\n> File content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n> \n> https://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode241\n> content/browser/renderer_host/compositing_iosurface_mac.mm:241: if (order ==\n> SURFACE_ORDER_BELOW_WINDOW) {\n> For tab web contents, we set this flag so that the find bar will display above\n> web contents. For web contents used in things like extensions, we don't bother\n> with this flag for sanity's sake.\n> \n> If you want to verify this logic, type Command-F and make sure you can see the\n> find bar. Without hole punching and this ordering stuff, the find bar won't be\n> visible.\n\nPerfect, that shows it (if I get rid of this, then Command-F is hidden). Thanks!","disapproval":false,"date":"2013-03-26 21:05:36.424220","approval":false},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Ping","disapproval":false,"date":"2013-03-28 00:36:57.268180","approval":false},{"sender":"kbr@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Sorry for the delay. LGTM with a couple of small issues.\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.h\nFile content/browser/renderer_host/compositing_iosurface_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.h#newcode220\ncontent/browser/renderer_host/compositing_iosurface_mac.h:220: int window_number_;\nThe public fields here violate the style guide. http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Access_Control\n\nI realize this is only used internally so this isn't a big deal, but consider whether this should be a struct (would also violate the style guide since it isn't entirely a passive object).\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode314\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:314: DCHECK(window_context_map_->find(key) == window_context_map_->end());\nDid you run this in debug mode? Isn't the sense of this DCHECK reversed?\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode325\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:325: CompositingIOSurfaceMac::ContextData::window_context_map_ = NULL;\nOn 2013/03/26 20:52:43, ccameron1 wrote:\n> This needs to be a pointer because we have warnings to disallow at-exit dtors\n> (having it as a pointer feels a bit hacky)\n\nConsider using base's LazyInstance or Singleton for this; it looks like they will reduce the amount of error checking code throughout.","disapproval":false,"date":"2013-03-28 00:54:59.892080","approval":true},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Thanks!!\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.h\nFile content/browser/renderer_host/compositing_iosurface_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.h#newcode220\ncontent/browser/renderer_host/compositing_iosurface_mac.h:220: int window_number_;\nThanks -- I changed this to use accessors, and make the members private. It's more consistent that way.\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode314\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:314: DCHECK(window_context_map_->find(key) == window_context_map_->end());\nOn 2013/03/28 00:55:00, kbr wrote:\n> Did you run this in debug mode? Isn't the sense of this DCHECK reversed?\n\nFixed (eek... that got flipped just after I uploaded...).\n\nhttps://codereview.chromium.org/13097002/diff/1/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode325\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:325: CompositingIOSurfaceMac::ContextData::window_context_map_ = NULL;\nThanks -- LazyInstance is what I needed here.","disapproval":false,"date":"2013-03-28 19:16:15.166020","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ccameron@chromium.org/13097002/15001","disapproval":false,"date":"2013-03-28 19:17:33.803520","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Failed to apply patch for content/browser/renderer_host/compositing_iosurface_mac.h:\nWhile running patch -p1 --forward --force --no-backup-if-mismatch;\n  patching file content/browser/renderer_host/compositing_iosurface_mac.h\n  Hunk #1 succeeded at 10 with fuzz 1 (offset 2 lines).\n  Hunk #2 succeeded at 47 (offset 5 lines).\n  Hunk #3 succeeded at 71 (offset 5 lines).\n  Hunk #4 succeeded at 114 (offset 4 lines).\n  Hunk #5 FAILED at 209.\n  Hunk #6 succeeded at 289 (offset 19 lines).\n  Hunk #7 FAILED at 294.\n  2 out of 7 hunks FAILED -- saving rejects to file content/browser/renderer_host/compositing_iosurface_mac.h.rej\n\nPatch:       content/browser/renderer_host/compositing_iosurface_mac.h\nIndex: content/browser/renderer_host/compositing_iosurface_mac.h\ndiff --git a/content/browser/renderer_host/compositing_iosurface_mac.h b/content/browser/renderer_host/compositing_iosurface_mac.h\nindex 19a04a6e75c7596c99b8abca552d609f57a035af..a65b3bdb87fb8443ea02fbc3d4043e0764e06215 100644\n--- a/content/browser/renderer_host/compositing_iosurface_mac.h\n+++ b/content/browser/renderer_host/compositing_iosurface_mac.h\n@@ -8,8 +8,10 @@\n #import <Cocoa/Cocoa.h>\n #import <QuartzCore/CVDisplayLink.h>\n #include <QuartzCore/QuartzCore.h>\n+#include <map>\n \n #include \"base/callback.h\"\n+#include \"base/lazy_instance.h\"\n #include \"base/mac/scoped_cftyperef.h\"\n #include \"base/memory/scoped_nsobject.h\"\n #include \"base/synchronization/lock.h\"\n@@ -40,14 +42,16 @@ class CompositingIOSurfaceMac {\n   // Passed to Create() to specify the ordering of the surface relative to the\n   // containing window.\n   enum SurfaceOrder {\n-    SURFACE_ORDER_ABOVE_WINDOW,\n-    SURFACE_ORDER_BELOW_WINDOW\n+    SURFACE_ORDER_ABOVE_WINDOW = 0,\n+    SURFACE_ORDER_BELOW_WINDOW = 1,\n+    SURFACE_ORDER_COUNT = 2,\n   };\n \n   // Returns NULL if IOSurface support is missing or GL APIs fail. Specify in\n   // |order| the desired ordering relationship of the surface to the containing\n   // window.\n-  static CompositingIOSurfaceMac* Create(SurfaceOrder order);\n+  static CompositingIOSurfaceMac* Create(\n+      int window_number, SurfaceOrder order);\n   ~CompositingIOSurfaceMac();\n \n   // Set IOSurface that will be drawn on the next NSView drawRect.\n@@ -62,7 +66,7 @@ class CompositingIOSurfaceMac {\n   // will be white. |scaleFactor| is 1 in normal views, 2 in HiDPI views.\n   // |frame_subscriber| listens to this draw event and provides output buffer\n   // for copying this frame into.\n-  void DrawIOSurface(NSView* view, float scale_factor,\n+  void DrawIOSurface(NSView* view, float scale_factor, int window_number,\n                      RenderWidgetHostViewFrameSubscriber* frame_subscriber);\n \n   // Copy the data of the \"live\" OpenGL texture referring to this IOSurfaceRef\n@@ -106,7 +110,7 @@ class CompositingIOSurfaceMac {\n   // In cocoa view units / DIPs.\n   const gfx::Size& io_surface_size() const { return io_surface_size_; }\n \n-  bool is_vsync_disabled() const { return is_vsync_disabled_; }\n+  bool is_vsync_disabled() const { return context_data_->is_vsync_disabled(); }\n \n   // Get vsync scheduling parameters.\n   // |interval_numerator/interval_denominator| equates to fractional number of\n@@ -205,13 +209,68 @@ class CompositingIOSurfaceMac {\n     base::Callback<base::Closure(void*)> map_buffer_callback;\n   };\n \n+  // The GL context that is bound to an NSView when a CompositingIOSurface is to\n+  // drawn into the NSView. One GL context is shared for all\n+  // CompositingIOSurfaces with the same window ordering in the same browser\n+  // window.\n+  class ContextData : public base::RefCounted<ContextData> {\n+   public:\n+    static scoped_refptr<ContextData> Get(\n+        int window_number, SurfaceOrder order);\n+\n+    int window_number() const { return window_number_; }\n+    SurfaceOrder order() const { return order_; }\n+    NSOpenGLContext* nsgl_context() const { return nsgl_context_; }\n+    CGLContextObj cgl_context() const { return cgl_context_; }\n+    GLuint shader_program_blit_rgb() const {\n+      return shader_program_blit_rgb_;\n+    }\n+    GLint blit_rgb_sampler_location() const {\n+      return blit_rgb_sampler_location_;\n+    }\n+    GLuint shader_program_white() const {\n+      return shader_program_white_;\n+    }\n+    bool is_vsync_disabled() const { return is_vsync_disabled_; }\n+\n+   private:\n+    friend class base::RefCounted<ContextData>;\n+    ContextData(\n+        int window_number,\n+        SurfaceOrder order,\n+        NSOpenGLContext* nsgl_context,\n+        CGLContextObj cgl_context,\n+        GLuint shader_program_blit_rgb,\n+        GLint blit_rgb_sampler_location,\n+        GLuint shader_program_white,\n+        bool is_vsync_disabled);\n+    virtual ~ContextData();\n+\n+    int window_number_;\n+    SurfaceOrder order_;\n+\n+    // GL context\n+    scoped_nsobject<NSOpenGLContext> nsgl_context_;\n+    CGLContextObj cgl_context_; // weak, backed by |nsgl_context_|.\n+\n+    // Shader parameters.\n+    GLuint shader_program_blit_rgb_;\n+    GLint blit_rgb_sampler_location_;\n+    GLuint shader_program_white_;\n+\n+    bool is_vsync_disabled_;\n+\n+    // The global map from window number and window ordering to\n+    // context data.\n+    typedef std::map<std::pair<int,int>, ContextData*> ContextDataMap;\n+    static base::LazyInstance<ContextDataMap> context_data_map_;\n+    static ContextDataMap* context_data_map() {\n+      return context_data_map_.Pointer();\n+    }\n+  };\n+\n   CompositingIOSurfaceMac(IOSurfaceSupport* io_surface_support,\n-                          NSOpenGLContext* glContext,\n-                          CGLContextObj cglContext,\n-                          GLuint shader_program_blit_rgb,\n-                          GLint blit_rgb_sampler_location,\n-                          GLuint shader_program_white,\n-                          bool is_vsync_disabled,\n+                          scoped_refptr<ContextData> context_data,\n                           CVDisplayLinkRef display_link);\n \n   bool IsVendorIntel();\n@@ -266,9 +325,9 @@ class CompositingIOSurfaceMac {\n   // Cached pointer to IOSurfaceSupport Singleton.\n   IOSurfaceSupport* io_surface_support_;\n \n-  // GL context\n-  scoped_nsobject<NSOpenGLContext> glContext_;\n-  CGLContextObj cglContext_;  // weak, backed by |glContext_|.\n+  // GL context for drawing and copying. May change when drawing, but is\n+  // never NULL.\n+  scoped_refptr<ContextData> context_data_;\n \n   // IOSurface data.\n   uint64 io_surface_handle_;\n@@ -290,15 +349,8 @@ class CompositingIOSurfaceMac {\n   // Timer for finishing a copy operation.\n   base::RepeatingTimer<CompositingIOSurfaceMac> copy_timer_;\n \n-  // Shader parameters.\n-  GLuint shader_program_blit_rgb_;\n-  GLint blit_rgb_sampler_location_;\n-  GLuint shader_program_white_;\n-\n   SurfaceQuad quad_;\n \n-  bool is_vsync_disabled_;\n-\n   // CVDisplayLink for querying Vsync timing info and throttling swaps.\n   CVDisplayLinkRef display_link_;","disapproval":false,"date":"2013-03-28 19:17:36.620610","approval":false},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"This conflicts horribly with\nhttps://codereview.chromium.org/12914002/\nand basically needs to be rewritten.","disapproval":false,"date":"2013-03-28 19:41:20.442680","approval":false},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Resolved now (added https://codereview.chromium.org/13363002/ as an intermediate).\n\nAdding miu to verify that this work with the new structure.\n\nThis CL will move CompositingIOSurfaces from one GL context to another. I've\n1. hung the shaders off of the context object\n2. deferred moving from one GL context to another until all copies are complete\n3. deleted the transform_ when moving GL contexts\nIn particular, I'd like to very that for 2, copy_requests_ will \"most of the time\" be empty (like, say, for at least 4 out of every 5 seconds). We transition GL contexts for performance reasons -- it's quite okay if the transition is delayed for a few frames (and a few seconds won't hurt too much, though shorter would be better).","disapproval":false,"date":"2013-04-01 20:03:53.434220","approval":false},{"sender":"kbr@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Still LGTM if it doesn't change substantially once https://codereview.chromium.org/13363002/ lands.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.h\nFile content/browser/renderer_host/compositing_iosurface_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.h#newcode214\ncontent/browser/renderer_host/compositing_iosurface_mac.h:214: // Change context_ to the GL context for view's window, if possible.\nDoes \"if possible\" mean that this should return a bool?","disapproval":false,"date":"2013-04-01 20:18:07.399410","approval":true},{"sender":"miu@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"ccameron@,\n\nThanks for looping me in on these changes.  I'm pretty sure they will work just fine with the copy code.  We should have testing in-place soon, but for now I'll do some manual testing to check for breakage after you commit.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h\nFile content/browser/renderer_host/compositing_iosurface_context_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode27\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:27: GLint surface_order);\nUse the SurfaceOrder enum as the type for |surface_order| here, and everywhere else in this patch.  FWICT, the only code that needs the -1 or +1 GLint value is CompositingIOSurfaceContext::Get() line 65, so just do the conversion there.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode36\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:36: GLint gl_surface_order() const { return gl_surface_order_; }\nShould return SurfaceOrder instead of GLint (see comment above).  Or, consider getting rid of this accessor if no code calls it.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode65\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:65: return window_map_.Pointer();\nYou should not in-line the window_map() function.  LazyInstance::Pointer() is a templated method, and therefore non-trivial code bloat could result everywhere you call window_map().\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode840\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:840: bool CompositingIOSurfaceMac::PendingAsynchronousCopiesExist() const {\nSuggestion: I wouldn't bother adding this method since it is only called from one place.  Just do this (in SwitchToContextOnNewWindow()):\n\n  if (!copy_requests_.empty())\n    return;","disapproval":false,"date":"2013-04-01 21:37:37.772060","approval":false},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Thanks!!\n\nThis is a lot better for the cleanup that it conflicted with.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h\nFile content/browser/renderer_host/compositing_iosurface_context_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode27\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:27: GLint surface_order);\nOn 2013/04/01 21:37:37, Yuri wrote:\n> Use the SurfaceOrder enum as the type for |surface_order| here, and everywhere\n> else in this patch.  FWICT, the only code that needs the -1 or +1 GLint value is\n> CompositingIOSurfaceContext::Get() line 65, so just do the conversion there.\n\nDone (pulled it into the CL this is put on top of).\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode36\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:36: GLint gl_surface_order() const { return gl_surface_order_; }\nOn 2013/04/01 21:37:37, Yuri wrote:\n> Should return SurfaceOrder instead of GLint (see comment above).  Or, consider\n> getting rid of this accessor if no code calls it.\n\nDone.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_context_mac.h#newcode65\ncontent/browser/renderer_host/compositing_iosurface_context_mac.h:65: return window_map_.Pointer();\nOn 2013/04/01 21:37:37, Yuri wrote:\n> You should not in-line the window_map() function.  LazyInstance::Pointer() is a\n> templated method, and therefore non-trivial code bloat could result everywhere\n> you call window_map().\n\nDone.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.h\nFile content/browser/renderer_host/compositing_iosurface_mac.h (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.h#newcode214\ncontent/browser/renderer_host/compositing_iosurface_mac.h:214: // Change context_ to the GL context for view's window, if possible.\nOn 2013/04/01 20:18:07, kbr wrote:\n> Does \"if possible\" mean that this should return a bool?\n\nIf this decides not to move the context (or fails to), it just keeps using the old context, which can sometimes cause bad performance (setView stalling makes hitting 60fps hard, so it drops down to 30fps if there are multiple windows). But, because the return value isn't used, I'd prefer to keep it as void.\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/23001/content/browser/renderer_host/compositing_iosurface_mac.mm#newcode840\ncontent/browser/renderer_host/compositing_iosurface_mac.mm:840: bool CompositingIOSurfaceMac::PendingAsynchronousCopiesExist() const {\nOn 2013/04/01 21:37:37, Yuri wrote:\n> Suggestion: I wouldn't bother adding this method since it is only called from\n> one place.  Just do this (in SwitchToContextOnNewWindow()):\n> \n>   if (!copy_requests_.empty())\n>     return;\n\nDone.","disapproval":false,"date":"2013-04-01 23:55:49.632400","approval":false},{"sender":"miu@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"lgtm\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_context_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm#newcode27\ncontent/browser/renderer_host/compositing_iosurface_context_mac.mm:27: std::pair<int,int> key = std::make_pair(\nstyle nit: need space after comma (between \"int,int\")\n\nAnd below...\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm#newcode128\ncontent/browser/renderer_host/compositing_iosurface_context_mac.mm:128: std::pair<int,GLint> key = std::make_pair(\nShould be std::pair<int, int>","disapproval":false,"date":"2013-04-02 00:08:10.076250","approval":true},{"sender":"ccameron@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Thanks!\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm\nFile content/browser/renderer_host/compositing_iosurface_context_mac.mm (right):\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm#newcode27\ncontent/browser/renderer_host/compositing_iosurface_context_mac.mm:27: std::pair<int,int> key = std::make_pair(\nOn 2013/04/02 00:08:10, Yuri wrote:\n> style nit: need space after comma (between \"int,int\")\n> \n> And below...\n\nDone.\n\nhttps://codereview.chromium.org/13097002/diff/23002/content/browser/renderer_host/compositing_iosurface_context_mac.mm#newcode128\ncontent/browser/renderer_host/compositing_iosurface_context_mac.mm:128: std::pair<int,GLint> key = std::make_pair(\nOn 2013/04/02 00:08:10, Yuri wrote:\n> Should be std::pair<int, int>\n\nDone.","disapproval":false,"date":"2013-04-02 00:49:27.443670","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ccameron@chromium.org/13097002/42001","disapproval":false,"date":"2013-04-02 23:46:11.145850","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Failed to apply patch for content/browser/renderer_host/render_widget_host_view_mac.mm:\nWhile running patch -p1 --forward --force --no-backup-if-mismatch;\n  patching file content/browser/renderer_host/render_widget_host_view_mac.mm\n  Hunk #1 succeeded at 504 (offset 4 lines).\n  Hunk #2 succeeded at 901 (offset 4 lines).\n  Hunk #3 FAILED at 1050.\n  Hunk #4 succeeded at 1088 (offset 18 lines).\n  Hunk #5 succeeded at 1111 (offset 18 lines).\n  Hunk #6 succeeded at 2297 (offset 18 lines).\n  1 out of 6 hunks FAILED -- saving rejects to file content/browser/renderer_host/render_widget_host_view_mac.mm.rej\n\nPatch:       content/browser/renderer_host/render_widget_host_view_mac.mm\nIndex: content/browser/renderer_host/render_widget_host_view_mac.mm\ndiff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm\nindex 0a36a3deda054ba18b86b2bd06836c4558f11e7f..c5d04a23ba49ae2b5d8f1800a3aec79f5ae1125a 100644\n--- a/content/browser/renderer_host/render_widget_host_view_mac.mm\n+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm\n@@ -500,6 +500,13 @@ void RenderWidgetHostViewMac::release_pepper_fullscreen_window_for_testing() {\n   pepper_fullscreen_window_.reset();\n }\n \n+int RenderWidgetHostViewMac::window_number() const {\n+  NSWindow* window = [cocoa_view_ window];\n+  if (!window)\n+    return -1;\n+  return [window windowNumber];\n+}\n+\n RenderWidgetHost* RenderWidgetHostViewMac::GetRenderWidgetHost() const {\n   return render_widget_host_;\n }\n@@ -890,7 +897,7 @@ void RenderWidgetHostViewMac::SetShowingContextMenu(bool showing) {\n                                       location:location\n                                  modifierFlags:0\n                                      timestamp:0\n-                                  windowNumber:[window windowNumber]\n+                                  windowNumber:window_number()\n                                        context:nil\n                                    eventNumber:0\n                                     clickCount:0\n@@ -1043,7 +1050,7 @@ bool RenderWidgetHostViewMac::CompositorSwapBuffers(uint64 surface_handle,\n   // browsers are likely to crash later for unrelated reasons).\n   // http://crbug.com/148882\n   NSWindow* window = [cocoa_view_ window];\n-  if ([window windowNumber] <= 0) {\n+  if (window_number() <= 0) {\n     const char* const kCrashKey = \"rwhvm_window\";\n     if (!window) {\n       base::debug::SetCrashKeyValue(kCrashKey, \"Missing window\");\n@@ -1063,7 +1070,8 @@ bool RenderWidgetHostViewMac::CompositorSwapBuffers(uint64 surface_handle,\n     CompositingIOSurfaceMac::SurfaceOrder order = allow_overlapping_views_ ?\n         CompositingIOSurfaceMac::SURFACE_ORDER_BELOW_WINDOW :\n         CompositingIOSurfaceMac::SURFACE_ORDER_ABOVE_WINDOW;\n-    compositing_iosurface_.reset(CompositingIOSurfaceMac::Create(order));\n+    compositing_iosurface_.reset(\n+        CompositingIOSurfaceMac::Create(window_number(), order));\n   }\n \n   if (!compositing_iosurface_.get())\n@@ -1085,6 +1093,7 @@ bool RenderWidgetHostViewMac::CompositorSwapBuffers(uint64 surface_handle,\n   if (!about_to_validate_and_paint_) {\n     compositing_iosurface_->DrawIOSurface(cocoa_view_,\n                                           ScaleFactor(cocoa_view_),\n+                                          window_number(),\n                                           frame_subscriber_.get());\n   }\n   return true;\n@@ -2270,7 +2279,10 @@ gfx::Rect RenderWidgetHostViewMac::GetScaledOpenGLPixelRect(\n     }\n \n     renderWidgetHostView_->compositing_iosurface_->DrawIOSurface(\n-        self, ScaleFactor(self), renderWidgetHostView_->frame_subscriber());\n+        self,\n+        ScaleFactor(self),\n+        renderWidgetHostView_->window_number(),\n+        renderWidgetHostView_->frame_subscriber());\n     return;\n   }","disapproval":false,"date":"2013-04-02 23:46:13.315810","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/ccameron@chromium.org/13097002/48001","disapproval":false,"date":"2013-04-03 16:44:51.660750","approval":false},{"sender":"commit-bot@chromium.org","recipients":["ccameron@chromium.org","kbr@chromium.org","thakis@chromium.org","avi@chromium.org","miu@chromium.org","chromium-reviews@chromium.org","yusukes+watch@chromium.org","jam@chromium.org","penghuang+watch@chromium.org","sail+watch@chromium.org","joi+watch-content@chromium.org","darin-cc@chromium.org","suzhe@chromium.org"],"text":"Change committed as 192111","disapproval":false,"date":"2013-04-03 18:59:51.819040","approval":false}],"owner_email":"ccameron@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"ccameron1","subject":"Do not create one GL context per CompositingIOSurface","created":"2013-03-26 20:45:28.024030","patchsets":[1,9001,15001,23001,31001,23002,42001,48001],"modified":"2013-04-03 18:59:52.085740","closed":true,"commit":false,"issue":13097002}