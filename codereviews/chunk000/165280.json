{"description":"linux/mac: Fix race condition when destroying the renderer<->plugin channel\r\n\r\nThere is a race condition at plugin destruction on posix:\r\n1- (renderer) WebPluginDelegateProxy1 opens a channel to the plugin\r\n2- (plugin) new channel created, sends FD1 to renderer\r\n3- (renderer) WebPluginDelegateProxy1 receives FD1, establishes the channel name -> FD1 mapping.\r\n[...]\r\n4- (renderer) WebPluginDelegateProxy1 asks the plugin to destroy an instance, and schedules self for delayed deletion which will release the channel and remove the mapping.\r\n5- (plugin) this was the last instance, plugin closes its end of the channel, removes its mapping.\r\n6- (renderer) WebPluginDelegateProxy2 opens a channel to the plugin\r\n7- (plugin) new channel created, sends FD2 to renderer\r\n8- (renderer) WebPluginDelegateProxy2 receives FD2, establishes the channel name -> FD2 mapping *ASSERT* because the mapping already exists (to FD1)\r\n9- (renderer) WebPluginDelegateProxy1 deleted, causes channel host destruction and removing of channel name -> FD1 mapping\r\n\r\nThe channel host destruction in (9) needs to happen before (8). This CL does that.\r\n\r\nBUG=18491\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=23102","cc":["chromium-reviews@googlegroups.com"],"reviewers":["jam@chromium.org","evan@chromium.org","amanda@chromium.org"],"messages":[{"sender":"piman@chromium.org","recipients":["piman@chromium.org","jam@chromium.org","evan@chromium.org","chromium-reviews@googlegroups.com"],"text":"","disapproval":false,"date":"2009-08-11 00:33:44.395880","approval":false},{"sender":"jam@chromium.org","recipients":["piman@chromium.org","jam@chromium.org","evan@chromium.org","amanda@chromium.org","chromium-reviews@googlegroups.com"],"text":"http://codereview.chromium.org/165280/diff/1002/4\nFile chrome/renderer/webplugin_delegate_proxy.cc (right):\n\nhttp://codereview.chromium.org/165280/diff/1002/4#newcode218\nLine 218: channel_host_ = NULL;\nWhat about other WebPluginDelegateProxy methods that assume channel_host_ is non-null and can be called in the meantime (i.e. Paint)?  Don't these functions need to be updated in this change?","disapproval":false,"date":"2009-08-11 01:37:47.152415","approval":false},{"sender":"piman@chromium.org","recipients":[],"text":"\nOn Mon, Aug 10, 2009 at 6:37 PM, <jam@chromium.org> wrote:\n>\n> http://codereview.chromium.org/165280/diff/1002/4\n> File chrome/renderer/webplugin_delegate_proxy.cc (right):\n>\n> http://codereview.chromium.org/165280/diff/1002/4#newcode218\n> Line 218: channel_host_ =3D NULL;\n> What about other WebPluginDelegateProxy methods that assume\n> channel_host_ is non-null and can be called in the meantime (i.e.\n> Paint)? =A0Don't these functions need to be updated in this change?\n\nSo, I actually spent a lot of time trying to figure out all the paths\nto the WebPluginDelegateProxy, to make sure that change was sane. I\nthink that I got them all, but feel free to discuss further. Here's\nthe detail:\nThe delegate is created in WebFrameLoaderClient::createPlugin. That\ncalls RenderView::CreatePluginDelegate, and the RenderView keeps it in\nits plugin_delegates_ list, but that is only used to clean up the back\npointer by calling WebPluginDelegate::DropRenderView, which doesn't\naccess channel_host_.\nFrom WebFrameLoaderClient it is passed directly to the WebPluginImpl,\nwithout keeping it as a reference.\nWebPluginImpl keeps the reference to it in delegate_. Mostly it calls\nfunctions on it, except it gives it to its webframe_ member, that\nkeeps a reference to it accessible only through its\nWebFrame::plugin_delegate() member. Every use of\nWebFrame::plugin_delegate() that I could find was used to call\nWebPluginDelegateProxy::DidFinishLoadWithReason. That function only\ncalls WebPluginDelegateProxy::Send which safely tests for\nchannel_host_. Note that before this patch if we called\nWebPluginDelegateProxy::DidFinishLoadWithReason after\nWebPluginDelegateProxy::PluginDestroyed(), we would send a message\nwith an invalid route id (which fortunately isn't that bad because\nroute ids aren't re-used except after wrapping but at that point all\nhell breaks loose anyway), now we don't any more.\nBack to the WebPluginImpl, it resets its delegate_ member after\ncalling PluginDestroyed(), so it can't call a function (like Paint) on\nWebPluginDelegateProxy if channel_host_ is NULL.\nSo, we're down to the WebPluginDelegateProxy itself. The only places\nit passes itself ('this') to another function/object are:\n- MessageLoop::current()->DeleteSoon(FROM_HERE, this);  -- no problem.\n- render_view_->PluginDestroyed(this);  -- all this does is remove\nitself from the RenderView::plugin_delegates_, and reset the\nfirst_default_plugin_ member, none of which access the channel_host_.\n- window_script_object_->set_proxy(this);  -- this makes the\nNPObjectStub keep a reference to the delegate, but that's only used to\nclean up the back pointer in\nWebPluginDelegateProxy::DropWindowScriptObject, which doesn't access\nthe channel_host_.\n- render_view_->OnMissingPluginStatus(this, status);  -- the\nRenderView keeps it as first_default_plugin_, only to call\nWebPluginDelegateProxy::InstallMissingPlugin(), which only calls Send\nwhich is safe as seen above.\n- channel_host_->AddRoute(instance_id_, this, false); -- that's the\nonly thing remaining, which lets the channel call back into the\nWebPluginDelegateProxy on messages. However, the route is removed\nbefore we set channel_host_ to NULL, so it is safe as well.\n\n\n>\n> http://codereview.chromium.org/165280\n>","disapproval":false,"date":"2009-08-11 03:09:43.534873","approval":false},{"sender":"jam@chromium.org","recipients":["piman@chromium.org","jam@chromium.org","evan@chromium.org","amanda@chromium.org","chromium-reviews@googlegroups.com"],"text":"lgtm, thanks for the thorough writeup.  You've alleviated my concern.\n\nOn 2009/08/11 03:09:43, piman wrote:\n> On Mon, Aug 10, 2009 at 6:37 PM, <jam@chromium.org> wrote:\n> >\n> > http://codereview.chromium.org/165280/diff/1002/4\n> > File chrome/renderer/webplugin_delegate_proxy.cc (right):\n> >\n> > http://codereview.chromium.org/165280/diff/1002/4#newcode218\n> > Line 218: channel_host_ =3D NULL;\n> > What about other WebPluginDelegateProxy methods that assume\n> > channel_host_ is non-null and can be called in the meantime (i.e.\n> > Paint)? =A0Don't these functions need to be updated in this change?\n> \n> So, I actually spent a lot of time trying to figure out all the paths\n> to the WebPluginDelegateProxy, to make sure that change was sane. I\n> think that I got them all, but feel free to discuss further. Here's\n> the detail:\n> The delegate is created in WebFrameLoaderClient::createPlugin. That\n> calls RenderView::CreatePluginDelegate, and the RenderView keeps it in\n> its plugin_delegates_ list, but that is only used to clean up the back\n> pointer by calling WebPluginDelegate::DropRenderView, which doesn't\n> access channel_host_.\n> From WebFrameLoaderClient it is passed directly to the WebPluginImpl,\n> without keeping it as a reference.\n> WebPluginImpl keeps the reference to it in delegate_. Mostly it calls\n> functions on it, except it gives it to its webframe_ member, that\n> keeps a reference to it accessible only through its\n> WebFrame::plugin_delegate() member. Every use of\n> WebFrame::plugin_delegate() that I could find was used to call\n> WebPluginDelegateProxy::DidFinishLoadWithReason. That function only\n> calls WebPluginDelegateProxy::Send which safely tests for\n> channel_host_. Note that before this patch if we called\n> WebPluginDelegateProxy::DidFinishLoadWithReason after\n> WebPluginDelegateProxy::PluginDestroyed(), we would send a message\n> with an invalid route id (which fortunately isn't that bad because\n> route ids aren't re-used except after wrapping but at that point all\n> hell breaks loose anyway), now we don't any more.\n> Back to the WebPluginImpl, it resets its delegate_ member after\n> calling PluginDestroyed(), so it can't call a function (like Paint) on\n> WebPluginDelegateProxy if channel_host_ is NULL.\n> So, we're down to the WebPluginDelegateProxy itself. The only places\n> it passes itself ('this') to another function/object are:\n> - MessageLoop::current()->DeleteSoon(FROM_HERE, this);  -- no problem.\n> - render_view_->PluginDestroyed(this);  -- all this does is remove\n> itself from the RenderView::plugin_delegates_, and reset the\n> first_default_plugin_ member, none of which access the channel_host_.\n> - window_script_object_->set_proxy(this);  -- this makes the\n> NPObjectStub keep a reference to the delegate, but that's only used to\n> clean up the back pointer in\n> WebPluginDelegateProxy::DropWindowScriptObject, which doesn't access\n> the channel_host_.\n> - render_view_->OnMissingPluginStatus(this, status);  -- the\n> RenderView keeps it as first_default_plugin_, only to call\n> WebPluginDelegateProxy::InstallMissingPlugin(), which only calls Send\n> which is safe as seen above.\n> - channel_host_->AddRoute(instance_id_, this, false); -- that's the\n> only thing remaining, which lets the channel call back into the\n> WebPluginDelegateProxy on messages. However, the route is removed\n> before we set channel_host_ to NULL, so it is safe as well.\n> \n> \n> >\n> > http://codereview.chromium.org/165280\n> >","disapproval":false,"date":"2009-08-11 04:07:15.697021","approval":true}],"owner_email":"piman@chromium.org","private":false,"base_url":"","owner":"piman","subject":"linux/mac: Fix race condition when destroying the renderer<->plugin channel","created":"2009-08-11 00:32:57.016949","patchsets":[1,1002],"modified":"2011-05-09 13:48:03.914458","closed":true,"commit":false,"issue":165280}