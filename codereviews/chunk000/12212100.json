{"description":"Provide shared context to Platform API in renderer.\n\nImplements the WebKit::Platform::sharedOffscreenGraphicsContext3D API\nin the renderer, and provide the same shared context to WebKit and the\ncompositor when the compositor is not threaded.\n\nRenderWidgetCompositor and RendererWebKitPlatformSupport both access\nthe shared context through RenderThreadImpl who creates them.\n\nR=piman,jamesr\nBUG=177768\n\nCommitted: https://src.chromium.org/viewvc/chrome?view=rev&revision=186342","cc":["chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"reviewers":["piman@chromium.org","jamesr@chromium.org"],"messages":[{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org"],"text":"Here's the renderer follow up for https://codereview.chromium.org/12212007/.\n\nIt is built on top of that as well as https://codereview.chromium.org/12217099/ (the webkit TestWKPlatformSupport stuff).\n\nIf we want, we could land this first, but then compositor's shared context would not be the same as WebKit's until the WebKit side landed, but it would avoid the 3-sidedness we'll have to do otherwise. If we land the webkit/ and then the WebKit stuff first, we can drop the #ifdef stuff from this CL.","disapproval":false,"date":"2013-02-09 06:16:57.640530","approval":false},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"","disapproval":false,"date":"2013-02-09 06:17:09.726730","approval":false},{"sender":"piman@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"https://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc\nFile content/renderer/render_thread_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc#newcode287\ncontent/renderer/render_thread_impl.cc:287: : shared_context_main_thread_(this),\nnit: you'll need the ALLOW_THIS_IN_INITIALIZER_LIST wrapper for MSVC. (here and below)\n\nhttps://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc#newcode1168\ncontent/renderer/render_thread_impl.cc:1168: scoped_ptr<WebGraphicsContext3DCommandBufferImpl> context(\nuse WebGraphicsContext3DCommandBufferImpl::CreateOffscreenContext ?","disapproval":false,"date":"2013-02-11 19:15:30.894680","approval":false},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"https://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc\nFile content/renderer/render_thread_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc#newcode287\ncontent/renderer/render_thread_impl.cc:287: : shared_context_main_thread_(this),\nOn 2013/02/11 19:15:30, piman wrote:\n> nit: you'll need the ALLOW_THIS_IN_INITIALIZER_LIST wrapper for MSVC. (here and\n> below)\n\nDone.\n\nhttps://codereview.chromium.org/12212100/diff/4001/content/renderer/render_thread_impl.cc#newcode1168\ncontent/renderer/render_thread_impl.cc:1168: scoped_ptr<WebGraphicsContext3DCommandBufferImpl> context(\nOn 2013/02/11 19:15:30, piman wrote:\n> use WebGraphicsContext3DCommandBufferImpl::CreateOffscreenContext ?\n\nOh, nice. Done.","disapproval":false,"date":"2013-02-11 20:53:36.068000","approval":false},{"sender":"piman@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"lgtm","disapproval":false,"date":"2013-02-11 21:03:24.323320","approval":true},{"sender":"jamesr@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"lgtm2\n\nhttps://codereview.chromium.org/12212100/diff/5010/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\nFile content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/5010/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127\ncontent/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc:127: NOTREACHED();\ndo you need to override these?  Why not just use the base class implementation?","disapproval":false,"date":"2013-02-12 03:10:58.914180","approval":true},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"https://codereview.chromium.org/12212100/diff/5010/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\nFile content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/5010/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127\ncontent/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc:127: NOTREACHED();\nOn 2013/02/12 03:10:59, jamesr wrote:\n> do you need to override these?  Why not just use the base class implementation?\n\nI deleted it there so this is the only implementation, since the browser doesn't do WebGL.","disapproval":false,"date":"2013-02-12 03:15:46.512020","approval":false},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"I've reworked the RenderThreadImpl class without the use of the OffscreenContext class, to match what ImageTransportFactory is doing, and verified that it can recover from context loss and all.\n\nMoved the Memory(Allocation)CallbackProxy out from ImageTransportFactory's implementation so that we could share it here.","disapproval":false,"date":"2013-02-13 08:28:28.359640","approval":false},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"PTAL.\n\nThis implements the cc::ContextProvider interface stuff for the renderer process in RenderThreadImpl. With this, WebSharedContext3D can be removed.","disapproval":false,"date":"2013-03-05 21:15:52.314360","approval":false},{"sender":"jamesr@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"lgtm\n\nhttps://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\nFile content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127\ncontent/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc:127: return NULL;\nWhy bother overriding this?  Isn't there a default null-returning implementation somewhere further up the inheritance chain?","disapproval":false,"date":"2013-03-06 00:26:10.638930","approval":true},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"https://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\nFile content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127\ncontent/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc:127: return NULL;\nOn 2013/03/06 00:26:10, jamesr wrote:\n> Why bother overriding this?  Isn't there a default null-returning implementation\n> somewhere further up the inheritance chain?\n\nThere is, in the Platform class. This just adds a NOTREACHED() so we know browser-side shinanigans are happening. I can remove it if you like?","disapproval":false,"date":"2013-03-06 00:27:10.608190","approval":false},{"sender":"jamesr@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"On 2013/03/06 00:27:10, danakj wrote:\n> https://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\n> File content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc\n> (right):\n> \n> https://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127\n> content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc:127:\n> return NULL;\n> On 2013/03/06 00:26:10, jamesr wrote:\n> > Why bother overriding this?  Isn't there a default null-returning\n> implementation\n> > somewhere further up the inheritance chain?\n> \n> There is, in the Platform class. This just adds a NOTREACHED() so we know\n> browser-side shinanigans are happening. I can remove it if you like?\n\nYeah, I'd prefer to not clutter up the different overrides of WebKitPlatformSupportImpl with functions that we don't expect to be called.  The interface is huge and large portions aren't relevant for many implementations.  Otherwise every subclass ends up being a huge block of NOTREACHED()s","disapproval":false,"date":"2013-03-06 00:30:40.728130","approval":false},{"sender":"danakj@chromium.org","recipients":["reply@chromiumcodereview-hr.appspotmail.com"],"text":"On Tue, Mar 5, 2013 at 7:30 PM, <jamesr@chromium.org> wrote:\r\n\r\n> On 2013/03/06 00:27:10, danakj wrote:\r\n>\r\n> https://codereview.chromium.**org/12212100/diff/33002/**\r\n> content/browser/in_process_**webkit/browser_**\r\n> webkitplatformsupport_impl.cc<https://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc>\r\n>\r\n>> File content/browser/in_process_**webkit/browser_**\r\n>> webkitplatformsupport_impl.cc\r\n>> (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.chromium.**org/12212100/diff/33002/**\r\n> content/browser/in_process_**webkit/browser_**\r\n> webkitplatformsupport_impl.cc#**newcode127<https://codereview.chromium.org/12212100/diff/33002/content/browser/in_process_webkit/browser_webkitplatformsupport_impl.cc#newcode127>\r\n>\r\n>> content/browser/in_process_**webkit/browser_**\r\n>> webkitplatformsupport_impl.cc:**127:\r\n>> return NULL;\r\n>> On 2013/03/06 00:26:10, jamesr wrote:\r\n>> > Why bother overriding this?  Isn't there a default null-returning\r\n>> implementation\r\n>> > somewhere further up the inheritance chain?\r\n>>\r\n>\r\n>  There is, in the Platform class. This just adds a NOTREACHED() so we know\r\n>> browser-side shinanigans are happening. I can remove it if you like?\r\n>>\r\n>\r\n> Yeah, I'd prefer to not clutter up the different overrides of\r\n> WebKitPlatformSupportImpl with functions that we don't expect to be\r\n> called.  The\r\n> interface is huge and large portions aren't relevant for many\r\n> implementations.\r\n> Otherwise every subclass ends up being a huge block of NOTREACHED()s\r\n>\r\n\r\nk, thanks. done!\r\n\r\n\r\n>\r\n> https://codereview.chromium.**org/12212100/<https://codereview.chromium.org/12212100/>\r\n>\r\n","disapproval":false,"date":"2013-03-06 00:32:24.228560","approval":false},{"sender":"piman@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"lgtm\n\nhttps://codereview.chromium.org/12212100/diff/49001/content/browser/renderer_host/compositor_impl_android.cc\nFile content/browser/renderer_host/compositor_impl_android.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/49001/content/browser/renderer_host/compositor_impl_android.cc#newcode337\ncontent/browser/renderer_host/compositor_impl_android.cc:337: protected:\nnit: blank line before 'protected:'","disapproval":false,"date":"2013-03-06 01:08:59.585880","approval":true},{"sender":"danakj@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"Thanks!\n\nhttps://codereview.chromium.org/12212100/diff/49001/content/browser/renderer_host/compositor_impl_android.cc\nFile content/browser/renderer_host/compositor_impl_android.cc (right):\n\nhttps://codereview.chromium.org/12212100/diff/49001/content/browser/renderer_host/compositor_impl_android.cc#newcode337\ncontent/browser/renderer_host/compositor_impl_android.cc:337: protected:\nOn 2013/03/06 01:08:59, piman wrote:\n> nit: blank line before 'protected:'\n\nDone.","disapproval":false,"date":"2013-03-06 01:41:32.252680","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/danakj@chromium.org/12212100/55001","disapproval":false,"date":"2013-03-06 01:44:36.172530","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"Failed to apply patch for content/renderer/renderer_webkitplatformsupport_impl.h:\nWhile running patch -p1 --forward --force --no-backup-if-mismatch;\n  patching file content/renderer/renderer_webkitplatformsupport_impl.h\n  Hunk #2 succeeded at 105 (offset 1 line).\n  Hunk #3 succeeded at 122 (offset 1 line).\n  Hunk #4 FAILED at 159.\n  1 out of 4 hunks FAILED -- saving rejects to file content/renderer/renderer_webkitplatformsupport_impl.h.rej\n\nPatch:       content/renderer/renderer_webkitplatformsupport_impl.h\nIndex: content/renderer/renderer_webkitplatformsupport_impl.h\ndiff --git a/content/renderer/renderer_webkitplatformsupport_impl.h b/content/renderer/renderer_webkitplatformsupport_impl.h\nindex e6f1eef5ce817be3ccdaa25273bbddb1acc7aa82..530e1a0d3e0d1de22a7b381529c5f76b85a0eb30 100644\n--- a/content/renderer/renderer_webkitplatformsupport_impl.h\n+++ b/content/renderer/renderer_webkitplatformsupport_impl.h\n@@ -14,6 +14,10 @@\n #include \"third_party/WebKit/Source/WebKit/chromium/public/WebIDBFactory.h\"\n #include \"third_party/WebKit/Source/WebKit/chromium/public/WebSharedWorkerRepository.h\"\n \n+namespace cc {\n+class ContextProvider;\n+}\n+\n namespace webkit_glue {\n class WebClipboardImpl;\n }\n@@ -100,6 +104,10 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n       WebKit::WebMediaStreamCenterClient* client);\n   virtual bool processMemorySizesInBytes(\n       size_t* private_bytes, size_t* shared_bytes);\n+  virtual WebKit::WebGraphicsContext3D* createOffscreenGraphicsContext3D(\n+      const WebKit::WebGraphicsContext3D::Attributes& attributes);\n+  virtual WebKit::WebGraphicsContext3D* sharedOffscreenGraphicsContext3D();\n+  virtual GrContext* sharedOffscreenGrContext();\n \n   // Disables the WebSandboxSupport implementation for testing.\n   // Tests that do not set up a full sandbox environment should call\n@@ -113,9 +121,6 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n   // Set WebGamepads to return when sampleGamepads() is invoked.\n   static void SetMockGamepadsForTesting(const WebKit::WebGamepads& pads);\n \n- protected:\n-  virtual GpuChannelHostFactory* GetGpuChannelHostFactory() OVERRIDE;\n-\n  private:\n   bool CheckPreparsedJsCachingEnabled() const;\n \n@@ -154,6 +159,8 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n   scoped_ptr<WebKit::WebBlobRegistry> blob_registry_;\n \n   scoped_ptr<GamepadSharedMemoryReader> gamepad_shared_memory_reader_;\n+\n+  scoped_refptr<cc::ContextProvider> shared_offscreen_context_;\n };\n \n }  // namespace content","disapproval":false,"date":"2013-03-06 01:44:44.425530","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/danakj@chromium.org/12212100/58001","disapproval":false,"date":"2013-03-06 01:48:18.854660","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"Failed to apply patch for content/renderer/renderer_webkitplatformsupport_impl.h:\nWhile running patch -p1 --forward --force --no-backup-if-mismatch;\n  patching file content/renderer/renderer_webkitplatformsupport_impl.h\n  Hunk #2 succeeded at 105 (offset 1 line).\n  Hunk #3 succeeded at 122 (offset 1 line).\n  Hunk #4 FAILED at 159.\n  1 out of 4 hunks FAILED -- saving rejects to file content/renderer/renderer_webkitplatformsupport_impl.h.rej\n\nPatch:       content/renderer/renderer_webkitplatformsupport_impl.h\nIndex: content/renderer/renderer_webkitplatformsupport_impl.h\ndiff --git a/content/renderer/renderer_webkitplatformsupport_impl.h b/content/renderer/renderer_webkitplatformsupport_impl.h\nindex e6f1eef5ce817be3ccdaa25273bbddb1acc7aa82..530e1a0d3e0d1de22a7b381529c5f76b85a0eb30 100644\n--- a/content/renderer/renderer_webkitplatformsupport_impl.h\n+++ b/content/renderer/renderer_webkitplatformsupport_impl.h\n@@ -14,6 +14,10 @@\n #include \"third_party/WebKit/Source/WebKit/chromium/public/WebIDBFactory.h\"\n #include \"third_party/WebKit/Source/WebKit/chromium/public/WebSharedWorkerRepository.h\"\n \n+namespace cc {\n+class ContextProvider;\n+}\n+\n namespace webkit_glue {\n class WebClipboardImpl;\n }\n@@ -100,6 +104,10 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n       WebKit::WebMediaStreamCenterClient* client);\n   virtual bool processMemorySizesInBytes(\n       size_t* private_bytes, size_t* shared_bytes);\n+  virtual WebKit::WebGraphicsContext3D* createOffscreenGraphicsContext3D(\n+      const WebKit::WebGraphicsContext3D::Attributes& attributes);\n+  virtual WebKit::WebGraphicsContext3D* sharedOffscreenGraphicsContext3D();\n+  virtual GrContext* sharedOffscreenGrContext();\n \n   // Disables the WebSandboxSupport implementation for testing.\n   // Tests that do not set up a full sandbox environment should call\n@@ -113,9 +121,6 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n   // Set WebGamepads to return when sampleGamepads() is invoked.\n   static void SetMockGamepadsForTesting(const WebKit::WebGamepads& pads);\n \n- protected:\n-  virtual GpuChannelHostFactory* GetGpuChannelHostFactory() OVERRIDE;\n-\n  private:\n   bool CheckPreparsedJsCachingEnabled() const;\n \n@@ -154,6 +159,8 @@ class CONTENT_EXPORT RendererWebKitPlatformSupportImpl\n   scoped_ptr<WebKit::WebBlobRegistry> blob_registry_;\n \n   scoped_ptr<GamepadSharedMemoryReader> gamepad_shared_memory_reader_;\n+\n+  scoped_refptr<cc::ContextProvider> shared_offscreen_context_;\n };\n \n }  // namespace content","disapproval":false,"date":"2013-03-06 01:48:22.911980","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/danakj@chromium.org/12212100/59001","disapproval":false,"date":"2013-03-06 01:54:33.263820","approval":false},{"sender":"commit-bot@chromium.org","recipients":["danakj@chromium.org","piman@chromium.org","jamesr@chromium.org","chromium-reviews@chromium.org","joi+watch-content@chromium.org","jam@chromium.org","darin-cc@chromium.org","apatrick@chromium.org","backer@google.com"],"text":"Change committed as 186342","disapproval":false,"date":"2013-03-06 03:51:07.597520","approval":false}],"owner_email":"danakj@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"danakj","subject":"Provide shared context to Platform API in renderer.","created":"2013-02-09 06:14:41.548120","patchsets":[1,4001,5010,11001,8002,14001,16001,20001,20002,29001,33002,47001,49001,55001,59001],"modified":"2013-03-06 03:51:07.688630","closed":true,"commit":false,"issue":12212100}