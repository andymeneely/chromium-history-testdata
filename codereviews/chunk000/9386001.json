{"description":"Implement a module system for the extension bindings JS.\n\n\nBUG=104100\nTEST=existing browser tests\n\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=125132\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=125801\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=126306\n\nCommitted: http://src.chromium.org/viewvc/chrome?view=rev&revision=127117","cc":["chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"reviewers":["aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org"],"messages":[{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","aa@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"This change removes ExtensionDispatcher and friends' dependency on v8::Extensions and introduces an implementation of the node.js module system which revolves around use of a require() function. By side-stepping the v8::Extension mechanism this change also brings the benefit of allowing ChromeV8Extensions to have the same life-cycle as ChromeV8Contexts, and allows us to handle native function calls from JS in instance methods instead of static functions.\n\nThe logic for conditionally allowing v8::Extensions to be injected has been lifted into JS in the bootstrap.js file.\n\nI've tried to keep this change as small as possible for ease of reviewing and merging, but I'm happy to include more changes as you guys see fit.","disapproval":false,"date":"2012-02-13 06:42:39.809221","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","aa@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Also note that this change relies on an uncommitted WebKit change to plumb extension_group into DidCreateScriptContext().","disapproval":false,"date":"2012-02-13 07:07:55.273757","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"In general, I like the direction this is going.\n\nBut I'm finding it hard to review in detail, because of the way that ChromeV8Extension is now halfway between two worlds. It still subclasses v8::Extension and has lots of bits of the old design in it.\n\nCan you make this first review easier by creating a new peer to ChromeV8Extension that will eventually replace it? ChromeV8Extension was a terrible naming idea anyway, so this is an opportunity to fix that. Maybe extensions::Binding or something...\n\nAnyway, make a new peer to ChromeV8Extension that will eventually replace it, and implement the new design cleanly from scratch in that class. Implement one binding as a sample/test and send that out.\n\nOnce we get the core checked in, then you can have a subsequent CL that updates all the bindings to use the new system and deletes ChromeV8Extension.","disapproval":false,"date":"2012-02-13 23:24:14.556810","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"On 2012/02/13 23:24:14, Aaron Boodman wrote:\n> In general, I like the direction this is going.\n> \n> But I'm finding it hard to review in detail, because of the way that\n> ChromeV8Extension is now halfway between two worlds. It still subclasses\n> v8::Extension and has lots of bits of the old design in it.\n> \n> Can you make this first review easier by creating a new peer to\n> ChromeV8Extension that will eventually replace it? ChromeV8Extension was a\n> terrible naming idea anyway, so this is an opportunity to fix that. Maybe\n> extensions::Binding or something...\n> \n> Anyway, make a new peer to ChromeV8Extension that will eventually replace it,\n> and implement the new design cleanly from scratch in that class. Implement one\n> binding as a sample/test and send that out.\n> \n> Once we get the core checked in, then you can have a subsequent CL that updates\n> all the bindings to use the new system and deletes ChromeV8Extension.\n\nI'm hoping that this strategy will allow us to focus tighter on the review of just the core of this new system, which is the important bit. Once we're all happy with it, then you can just bash through the  porting of all the bindings and Ben and I can pay less attention to those changes.","disapproval":false,"date":"2012-02-13 23:25:31.467368","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Pretty sweet.\n\nI need to think some more about the permissions aspect...\n\nIt would be nice if there was a stronger connection between native handlers and namespace, or permission, or something. So that each handler didn't have to be careful to check permissions manually.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.cc\nFile chrome/renderer/extensions/app_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.cc#newcode81\nchrome/renderer/extensions/app_bindings.cc:81: if (name == \"GetIsInstalled\") {\nIt would be really nice to avoid this dance in every ChromeV8Extension impl. It should be possible to hold a map of name->member function pointer in the base class. It's kind of a mess of template crap, but the advantage is that subclasses can just say:\n\nRegister(\"foo\", &MyClass::DoFoo)\n\nand DoFoo magically gets called.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h\nFile chrome/renderer/extensions/app_bindings.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h#newcode26\nchrome/renderer/extensions/app_bindings.h:26: class AppBindings : public ChromeV8Extension, public ChromeV8ExtensionHandler {\nThis is multiple inheritance, which is typically discouraged in Chrome. Is there a way to factor this such that the handler is a member of the extension?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.cc\nFile chrome/renderer/extensions/chrome_v8_context.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.cc#newcode33\nchrome/renderer/extensions/chrome_v8_context.cc:33: natives_(v8::Persistent<v8::Object>::New(v8::Object::New())),\nSeems like this object should be created in v8_context_. In order to do that you will need to create it in the constructor inside a v8::Context::Scope for v8_context_.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.cc#newcode45\nchrome/renderer/extensions/chrome_v8_context.cc:45: STLDeleteElements(&extensions_);\nUse base/memory/linked_ptr instead of doing this manually.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.h\nFile chrome/renderer/extensions/chrome_v8_context.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.h#newcode85\nchrome/renderer/extensions/chrome_v8_context.h:85: void RegisterExtension(ChromeV8Extension* extension);\nNeeds comments.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.h#newcode99\nchrome/renderer/extensions/chrome_v8_context.h:99: v8::Persistent<v8::Object> natives_;\nneeds comments.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.cc\nFile chrome/renderer/extensions/chrome_v8_extension.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.cc#newcode23\nchrome/renderer/extensions/chrome_v8_extension.cc:23: #include <iostream>\nThese seem unneeded.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h\nFile chrome/renderer/extensions/chrome_v8_extension.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode29\nchrome/renderer/extensions/chrome_v8_extension.h:29: class ChromeV8Extension : public v8::Extension {\nThe inheritance on v8::Extension no longer makes sense.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode29\nchrome/renderer/extensions/chrome_v8_extension.h:29: class ChromeV8Extension : public v8::Extension {\nNow that this is no longer inheriting from v8::Extension, it makes even less sense to have the conflicting name. Could we rename it Binding or something?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode37\nchrome/renderer/extensions/chrome_v8_extension.h:37: ChromeV8Extension(const char* name,\nDo we still use the name and dependency params?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode46\nchrome/renderer/extensions/chrome_v8_extension.h:46: void ContextWillBeReleased(ChromeV8Context* context);\nThis might no longer be needed.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode60\nchrome/renderer/extensions/chrome_v8_extension.h:60: static v8::Handle<v8::Value> Router(const v8::Arguments& args);\nThis should not be exposed as interface. It can be in an anonymous namespace in the cc file.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode82\nchrome/renderer/extensions/chrome_v8_extension.h:82: void RouteFunctionHere(const char* name, v8::Handle<v8::Object> object);\nI think something like AddNativeFunction would be a more clear name. Also the params seem more naturally ordered: object, name, handler.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension_handler.h\nFile chrome/renderer/extensions/chrome_v8_extension_handler.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension_handler.h#newcode18\nchrome/renderer/extensions/chrome_v8_extension_handler.h:18: class ChromeV8ExtensionHandler : public IPC::Channel::Listener {\nThere should at least be a TODO to rename this class since it no longer has anything to do with 'handling' chrome v8 extensions. It's just a handy base class for things that want to do routed IPC.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js\nFile chrome/renderer/resources/extensions/browser_action_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/browser_action_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nI'm still not crazy about the magical names. Did you try my suggestion of wrapping in a function?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js\nFile chrome/renderer/resources/extensions/chrome_private_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/chrome_private_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nAs long as you're changing these files, you might as well just use natives.Foo directly instead of creating this alias. Most of them are only used once.\n\nAlso, since we're not using the fancy v8 native function technology anymore, distinguishing these functions specially with a leading capital letter doesn't seem worthwhile. It would look nicer to name them the same as any other function, with camelCase.","disapproval":false,"date":"2012-02-16 01:54:42.386683","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"On 2012/02/16 01:54:42, Aaron Boodman wrote:\n> Pretty sweet.\n> \n> I need to think some more about the permissions aspect...\n> \n> It would be nice if there was a stronger connection between native handlers and\n> namespace, or permission, or something. So that each handler didn't have to be\n> careful to check permissions manually.\n\nThis was meant to be sent to the newer review, sorry.","disapproval":false,"date":"2012-02-16 01:55:32.508981","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Thanks aa!\n\nNow that ModuleSystem has landed, this patch is substantially changed. I've responded to the comments that are still applicable.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.cc\nFile chrome/renderer/extensions/app_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.cc#newcode81\nchrome/renderer/extensions/app_bindings.cc:81: if (name == \"GetIsInstalled\") {\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> It would be really nice to avoid this dance in every ChromeV8Extension impl. It\n> should be possible to hold a map of name->member function pointer in the base\n> class. It's kind of a mess of template crap, but the advantage is that\n> subclasses can just say:\n> \n> Register(\"foo\", &MyClass::DoFoo)\n> \n> and DoFoo magically gets called.\n\nThe new ModuleSystem handles this.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h\nFile chrome/renderer/extensions/app_bindings.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h#newcode26\nchrome/renderer/extensions/app_bindings.h:26: class AppBindings : public ChromeV8Extension, public ChromeV8ExtensionHandler {\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> This is multiple inheritance, which is typically discouraged in Chrome. Is there\n> a way to factor this such that the handler is a member of the extension?\n\nIt's possible, but it would be quite messy. It's probably better to merge ChromeV8ExtensionHandler into ChromeV8Extension, for which I've added a TODO.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.cc\nFile chrome/renderer/extensions/chrome_v8_context.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_context.cc#newcode45\nchrome/renderer/extensions/chrome_v8_context.cc:45: STLDeleteElements(&extensions_);\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> Use base/memory/linked_ptr instead of doing this manually.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.cc\nFile chrome/renderer/extensions/chrome_v8_extension.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.cc#newcode23\nchrome/renderer/extensions/chrome_v8_extension.cc:23: #include <iostream>\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> These seem unneeded.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h\nFile chrome/renderer/extensions/chrome_v8_extension.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode29\nchrome/renderer/extensions/chrome_v8_extension.h:29: class ChromeV8Extension : public v8::Extension {\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> Now that this is no longer inheriting from v8::Extension, it makes even less\n> sense to have the conflicting name. Could we rename it Binding or something?\n\nI've added a TODO for this.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode37\nchrome/renderer/extensions/chrome_v8_extension.h:37: ChromeV8Extension(const char* name,\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> Do we still use the name and dependency params?\n\nRemoved.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode46\nchrome/renderer/extensions/chrome_v8_extension.h:46: void ContextWillBeReleased(ChromeV8Context* context);\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> This might no longer be needed.\n\nRemoved.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension.h#newcode60\nchrome/renderer/extensions/chrome_v8_extension.h:60: static v8::Handle<v8::Value> Router(const v8::Arguments& args);\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> This should not be exposed as interface. It can be in an anonymous namespace in\n> the cc file.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension_handler.h\nFile chrome/renderer/extensions/chrome_v8_extension_handler.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/chrome_v8_extension_handler.h#newcode18\nchrome/renderer/extensions/chrome_v8_extension_handler.h:18: class ChromeV8ExtensionHandler : public IPC::Channel::Listener {\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> There should at least be a TODO to rename this class since it no longer has\n> anything to do with 'handling' chrome v8 extensions. It's just a handy base\n> class for things that want to do routed IPC.\n\nI've got a TODO to merge this into ChromeV8Extension (and a TODO to rename that class).\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js\nFile chrome/renderer/resources/extensions/browser_action_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/browser_action_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> I'm still not crazy about the magical names. Did you try my suggestion of\n> wrapping in a function?\n\nNo - wrapping it in a function would definitely work, but I think it's just extra boilerplate and an extra source of potential bugs. I think it's okay to have these variables just appear in scope here - almost all JS environments execute JS in a context where extra variables are available (eg: JS on the web, JS in extensions, node) and they wouldn't be improved by requiring developers to enumerate those variables as parameters in an anonymous function.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js\nFile chrome/renderer/resources/extensions/chrome_private_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/chrome_private_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nOn 2012/02/16 01:54:42, Aaron Boodman wrote:\n> As long as you're changing these files, you might as well just use natives.Foo\n> directly instead of creating this alias. Most of them are only used once.\n> \n> Also, since we're not using the fancy v8 native function technology anymore,\n> distinguishing these functions specially with a leading capital letter doesn't\n> seem worthwhile. It would look nicer to name them the same as any other\n> function, with camelCase.\n\nI don't know, I kind of like having the native functions defined up-front. And there's just as much reason to have the names have a leading capital now as there was before - they still denote native functions, they're just set up in different ways.","disapproval":false,"date":"2012-02-27 01:06:14.473621","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"+mpcomplete - I'd like a second set of eyes on this.\n\nAs we discussed, please disable require() and requireNative() after the initial setup. This is a good mitigation against leaking those functions.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h\nFile chrome/renderer/extensions/app_bindings.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/extensions/app_bindings.h#newcode26\nchrome/renderer/extensions/app_bindings.h:26: class AppBindings : public ChromeV8Extension, public ChromeV8ExtensionHandler {\nOn 2012/02/27 01:06:14, koz wrote:\n> On 2012/02/16 01:54:42, Aaron Boodman wrote:\n> > This is multiple inheritance, which is typically discouraged in Chrome. Is\n> there\n> > a way to factor this such that the handler is a member of the extension?\n> \n> It's possible, but it would be quite messy. It's probably better to merge\n> ChromeV8ExtensionHandler into ChromeV8Extension, for which I've added a TODO.\n\nIn that case, I prefer the multiple inheritance.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js\nFile chrome/renderer/resources/extensions/browser_action_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/browser_action_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/browser_action_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nOn 2012/02/27 01:06:14, koz wrote:\n> On 2012/02/16 01:54:42, Aaron Boodman wrote:\n> > I'm still not crazy about the magical names. Did you try my suggestion of\n> > wrapping in a function?\n> \n> No - wrapping it in a function would definitely work, but I think it's just\n> extra boilerplate and an extra source of potential bugs. I think it's okay to\n> have these variables just appear in scope here - almost all JS environments\n> execute JS in a context where extra variables are available (eg: JS on the web,\n> JS in extensions, node) and they wouldn't be improved by requiring developers to\n> enumerate those variables as parameters in an anonymous function.\n\nOK, I see your point of view.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js\nFile chrome/renderer/resources/extensions/chrome_private_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/1/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js#newcode7\nchrome/renderer/resources/extensions/chrome_private_custom_bindings.js:7: var GetChromeHidden = natives.GetChromeHidden;\nOn 2012/02/27 01:06:14, koz wrote:\n> On 2012/02/16 01:54:42, Aaron Boodman wrote:\n> > As long as you're changing these files, you might as well just use natives.Foo\n> > directly instead of creating this alias. Most of them are only used once.\n> > \n> > Also, since we're not using the fancy v8 native function technology anymore,\n> > distinguishing these functions specially with a leading capital letter doesn't\n> > seem worthwhile. It would look nicer to name them the same as any other\n> > function, with camelCase.\n> \n> I don't know, I kind of like having the native functions defined up-front. And\n> there's just as much reason to have the names have a leading capital now as\n> there was before - they still denote native functions, they're just set up in\n> different ways.\n\nOK. Elsewhere in this review, I pointed out unix_hacker names also don't adhere to our js conventions. How do you feel about changing those?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.h\nFile chrome/renderer/extensions/app_bindings.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.h#newcode29\nchrome/renderer/extensions/app_bindings.h:29: // IPC::Channel::Listener\nThere's no need to have this be public unless you intend to call it from tests or something.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_context.h\nFile chrome/renderer/extensions/chrome_v8_context.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_context.h#newcode97\nchrome/renderer/extensions/chrome_v8_context.h:97: void set_module_system(scoped_ptr<ModuleSystem> module_system) {\nShould go up higher w/ other setters.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_extension.h\nFile chrome/renderer/extensions/chrome_v8_extension.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_extension.h#newcode30\nchrome/renderer/extensions/chrome_v8_extension.h:30: // TODO(koz): Rename this to ChromeNativeHandler.\nWhat about \"NativeJavaScriptModule\"? (You could rename ModuleSystem to JavaScriptModuleSystem)\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode294\nchrome/renderer/extensions/extension_dispatcher.cc:294: bool ExtensionDispatcher::AllowScriptExtension(\nCan't this entire method and all related code be deleted now? We aren't use v8 extensions anymore.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode356\nchrome/renderer/extensions/extension_dispatcher.cc:356: static std::map<std::string, base::StringPiece>* source_map = NULL;\nSadly, we do not static non-pod types in Chrome. You have to use LazyInstance instead. Search the codebase for examples.\n\nAlternately, I believe only one instance of ExtensionDispatcher gets created per-process. In that case, there is really no need for this to be static. source_map could just be an instance member.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js\nFile chrome/renderer/resources/extensions/chrome_private_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js#newcode9\nchrome/renderer/resources/extensions/chrome_private_custom_bindings.js:9: var chrome_private = requireNative('chrome_private');\nWe don't usually use unix_hacker style names in JavaScript.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/context_menus_custom_bindings.js\nFile chrome/renderer/resources/extensions/context_menus_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/context_menus_custom_bindings.js#newcode9\nchrome/renderer/resources/extensions/context_menus_custom_bindings.js:9: var context_menus = requireNative('context_menus');\ncontextMenus? Or contextMenusModule?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/event.js\nFile chrome/renderer/resources/extensions/event.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/event.js#newcode6\nchrome/renderer/resources/extensions/event.js:6: var natives = requireNative('event_bindings');\neventBindingsNatives?","disapproval":false,"date":"2012-02-28 02:42:59.063761","approval":false},{"sender":"mpcomplete@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"https://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.cc\nFile chrome/renderer/extensions/app_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.cc#newcode64\nchrome/renderer/extensions/app_bindings.cc:64: base::Bind(&AppBindings::GetIsInstalled, base::Unretained(this)));\nindent should be 4 spaces\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc\nFile chrome/renderer/extensions/event_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc#newcode55\nchrome/renderer/extensions/event_bindings.cc:55: RouteStaticFunction(\"DetachEvent\", &DetachEvent);\nBoth of these access the ExtensionImpl via GetFromArguments<ExtensionImpl>(args); Would they not need to do so if they became member functions, and used RouteFunction?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc#newcode162\nchrome/renderer/extensions/event_bindings.cc:162: return new ExtensionImpl(dispatcher, listener_counts);\nI don't understand this set of changes. Why change the ownership of listener_counts? It will leak on shutdown. That may anger the memory bots. And why return a new ExtensionImpl each time instead of caching it in a static var?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode467\nchrome/renderer/extensions/extension_dispatcher.cc:467: scoped_ptr<NativeHandler>(new AppBindings(this, context)));\n+2 indent\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode467\nchrome/renderer/extensions/extension_dispatcher.cc:467: scoped_ptr<NativeHandler>(new AppBindings(this, context)));\nfyi: make_scoped_ptr(new X) looks nicer\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode471\nchrome/renderer/extensions/extension_dispatcher.cc:471: scoped_ptr<NativeHandler>(EventBindings::Get(this)));\n+2 indent\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode535\nchrome/renderer/extensions/extension_dispatcher.cc:535: context->set_module_system(scoped_ptr<ModuleSystem>(module_system));\nWhy is there one module system per context, rather than one shared one per process? Looks like every module system is the same.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/native_handler.cc\nFile chrome/renderer/native_handler.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/native_handler.cc#newcode31\nchrome/renderer/native_handler.cc:31: handler_functions_.push_back(function);\nYou use this pattern a few times. Do you know about V8's WeakReferences? You can set up a callback for when a V8 object is garbage collected, so you can clean up associated C++ data structures.","disapproval":false,"date":"2012-02-28 20:34:19.975092","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"https://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.cc\nFile chrome/renderer/extensions/app_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.cc#newcode64\nchrome/renderer/extensions/app_bindings.cc:64: base::Bind(&AppBindings::GetIsInstalled, base::Unretained(this)));\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> indent should be 4 spaces\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.h\nFile chrome/renderer/extensions/app_bindings.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/app_bindings.h#newcode29\nchrome/renderer/extensions/app_bindings.h:29: // IPC::Channel::Listener\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> There's no need to have this be public unless you intend to call it from tests\n> or something.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_context.h\nFile chrome/renderer/extensions/chrome_v8_context.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_context.h#newcode97\nchrome/renderer/extensions/chrome_v8_context.h:97: void set_module_system(scoped_ptr<ModuleSystem> module_system) {\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> Should go up higher w/ other setters.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_extension.h\nFile chrome/renderer/extensions/chrome_v8_extension.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/chrome_v8_extension.h#newcode30\nchrome/renderer/extensions/chrome_v8_extension.h:30: // TODO(koz): Rename this to ChromeNativeHandler.\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> What about \"NativeJavaScriptModule\"? (You could rename ModuleSystem to\n> JavaScriptModuleSystem)\n\nOh yeah, nice. How about:\n\nModuleSystem => JavaScriptModuleSystem\nNativeHandler => NativeJavaScriptModule\nChromeV8Extension => ExtensionNativeModule\n\n?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc\nFile chrome/renderer/extensions/event_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc#newcode55\nchrome/renderer/extensions/event_bindings.cc:55: RouteStaticFunction(\"DetachEvent\", &DetachEvent);\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> Both of these access the ExtensionImpl via\n> GetFromArguments<ExtensionImpl>(args); Would they not need to do so if they\n> became member functions, and used RouteFunction?\n\nYes, that's right. I was planning on making those conversions in a separate change to reduce the number of delta lines in this one.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/event_bindings.cc#newcode162\nchrome/renderer/extensions/event_bindings.cc:162: return new ExtensionImpl(dispatcher, listener_counts);\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> I don't understand this set of changes. Why change the ownership of\n> listener_counts? It will leak on shutdown. That may anger the memory bots. And\n> why return a new ExtensionImpl each time instead of caching it in a static var?\n\nWith this change ChromeV8Extensions are no longer singletons, so their state is now per-context instead of per-process, so to preserve the semantics here listener_counts_ needs to be shared across all the instances.\n\nI've changed this to use LazyInstance (as per aa's comment elsewhere).\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode294\nchrome/renderer/extensions/extension_dispatcher.cc:294: bool ExtensionDispatcher::AllowScriptExtension(\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> Can't this entire method and all related code be deleted now? We aren't use v8\n> extensions anymore.\n\nYes, it can. I've removed the custom binding permission check out into a different function which is now invoked from the JS. Though this may be redundant (because SGB::GetExtensionAPIDefinition() should only return apis that are permitted in the calling context), it's isomorphic to what the code does now.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode356\nchrome/renderer/extensions/extension_dispatcher.cc:356: static std::map<std::string, base::StringPiece>* source_map = NULL;\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> Sadly, we do not static non-pod types in Chrome. You have to use LazyInstance\n> instead. Search the codebase for examples.\n> \n> Alternately, I believe only one instance of ExtensionDispatcher gets created\n> per-process. In that case, there is really no need for this to be static.\n> source_map could just be an instance member.\n\nI've made it an instance member.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode467\nchrome/renderer/extensions/extension_dispatcher.cc:467: scoped_ptr<NativeHandler>(new AppBindings(this, context)));\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> +2 indent\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode467\nchrome/renderer/extensions/extension_dispatcher.cc:467: scoped_ptr<NativeHandler>(new AppBindings(this, context)));\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> fyi: make_scoped_ptr(new X) looks nicer\n\nI think it doesn't work here because we need to upcast the arguments.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode471\nchrome/renderer/extensions/extension_dispatcher.cc:471: scoped_ptr<NativeHandler>(EventBindings::Get(this)));\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> +2 indent\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/extensions/extension_dispatcher.cc#newcode535\nchrome/renderer/extensions/extension_dispatcher.cc:535: context->set_module_system(scoped_ptr<ModuleSystem>(module_system));\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> Why is there one module system per context, rather than one shared one per\n> process? Looks like every module system is the same.\n\nModuleSystem injects JS into a particular context and holds on to that context's require() function, so it can be called through Require(), so ModuleSystem is tied to the context it is created in. The code that ModuleSystems inject (the source map) is shared between them.\n\nAlso, having each ModuleSystem be separate means that NativeHandlers are scoped to each context, rather than being static, which means we can migrate away from static methods in bindings classes towards member functions.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/native_handler.cc\nFile chrome/renderer/native_handler.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/native_handler.cc#newcode31\nchrome/renderer/native_handler.cc:31: handler_functions_.push_back(function);\nOn 2012/02/28 20:34:20, Matt Perry wrote:\n> You use this pattern a few times. Do you know about V8's WeakReferences? You can\n> set up a callback for when a V8 object is garbage collected, so you can clean up\n> associated C++ data structures.\n\nI didn't know about that, thanks. I've put a TODO to investigate using that instead of a vector of linked_ptrs.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js\nFile chrome/renderer/resources/extensions/chrome_private_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/chrome_private_custom_bindings.js#newcode9\nchrome/renderer/resources/extensions/chrome_private_custom_bindings.js:9: var chrome_private = requireNative('chrome_private');\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> We don't usually use unix_hacker style names in JavaScript.\n\nFixed here and elsewhere.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/context_menus_custom_bindings.js\nFile chrome/renderer/resources/extensions/context_menus_custom_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/context_menus_custom_bindings.js#newcode9\nchrome/renderer/resources/extensions/context_menus_custom_bindings.js:9: var context_menus = requireNative('context_menus');\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> contextMenus? Or contextMenusModule?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/event.js\nFile chrome/renderer/resources/extensions/event.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/12001/chrome/renderer/resources/extensions/event.js#newcode6\nchrome/renderer/resources/extensions/event.js:6: var natives = requireNative('event_bindings');\nOn 2012/02/28 02:42:59, Aaron Boodman wrote:\n> eventBindingsNatives?\n\nDone, here and elsewhere.","disapproval":false,"date":"2012-03-01 03:41:55.906274","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Ever closer.\n\nOn the upside, I feel like I really get this change now.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/chrome_v8_extension_handler.h\nFile chrome/renderer/extensions/chrome_v8_extension_handler.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/chrome_v8_extension_handler.h#newcode17\nchrome/renderer/extensions/chrome_v8_extension_handler.h:17: // Base class for context-scoped handlers used with ChromeV8Extension.\nTODO(koz): Rename/refactor this somehow. Maybe just pull it into ChromeV8Extension.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode320\nchrome/renderer/extensions/extension_dispatcher.cc:320: base::StringPiece GetResource(int resource_id) {\nDead code?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode324\nchrome/renderer/extensions/extension_dispatcher.cc:324: SourceMap* GetOrCreateSourceMap() {\nDead code.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode334\nchrome/renderer/extensions/extension_dispatcher.cc:334: class ChromeHiddenNativeHandler : public NativeHandler {\nGlobal definitions in a cc file should be in an anonymous namespace at top of file.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode515\nchrome/renderer/extensions/extension_dispatcher.cc:515: ModuleSystem* module_system = new ModuleSystem(&source_map_);\nMake this a scoped_ptr, and use module_system.Pass() below. That way if/when this code gets refactored, it is less likely to become wrong.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h\nFile chrome/renderer/module_system.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode52\nchrome/renderer/module_system.h:52: void DisableInjection();\nIt's only GetNative() that needs to be disabled; this can become set_natives_enabled().\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode55\nchrome/renderer/module_system.h:55: typedef std::map<std::string, linked_ptr<NativeHandler> > NativeHandlerMap;\n.append(\"\\n\");\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js\nFile chrome/renderer/resources/extensions/setup_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode11\nchrome/renderer/resources/extensions/setup_bindings.js:11: require('app');\nWhy do this in JavaScript? It seems to end up being more complex than just doing it here in C++. Control passes from C++ to a static chunk of JS, back into C++. It also requires the ContextInfo native.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode15\nchrome/renderer/resources/extensions/setup_bindings.js:15: require('json_schema');\nHave schema_generated_bindings just require this?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode16\nchrome/renderer/resources/extensions/setup_bindings.js:16: require('event_bindings');\nHave miscellaneous_bindings and schema_generated_bindings each require this?\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode22\nchrome/renderer/resources/extensions/setup_bindings.js:22: sgb.GetExtensionAPIDefinition().forEach(function(apiDef) {\nI wonder if this could be part of SchemaGeneratedBindings. For each module, try to load a custom bindings file for it.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js\nFile chrome/renderer/resources/require.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js#newcode36\nchrome/renderer/resources/require.js:36: var wrappedSource = wrap(source);\nUnless v8 does something fancy internally, it seems like this will end up making a copy of the big string that you went to such trouble to avoid allocating in the first place.\n\nIf you just required the modules to be wrapped in the source, it would avoid this problem, and you could make the interface between require.js and ModuleSystem a bit simpler by just having Run(id), not GetSource(id) and Run(id).\n\nAlternately, there could be some build-time magic to do the wrapping. Or, we could just say screw it and allocate the strings once and cache them across the process thereafter.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/source_map.h\nFile chrome/renderer/source_map.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/source_map.h#newcode13\nchrome/renderer/source_map.h:13: class SourceMap {\nThis interface is really just a detail of ModuleSystem. Nest it there? Otherwise, it needs to be included in chrome_renderer.gypi.","disapproval":false,"date":"2012-03-01 07:24:25.836008","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"https://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js\nFile chrome/renderer/resources/require.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js#newcode36\nchrome/renderer/resources/require.js:36: var wrappedSource = wrap(source);\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Unless v8 does something fancy internally, it seems like this will end up making\n> a copy of the big string that you went to such trouble to avoid allocating in\n> the first place.\n> \n> If you just required the modules to be wrapped in the source, it would avoid\n> this problem, and you could make the interface between require.js and\n> ModuleSystem a bit simpler by just having Run(id), not GetSource(id) and\n> Run(id).\n> \n> Alternately, there could be some build-time magic to do the wrapping. Or, we\n> could just say screw it and allocate the strings once and cache them across the\n> process thereafter.\n\nI feel pretty strongly that the right answer here is to wrap the code within the source of each module. That would simplify things.","disapproval":false,"date":"2012-03-01 07:30:32.562578","approval":false},{"sender":"mpcomplete@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"https://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/event_bindings.cc\nFile chrome/renderer/extensions/event_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/event_bindings.cc#newcode154\nchrome/renderer/extensions/event_bindings.cc:154: g_listener_counts = LAZY_INSTANCE_INITIALIZER;\nIf this is going to be a global, why not just have ExtensionImpl access it directly rather than passing a pointer to it.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode300\nchrome/renderer/extensions/extension_dispatcher.cc:300: const std::string& custom_binding_api_name,\nindent is wonky here\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h\nFile chrome/renderer/module_system.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode32\nchrome/renderer/module_system.h:32: // object cached.\nCould you add a quick comment that explains this is per-context? and the same in NativeHandler?","disapproval":false,"date":"2012-03-01 23:23:06.427563","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"That's good. Hopefully this means that this module system is easier to understand than the v8::Extension stuff :-)\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/chrome_v8_extension_handler.h\nFile chrome/renderer/extensions/chrome_v8_extension_handler.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/chrome_v8_extension_handler.h#newcode17\nchrome/renderer/extensions/chrome_v8_extension_handler.h:17: // Base class for context-scoped handlers used with ChromeV8Extension.\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> TODO(koz): Rename/refactor this somehow. Maybe just pull it into\n> ChromeV8Extension.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/event_bindings.cc\nFile chrome/renderer/extensions/event_bindings.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/event_bindings.cc#newcode154\nchrome/renderer/extensions/event_bindings.cc:154: g_listener_counts = LAZY_INSTANCE_INITIALIZER;\nOn 2012/03/01 23:23:06, Matt Perry wrote:\n> If this is going to be a global, why not just have ExtensionImpl access it\n> directly rather than passing a pointer to it.\n\nGood point. Done.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc\nFile chrome/renderer/extensions/extension_dispatcher.cc (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode300\nchrome/renderer/extensions/extension_dispatcher.cc:300: const std::string& custom_binding_api_name,\nOn 2012/03/01 23:23:06, Matt Perry wrote:\n> indent is wonky here\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode320\nchrome/renderer/extensions/extension_dispatcher.cc:320: base::StringPiece GetResource(int resource_id) {\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Dead code?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode324\nchrome/renderer/extensions/extension_dispatcher.cc:324: SourceMap* GetOrCreateSourceMap() {\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Dead code.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode334\nchrome/renderer/extensions/extension_dispatcher.cc:334: class ChromeHiddenNativeHandler : public NativeHandler {\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Global definitions in a cc file should be in an anonymous namespace at top of\n> file.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/extensions/extension_dispatcher.cc#newcode515\nchrome/renderer/extensions/extension_dispatcher.cc:515: ModuleSystem* module_system = new ModuleSystem(&source_map_);\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Make this a scoped_ptr, and use module_system.Pass() below. That way if/when\n> this code gets refactored, it is less likely to become wrong.\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h\nFile chrome/renderer/module_system.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode32\nchrome/renderer/module_system.h:32: // object cached.\nOn 2012/03/01 23:23:06, Matt Perry wrote:\n> Could you add a quick comment that explains this is per-context? and the same in\n> NativeHandler?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode52\nchrome/renderer/module_system.h:52: void DisableInjection();\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> It's only GetNative() that needs to be disabled; this can become\n> set_natives_enabled().\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/module_system.h#newcode55\nchrome/renderer/module_system.h:55: typedef std::map<std::string, linked_ptr<NativeHandler> > NativeHandlerMap;\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> .append(\"\\n\");\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js\nFile chrome/renderer/resources/extensions/setup_bindings.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode11\nchrome/renderer/resources/extensions/setup_bindings.js:11: require('app');\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Why do this in JavaScript? It seems to end up being more complex than just doing\n> it here in C++. Control passes from C++ to a static chunk of JS, back into C++.\n> It also requires the ContextInfo native.\n\nI think it makes it easier to understand what's happening this way - all the code that sets up bindings happens in setup_bindings.js. Better to set up some native handlers, then jump in to JS to do the rest of the job than to have C++ require various JS files, which is a C++/JS dance anyway.\n\nBesides, this may not always be so trivial. Right now all this file does is require() a bunch of modules that perform work as a side-effect, but ideally modules don't perform any work when they are require()d and it would be the responsibility of this file to invoke the schema generation explicitly, which would be much harder to do in C++ than in JS.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode15\nchrome/renderer/resources/extensions/setup_bindings.js:15: require('json_schema');\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Have schema_generated_bindings just require this?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode16\nchrome/renderer/resources/extensions/setup_bindings.js:16: require('event_bindings');\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> Have miscellaneous_bindings and schema_generated_bindings each require this?\n\nDone.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/extensions/setup_bindings.js#newcode22\nchrome/renderer/resources/extensions/setup_bindings.js:22: sgb.GetExtensionAPIDefinition().forEach(function(apiDef) {\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> I wonder if this could be part of SchemaGeneratedBindings. For each module, try\n> to load a custom bindings file for it.\n\nYeah, it could be, but with this change I'd rather it be isomorphic to how it works currently. Right now setup_bindings.js mirrors what happens with the current v8::Extension based thing: load some modules which set things in chromeHidden, then for each custom binding we check if we can inject that too, then we dispatch an onLoad() event from C++ to have the generation actually occur.\n\nRight now there's no need to set things up as listeners on onLoad() as all this code can be run synchronously, but I think that would be better as its own isolated change.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js\nFile chrome/renderer/resources/require.js (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/resources/require.js#newcode36\nchrome/renderer/resources/require.js:36: var wrappedSource = wrap(source);\nOn 2012/03/01 07:30:32, Aaron Boodman wrote:\n> On 2012/03/01 07:24:26, Aaron Boodman wrote:\n> > Unless v8 does something fancy internally, it seems like this will end up\n> making\n> > a copy of the big string that you went to such trouble to avoid allocating in\n> > the first place.\n> > \n> > If you just required the modules to be wrapped in the source, it would avoid\n> > this problem, and you could make the interface between require.js and\n> > ModuleSystem a bit simpler by just having Run(id), not GetSource(id) and\n> > Run(id).\n> > \n> > Alternately, there could be some build-time magic to do the wrapping. Or, we\n> > could just say screw it and allocate the strings once and cache them across\n> the\n> > process thereafter.\n> \n> I feel pretty strongly that the right answer here is to wrap the code within the\n> source of each module. That would simplify things.\n\nAs discussed, I've reimplemented with \"new Function(...)\" on the JS side.\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/source_map.h\nFile chrome/renderer/source_map.h (right):\n\nhttps://chromiumcodereview.appspot.com/9386001/diff/30001/chrome/renderer/source_map.h#newcode13\nchrome/renderer/source_map.h:13: class SourceMap {\nOn 2012/03/01 07:24:26, Aaron Boodman wrote:\n> This interface is really just a detail of ModuleSystem. Nest it there?\n> Otherwise, it needs to be included in chrome_renderer.gypi.\n\nDone.","disapproval":false,"date":"2012-03-02 01:13:58.279008","approval":false},{"sender":"mpcomplete@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"http://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js\nFile chrome/renderer/resources/extensions/apitest.js (right):\n\nhttp://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js#newcode8\nchrome/renderer/resources/extensions/apitest.js:8: (function() {\nThis sort of extra wrapping can go away in all the files, right?","disapproval":false,"date":"2012-03-02 02:15:49.096470","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"http://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js\nFile chrome/renderer/resources/extensions/apitest.js (right):\n\nhttp://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js#newcode8\nchrome/renderer/resources/extensions/apitest.js:8: (function() {\nOn 2012/03/02 02:15:49, Matt Perry wrote:\n> This sort of extra wrapping can go away in all the files, right?\n\nYes, that's right. I've removed it from all the files, but I've left the indenting the same for those that were indented, for blame's sake.","disapproval":false,"date":"2012-03-02 02:23:06.134449","approval":false},{"sender":"kalman@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"http://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js\nFile chrome/renderer/resources/extensions/apitest.js (right):\n\nhttp://codereview.chromium.org/9386001/diff/34004/chrome/renderer/resources/extensions/apitest.js#newcode8\nchrome/renderer/resources/extensions/apitest.js:8: (function() {\nOn 2012/03/02 02:23:06, koz wrote:\n> On 2012/03/02 02:15:49, Matt Perry wrote:\n> > This sort of extra wrapping can go away in all the files, right?\n> \n> Yes, that's right. I've removed it from all the files, but I've left the\n> indenting the same for those that were indented, for blame's sake.\n\nAs in, who to blame for unnecessary indentation?","disapproval":false,"date":"2012-03-02 02:23:59.817927","approval":false},{"sender":"aa@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"lgtm\n\nland it","disapproval":false,"date":"2012-03-02 03:14:44.310227","approval":true},{"sender":"mpcomplete@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"lgtm","disapproval":false,"date":"2012-03-02 03:23:00.992015","approval":true},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/43003","disapproval":false,"date":"2012-03-06 04:23:45.298852","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Change committed as 125132","disapproval":false,"date":"2012-03-06 07:16:35.777403","approval":false},{"sender":"dbeam@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"koz: I believe this CL has broken Win 7 Sync bots as they've been running red/orange since your commit - http://build.chromium.org/p/chromium/buildstatus?builder=Win7%20Sync&number=17279.\n\nFailing tests:\nTwoClientSessionsSyncTest.SingleClientChanged\nTwoClientSessionsSyncTest.SingleClientEnabledEncryptionAndChanged\nTwoClientSessionsSyncTest.BothChanged\nTwoClientSessionsSyncTest.FirstChangesAndSetsPassphrase\nTwoClientSessionsSyncTest.FirstChangesWhileSecondWaitingForPassphrase\nTwoClientSessionsSyncTest.SecondChangesAfterEncrAndPassphraseChange","disapproval":false,"date":"2012-03-06 09:20:18.358374","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/51001","disapproval":false,"date":"2012-03-09 02:52:04.324922","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Change committed as 125801","disapproval":false,"date":"2012-03-09 04:36:05.443087","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/59001","disapproval":false,"date":"2012-03-12 22:52:01.304330","approval":false},{"sender":"koz@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"On 2012/03/12 22:52:01, I haz the power (commit-bot) wrote:\n> CQ is trying da patch. Follow status at\n> https://chromium-status.appspot.com/cq/koz%40chromium.org/9386001/59001\n\nThird time's a charm...","disapproval":false,"date":"2012-03-12 22:53:54.170578","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Change committed as 126306","disapproval":false,"date":"2012-03-13 02:09:44.263834","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/67001","disapproval":false,"date":"2012-03-16 00:31:46.289210","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Can't apply patch for file chrome/renderer/extensions/miscellaneous_bindings.cc.\nWhile running patch -p1 --forward --force;\npatching file chrome/renderer/extensions/miscellaneous_bindings.cc\nHunk #1 FAILED at 62.\nHunk #2 succeeded at 186 (offset 31 lines).\n1 out of 2 hunks FAILED -- saving rejects to file chrome/renderer/extensions/miscellaneous_bindings.cc.rej","disapproval":false,"date":"2012-03-16 00:32:06.559616","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/71001","disapproval":false,"date":"2012-03-16 00:59:45.262869","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Failed to request the patch to try. Please note that binary filesare still unsupported at the moment, this is being worked on.\n\nThanks for your patience.\n\nHTTP Error 500: \n<html><head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<title>500 Server Error</title>\n</head>\n<body text=#000000 bgcolor=#ffffff>\n<h1>Error: Server Error</h1>\n<h2>The server encountered an error and could not complete your request.<p>If the problem persists, please <A HREF=\"http://code.google.com/appengine/community.html\">report</A> your problem and mention this error message and the query that caused it.</h2>\n<h2></h2>\n</body></html>","disapproval":false,"date":"2012-03-16 04:43:57.762719","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/71001","disapproval":false,"date":"2012-03-16 04:44:08.920847","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Failed to request the patch to try. Please note that binary filesare still unsupported at the moment, this is being worked on.\n\nThanks for your patience.\n\nHTTP Error 500: \n<html><head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<title>500 Server Error</title>\n</head>\n<body text=#000000 bgcolor=#ffffff>\n<h1>Error: Server Error</h1>\n<h2>The server encountered an error and could not complete your request.<p>If the problem persists, please <A HREF=\"http://code.google.com/appengine/community.html\">report</A> your problem and mention this error message and the query that caused it.</h2>\n<h2></h2>\n</body></html>","disapproval":false,"date":"2012-03-16 04:46:14.811562","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"CQ is trying da patch. Follow status at\nhttps://chromium-status.appspot.com/cq/koz@chromium.org/9386001/71001","disapproval":false,"date":"2012-03-16 04:50:09.583085","approval":false},{"sender":"commit-bot@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"Change committed as 127117","disapproval":false,"date":"2012-03-16 06:25:33.903278","approval":false},{"sender":"timurrrr@chromium.org","recipients":["koz@chromium.org","aa@google.com","kalman@chromium.org","benwells@chromium.org","aa@chromium.org","mpcomplete@chromium.org","dbeam@chromium.org","chromium-reviews@chromium.org","jam@chromium.org","achuith+watch@chromium.org","mihaip+watch@chromium.org","joi+watch-content@chromium.org","rginda+watch@chromium.org","darin-cc@chromium.org","brettw-cc@chromium.org"],"text":"FYI, this has introduced quite a few leaks:\nhttp://code.google.com/p/chromium/issues/detail?id=118575","disapproval":false,"date":"2012-03-16 15:30:33.488037","approval":false}],"owner_email":"koz@chromium.org","private":false,"base_url":"svn://svn.chromium.org/chrome/trunk/src","owner":"koz","subject":"Implement a module system for the extension bindings JS.","created":"2012-02-13 06:22:47.097588","patchsets":[1,12001,25001,25012,30001,33002,34004,29003,43002,46003,43003,51001,59001,67001,71001],"modified":"2012-03-16 15:30:33.824626","closed":true,"commit":false,"issue":9386001}